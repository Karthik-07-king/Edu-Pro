from typing import List, Tuple

from ib_notifications.constants.enums import NotificationCategory
from ib_notifications.dtos.notification_dto import NotificationDTO
from ib_notifications.dtos.notification_message_dto import \
    NotificationMessageDTO
from ib_notifications.interactors.add_users_into_group_interactor import \
    AddUsersToGroupInteractor
from ib_notifications.interactors.create_group_interactor import \
    CreateGroupInteractor
from ib_notifications.interactors. \
    create_or_update_cloud_message_token_interactor import \
    CreateOrUpdateCloudMessageTokenInteractor
from ib_notifications.interactors.delete_all_cloud_message_tokens_interactor \
    import DeleteAllCloudMessageTokensInteractor
from ib_notifications.interactors.delete_cloud_message_token_interactor import \
    DeleteCloudMessageTokenInteractor
from ib_notifications.interactors.dtos import UserNotificationsQueryDTO, \
    NotificationCategoryCountDTO
from ib_notifications.interactors.get_user_notifications_interactor \
    import GetUserNotificationsInteractor
from ib_notifications.interactors.get_user_notifications_v2_interactor import \
    GetUserNotificationsInteractorV2
from ib_notifications.interactors.remove_users_from_group_interactor import \
    RemoveUsersFromGroupInteractor
from ib_notifications.interactors.send_notification_to_group_interactor import \
    SendNotificationToGroupInteractor
from ib_notifications.interactors.send_notification_to_users_interactor import \
    SendNotificationToUsersInteractor
from ib_notifications.interactors.unread_notifications_count_interactor \
    import UnreadNotificationsCountInteractor
from ib_notifications.storages.storage_implementation import \
    StorageImplementation


class ServiceInterface:
    storage = StorageImplementation()

    def get_user_notifications(self, user_id: str, offset: int, limit: int) -> \
            Tuple[List[NotificationDTO], int]:

        interactor = GetUserNotificationsInteractor(storage=self.storage)

        notifications_dtos, total_count = interactor.get_user_notifications(
            user_id=user_id, offset=offset, limit=limit)
        return notifications_dtos, total_count

    def get_unread_notifications_count(self, user_id: str) -> int:
        interactor = UnreadNotificationsCountInteractor(storage=self.storage)

        unread_notifications_count = interactor.get_unread_notifications_count(
            user_id=user_id)
        return unread_notifications_count

    def mark_user_notifications_as_read(self, user_id: str):
        from ib_notifications.interactors.\
            mark_all_user_notifications_as_read_interactor import \
            MarkAllUserNotificationsAsReadInteractor
        interactor = MarkAllUserNotificationsAsReadInteractor(
            storage=self.storage)

        interactor.mark_all_user_notifications_as_read(
            user_id=user_id)

    def create_or_update_cloud_message_token(self, user_id: str,
                                             device_id: str, device_type: str,
                                             token: str):
        interactor = CreateOrUpdateCloudMessageTokenInteractor(
            storage=self.storage)
        interactor.create_or_update_cloud_message_token(
            user_id=user_id,
            device_id=device_id,
            device_type=device_type,
            token=token
        )

    def delete_cloud_message_token_for_user_device(
            self, user_id: str, device_id: str, device_type: str):
        interactor = DeleteCloudMessageTokenInteractor(
            storage=self.storage
        )
        interactor.delete_cloud_message_token(
            user_id=user_id,
            device_id=device_id,
            device_type=device_type,
        )

    def create_group(self, name: str) -> int:
        interactor = CreateGroupInteractor(storage=self.storage)
        group_id = interactor.create_group(
            name=name)
        return group_id

    def add_users_to_group(self, group_id: int, user_ids: List[str]):
        interactor = AddUsersToGroupInteractor(storage=self.storage)
        interactor.add_users_into_group(
            group_id=group_id,
            user_ids=user_ids,
        )

    def remove_users_from_group(self, group_id: int, user_ids: List[str]):
        interactor = RemoveUsersFromGroupInteractor(storage=self.storage)
        interactor.remove_users_from_group(
            group_id=group_id,
            user_ids=user_ids,
        )

    def send_notification_to_users(
            self, user_ids: List[str],
            notification_data: NotificationMessageDTO,
            device_types: List[str],
            log_notification: bool):

        from ib_notifications.adapters.service_adapter import get_service_adapter
        msg_service = get_service_adapter().cloud_msg_service

        interactor = SendNotificationToUsersInteractor(storage=self.storage)
        users_without_cm_token_dto = interactor.send_notification_to_users(
            user_ids=user_ids,
            notification_message_dto=notification_data,
            log_notification=log_notification,
            device_types=device_types,
            cloud_message_provider=msg_service
        )
        return users_without_cm_token_dto

    def send_notification_to_group(
            self, group_id: int,
            notification_data: NotificationMessageDTO, log_notification: bool,
            device_types: List[str]):
        from ib_notifications.adapters.service_adapter import get_service_adapter
        msg_service = get_service_adapter().cloud_msg_service

        interactor = SendNotificationToGroupInteractor(storage=self.storage)
        users_without_cm_token_dto = interactor.send_notification_to_group(
            group_id=group_id, cloud_message_service=msg_service,
            notification_message_dto=notification_data,
            log_notification=log_notification, device_types=device_types
        )
        return users_without_cm_token_dto

    def delete_all_cloud_message_tokens_for_user(self, user_id: str):
        interactor = DeleteAllCloudMessageTokensInteractor(
            storage=self.storage)
        interactor.delete_all_cloud_message_tokens(user_id=user_id)

    @staticmethod
    def get_user_notifications_v2(
            query_dto: UserNotificationsQueryDTO
    ) -> Tuple[List[NotificationDTO], int]:
        interactor = GetUserNotificationsInteractorV2(StorageImplementation())
        return interactor.get_user_notifications_v2(query_dto)

    def get_user_notifications_count_for_categories(
            self, user_id: str, categories: List[NotificationCategory]
    ) -> List[NotificationCategoryCountDTO]:
        from ib_notifications.interactors.get_user_notifications_count_for_categories \
            import GetUserNotificationsCountForCategoriesInteractor

        interactor = GetUserNotificationsCountForCategoriesInteractor(
            storage=self.storage
        )

        return interactor.get_user_notifications_count_for_categories(
            user_id=user_id, categories=categories
        )


    def mark_user_notification_as_unread(
            self, user_id: str, notification_id: str
    ):
        from ib_notifications.interactors.mark_user_notification_as_unread_interactor \
            import MarkUserNotificationAsUnreadInteractor

        interactor = MarkUserNotificationAsUnreadInteractor(
            storage=self.storage
        )
        interactor.mark_user_notification_as_unread(
            user_id=user_id, notification_id=notification_id
        )

    def mark_a_user_notification_as_read(
            self, user_id: str, notification_id: str
    ):
        from ib_notifications.interactors.mark_a_user_notification_as_read_interactor \
            import MarkAUserNotificationAsReadInteractor

        interactor = MarkAUserNotificationAsReadInteractor(
            storage=self.storage
        )
        interactor.mark_a_user_notification_as_read(
            user_id=user_id, notification_id=notification_id
        )
from typing import List

from ib_notifications.dtos.notification_dto import NotificationDTO
from django_swagger_utils.drf_server.exceptions import ExpectationFailed, \
    NotFound, BadRequest

from ib_notifications.constants.exception_messages import EMPTY_USER_LIST, \
    EMPTY_GROUP, INVALID_GROUP_ID, INVALID_DEVICE_TYPE
from django_swagger_utils.drf_server.exceptions import NotFound, \
    ExpectationFailed

from ib_notifications.constants.exception_messages import INVALID_GROUP_ID, \
    EMPTY_USER_LIST
from ib_notifications.dtos.user_ids_with_no_cm_token import \
    SendNotificationResponseDTO
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface


class PresenterImplementation(PresenterInterface):
    def get_user_notifications_response(self, notification_dtos: List[
            NotificationDTO], total_count: int):
        notifications = [
            self._convert_notification_dto_to_dict(notification_dto)
            for notification_dto in notification_dtos
        ]

        response = {
            "notifications": notifications,
            "total_count": total_count
        }
        return response

    def get_unread_notifications_count_response(
            self, unread_notifications_count: int):
        response = {
            "unread_notifications_count": unread_notifications_count
        }
        return response

    @staticmethod
    def _convert_notification_dto_to_dict(
            notification_dto: NotificationDTO):
        notification_dict = {
            "title": notification_dto.title,
            "message": notification_dto.message,
            "extra_data": notification_dto.extra_data,
            "notification_type": notification_dto.notification_type,
            "notification_id": notification_dto.notification_id,
            "read_at": notification_dto.read_at,
            "created_at": notification_dto.created_at
        }
        return notification_dict

    def get_send_notification_to_user_response(
            self, user_ids_without_cm_token_dto: SendNotificationResponseDTO):
        user_ids = user_ids_without_cm_token_dto.user_ids_without_cm_token
        response = {
            "user_ids_without_cm_tokens": user_ids
        }
        return response

    def get_send_notification_to_group_response(
            self,
            user_ids_without_cm_token_dto: SendNotificationResponseDTO):
        user_ids = user_ids_without_cm_token_dto.user_ids_without_cm_token
        response = {"user_ids_without_cm_tokens": user_ids}
        return response

    def raise_exception_for_empty_user_ids(self):
        raise ExpectationFailed(*EMPTY_USER_LIST)

    def raise_empty_group_exception(self):
        raise ExpectationFailed(*EMPTY_GROUP)

    def raise_invalid_device_type(self):
        raise BadRequest(*INVALID_DEVICE_TYPE)

    def raise_invalid_group_id(self):
        raise NotFound(*INVALID_GROUP_ID)

    def raise_empty_user_ids_exception(self):
        raise ExpectationFailed(*EMPTY_USER_LIST)

    def raise_invalid_group_id_exception(self):
        raise NotFound(*INVALID_GROUP_ID)

    def create_group_response(self, group_id: int):
        response = {
            "group_id": group_id
        }
        return response

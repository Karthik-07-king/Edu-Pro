from typing import List, Dict

from ib_notifications.dtos.notification_dto import NotificationDTO
from ib_notifications.exceptions.custom_exceptions import InvalidNotificationCategory
from ib_notifications.interactors.presenters.user_notifications_presenter_v2 import \
    UserNotificationsPresenterInterfaceV2
from django_swagger_utils.drf_server.exceptions import NotFound


class UserNotificationsPresenterV2(UserNotificationsPresenterInterfaceV2):

    def get_user_notifications_response(
        self, notification_dtos: List[NotificationDTO], total_count: int
    ):
        notifications = [
            self._convert_notification_dto_to_dict(notification_dto)
            for notification_dto in notification_dtos
        ]

        response = {
            "notifications": notifications,
            "total_count": total_count
        }
        return response

    def raise_invalid_notification_category_enum(self, err: InvalidNotificationCategory):
        from ib_notifications.constants.exception_messages import \
            INVALID_NOTIFICATION_CATEGORY_ENUM
        raise NotFound(*INVALID_NOTIFICATION_CATEGORY_ENUM)

    @staticmethod
    def _convert_notification_dto_to_dict(
            notification_dto: NotificationDTO
    ) -> Dict:
        notification_dict = {
            "title": notification_dto.title,
            "message": notification_dto.message,
            "extra_data": notification_dto.extra_data,
            "notification_type": notification_dto.notification_type,
            "notification_id": notification_dto.notification_id,
            "read_at": notification_dto.read_at,
            "created_at": notification_dto.created_at
        }
        return notification_dict

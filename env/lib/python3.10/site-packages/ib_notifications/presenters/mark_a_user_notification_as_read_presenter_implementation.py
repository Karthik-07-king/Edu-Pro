from django_swagger_utils.utils.http_response_mixin import HTTPResponseMixin

from ib_notifications.exceptions.custom_exceptions import \
    InvalidUserNotificationId, GivenNotificationHasAlreadyReadByUser, \
    InvalidNotificationId
from ib_notifications.interactors.presenter_interfaces.\
    mark_a_user_notification_as_read_presenter_interface import \
    MarkAUserNotificationAsReadPresenterInterface


class MarkAUserNotificationAsReadPresenterImplementation(
        MarkAUserNotificationAsReadPresenterInterface, HTTPResponseMixin
):

    def raise_invalid_notification_exception(self, err: InvalidNotificationId):
        from ib_notifications.constants.exception_messages import \
            INVALID_NOTIFICATION_ID
        response_dict = ({
            "response": INVALID_NOTIFICATION_ID[0].format(err.notification_id),
            "http_status_code": 404,
            "res_status": INVALID_NOTIFICATION_ID[1]
        })
        return self.prepare_404_not_found_response(response_dict)

    def raise_invalid_user_notification_exception(
            self, err: InvalidUserNotificationId):
        from ib_notifications.constants.exception_messages import \
            INVALID_USER_NOTIFICATION_ID
        response_dict = ({
            "response": INVALID_USER_NOTIFICATION_ID[0].format(
                err.notification_id),
            "http_status_code": 404,
            "res_status": INVALID_USER_NOTIFICATION_ID[1]
        })
        return self.prepare_404_not_found_response(response_dict)

    def raise_given_notification_has_already_read_by_user_exception(
            self, err: GivenNotificationHasAlreadyReadByUser):
        from ib_notifications.constants.exception_messages import \
            NOTIFICATION_HAS_ALREADY_READ_BY_USER
        response_dict = ({
            "response": NOTIFICATION_HAS_ALREADY_READ_BY_USER[0].format(
                err.notification_id),
            "http_status_code": 404,
            "res_status": NOTIFICATION_HAS_ALREADY_READ_BY_USER[1]
        })
        return self.prepare_404_not_found_response(response_dict)

import json
from typing import Tuple, List, Dict, Optional

from django.utils import timezone

from ib_notifications.dtos.notification_dto import NotificationDTO
from ib_notifications.dtos.notification_message_dto import \
    NotificationMessageDTO
from ib_notifications.exceptions.custom_exceptions import InvalidUserNotificationId
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface
from ib_notifications.dtos.cm_token_with_user_id_dto import \
    UserIdWithCMToken
from ib_notifications.models import Group, GroupUser, Notification, \
    UserNotification, UserDeviceToken


class StorageImplementation(StorageInterface):

    def get_unread_notifications_count(self, user_id: str) -> int:
        unread_notifications_count = UserNotification.objects.filter(
            user_id=user_id, read_at=None, is_deleted=False
        ).count()
        return unread_notifications_count

    def get_all_notifications_count(self, user_id: str) -> int:
        all_notifications_count = UserNotification.objects.filter(
            user_id=user_id, is_deleted=False
        ).count()
        return all_notifications_count

    def mark_user_notifications_as_read(
            self, user_id: str, notification_ids: List[str]):
        UserNotification.objects.filter(
            user_id=user_id, read_at=None,
            notification_id__in=notification_ids).update(
            read_at=timezone.now())

    def mark_user_notifications_as_unread(
            self, user_id: str, notification_ids: List[str]):
        UserNotification.objects.filter(
            user_id=user_id, read_at__isnull=False,
            notification_id__in=notification_ids).update(
            read_at=None
        )

    def get_user_notifications(self, user_id: str, offset: int, limit: int) -> \
            Tuple[List[NotificationDTO], int]:
        user_notifications = UserNotification.objects.filter(
            user_id=user_id, is_deleted=False
        ).select_related(
            'notification'
        ).order_by('-notification__created_at')

        total_count = user_notifications.count()
        selected_user_notifications = user_notifications[offset:offset + limit]

        notification_dtos = [
            self._convert_user_notification_to_dto(user_notification)
            for user_notification in selected_user_notifications
        ]
        return notification_dtos, total_count

    @staticmethod
    def _convert_user_notification_to_dto(user_notification: UserNotification):
        notification = user_notification.notification
        notification_dto = NotificationDTO(
            title=notification.title,
            message=notification.message,
            extra_data=notification.extra_data,
            notification_type=notification.notification_type,
            notification_id=notification.id,
            read_at=user_notification.read_at,
            created_at=notification.created_at
        )
        return notification_dto

    def delete_tokens_for_device(self, device_id: str, device_type: str):
        UserDeviceToken.objects.filter(
            device_id=device_id,
            device_type=device_type).delete()

    def create_cloud_message_token(self, user_id: str, device_id: str,
                                   device_type: str, token: str):
        UserDeviceToken.objects.create(
            user_id=user_id, device_id=device_id,
            device_type=device_type, token=token
        )

    def delete_token_for_user_device(self, user_id: str, device_id: str,
                                     device_type: str):
        UserDeviceToken.objects.filter(
            user_id=user_id, device_id=device_id,
            device_type=device_type).delete()

    def get_user_ids_in_group(self, group_id: int) -> List[str]:
        user_ids = list(GroupUser.objects.filter(
            group_id=group_id).values_list('user_id', flat=True))
        return user_ids

    def create_group(self, name: str) -> int:
        group = Group.objects.create(name=name)
        return group.id

    def is_invalid_group_id(self, group_id: int) -> bool:
        is_invalid_group_id = not Group.objects.filter(id=group_id).exists()
        return is_invalid_group_id

    def remove_users_from_group(self, group_id: int, user_ids: List[str]):
        GroupUser.objects.filter(group_id=group_id,
                                 user_id__in=user_ids).delete()

    def add_users_to_group(self, group_id: int, user_ids: List[str]):
        group_users = [
            GroupUser(group_id=group_id, user_id=user_id) for user_id in
            user_ids
        ]
        GroupUser.objects.bulk_create(group_users)

    def get_user_cm_tokens_for_specific_device_types(
            self, user_ids: List[str], device_types: List[str]) -> \
            List[UserIdWithCMToken]:
        device_tokens = UserDeviceToken.objects.filter(
            user_id__in=user_ids, device_type__in=device_types
        )

        user_id_with_cm_token_dtos = [
            UserIdWithCMToken(
                user_device_token_id=token_obj.id,
                user_id=token_obj.user_id,
                cm_token=token_obj.token,
                device_type=token_obj.device_type
            )
            for token_obj in device_tokens
        ]
        return user_id_with_cm_token_dtos

    def log_notification(
        self,
        user_ids: List[str],
        notification_message_dto: NotificationMessageDTO,
        notification_service_response: Dict
    ):
        notification_obj = Notification.objects.create(
            id=notification_message_dto.notification_id,
            title=notification_message_dto.title,
            message=notification_message_dto.message,
            notification_type=notification_message_dto.notification_type,
            extra_data=notification_message_dto.extra_data,
            notification_service_response=json.dumps(notification_service_response)
        )
        user_notifications = [
            UserNotification(notification_id=notification_obj.id,
                             user_id=user_id)
            for user_id in user_ids
        ]
        UserNotification.objects.bulk_create(user_notifications)

    def get_user_cm_tokens_for_all_device_types(self, user_ids: List[str]) -> \
            List[UserIdWithCMToken]:
        device_tokens = UserDeviceToken.objects.filter(
            user_id__in=user_ids
        )

        user_id_with_cm_token_dtos = [
            UserIdWithCMToken(
                user_device_token_id=token_obj.id,
                user_id=token_obj.user_id,
                cm_token=token_obj.token,
                device_type=token_obj.device_type
            )
            for token_obj in device_tokens
        ]
        return user_id_with_cm_token_dtos

    def get_user_ids_for_given_group_id(self, group_id: int) -> List[str]:
        user_ids_set = GroupUser.objects.filter(group_id=group_id).values_list(
            "user_id", flat=True)
        user_ids = list(user_ids_set)
        return user_ids

    def check_is_valid_device_id(self, device_id: str) -> bool:
        is_device_id_exists = UserDeviceToken.objects.filter(
            device_id=device_id).exists()
        return is_device_id_exists

    def get_valid_user_notification_ids(
            self, notification_ids: List[str], user_id: str) -> List[str]:
        user_notification_ids_queryset = UserNotification.objects.filter(
            notification_id__in=notification_ids, user_id=user_id
        ).values_list('notification_id', flat=True)

        user_notification_ids = list(user_notification_ids_queryset)
        return user_notification_ids

    def get_user_unread_notification_ids(self, user_id: str) -> List[str]:

        user_notification_ids_queryset = UserNotification.objects.filter(
            read_at=None, user_id=user_id
        ).values_list('notification_id', flat=True)

        user_notification_ids = list(user_notification_ids_queryset)
        return user_notification_ids

    def check_is_valid_notification_id(self, notification_id: str) -> bool:
        is_notification_exists = \
            Notification.objects.filter(id=notification_id).exists()

        return is_notification_exists

    def get_valid_notification_ids(
            self, notification_ids: List[str]) -> List[str]:
        valid_notification_ids_queryset = \
            Notification.objects.filter(
                id__in=notification_ids).values_list('id', flat=True)
        valid_notification_ids_list = list(valid_notification_ids_queryset)

        return valid_notification_ids_list

    def validate_user_notification_is_unread(
            self, user_id: str, notification_id: str) -> bool:
        is_unread_user_notification = UserNotification.objects.filter(
            user_id=user_id, notification_id=notification_id, read_at=None
        ).exists()

        return is_unread_user_notification

    def delete_cloud_message_tokens(self, user_id):
        UserDeviceToken.objects.filter(user_id=user_id).delete()

    def get_all_user_notifications(
        self, user_id: str, offset: int, limit: int
    ) -> Tuple[List[int], int]:
        user_notifications = UserNotification.objects.filter(
            user_id=user_id, is_deleted=False
        ).values_list('id', flat=True).order_by('-notification__created_at')

        total_count = user_notifications.count()
        selected_user_notifications = list(user_notifications[offset:offset + limit])
        return selected_user_notifications, total_count

    def get_user_unread_notifications(
        self, user_id: str, offset: int, limit: int
    ) -> Tuple[List[int], int]:
        unread_notifications = UserNotification.objects.filter(
            user_id=user_id, read_at=None, is_deleted=False
        ).values_list("id", flat=True).order_by('-notification__created_at')

        total_count = unread_notifications.count()
        selected_user_notifications = list(unread_notifications[offset:offset + limit])
        return selected_user_notifications, total_count

    def get_user_notifications_details_bulk(
        self, user_notifications_ids: List[int]
    ) -> List[NotificationDTO]:
        user_notifications = UserNotification.objects.filter(
            id__in=user_notifications_ids, is_deleted=False
        ).select_related(
            'notification'
        ).order_by('-notification__created_at')

        notification_dtos = [
            self._convert_user_notification_to_dto(user_notification)
            for user_notification in user_notifications
        ]
        return notification_dtos

    def get_user_notification_id(self, user_id: str, notification_id: str) -> str:
        user_notification_id = UserNotification.objects.filter(
            user_id=user_id, notification_id=notification_id
        ).values_list("id", flat=True).first()
        if not user_notification_id:
            raise InvalidUserNotificationId(notification_id)
        return user_notification_id

    def mark_user_notifications_as_deleted(self, user_notification_ids: List[str]):
        UserNotification.objects.filter(id__in=user_notification_ids).update(
            is_deleted=True
        )

    def get_fcm_credentials_json(self) -> Optional[Dict[str, str]]:
        from ib_notifications.models import FCMKeys

        credentials_str = FCMKeys.objects.all().values_list(
            "credentials", flat=True
        ).first()

        if credentials_str:
            return json.loads(credentials_str)

        return None

    def delete_user_device_tokens(self, user_device_token_ids):
        UserDeviceToken.objects.filter(id__in=user_device_token_ids).delete()

from typing import List
from ib_notifications.dtos.notification_message_dto import \
    NotificationMessageDTO
from ib_notifications.dtos.user_ids_with_no_cm_token import \
    SendNotificationResponseDTO
from ib_notifications.exceptions.exceptions import EmptyGroupException, \
    InvalidGroupIdException, EmptyUserListException, InvalidDeviceTypeException
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface
from ib_notifications.interactors.send_notification_to_users_interactor import \
    SendNotificationToUsersInteractor
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface
from ib_notifications.services.cloud_messaging_interface import \
    CloudMessagingInterface


class SendNotificationToGroupInteractor:

    def __init__(self, storage: StorageInterface):
        self.storage = storage

    def send_notification_to_group_response(
            self, group_id: int, presenter: PresenterInterface,
            cloud_message_service: CloudMessagingInterface,
            notification_message_dto: NotificationMessageDTO, log_notification: bool,
            device_types: List[str]):

        try:
            user_ids_with_no_cm_token_dto = self.send_notification_to_group(
                group_id=group_id,
                cloud_message_service=cloud_message_service,
                notification_message_dto=notification_message_dto,
                log_notification=log_notification, device_types=device_types)

        except EmptyGroupException:
            presenter.raise_empty_group_exception()
            return
        except InvalidGroupIdException:
            presenter.raise_invalid_group_id()
            return
        except EmptyUserListException:
            presenter.raise_exception_for_empty_user_ids()
            return
        except InvalidDeviceTypeException:
            presenter.raise_invalid_device_type()
            return

        return presenter.get_send_notification_to_group_response(
            user_ids_without_cm_token_dto=user_ids_with_no_cm_token_dto)

    def send_notification_to_group(
            self, group_id: int,
            cloud_message_service: CloudMessagingInterface,
            notification_message_dto: NotificationMessageDTO,
            log_notification: bool, device_types: List[str]
    ) -> SendNotificationResponseDTO:

        self._check_if_group_id_is_invalid(group_id=group_id)
        user_ids = self._get_user_ids_in_group(group_id=group_id)
        self._check_if_group_is_empty(user_ids=user_ids)

        user_ids_without_cm_token_dto = \
            self._send_notification_and_get_user_ids_with_no_cm_token(
                user_ids=user_ids, notification_message_dto=notification_message_dto,
                cloud_message_service=cloud_message_service,
                log_notification=log_notification, device_types=device_types)

        return user_ids_without_cm_token_dto

    def _check_if_group_id_is_invalid(self, group_id: int):
        is_invalid_group_id = self.storage.is_invalid_group_id(
            group_id=group_id)
        if is_invalid_group_id:
            raise InvalidGroupIdException

    @staticmethod
    def _check_if_group_is_empty(user_ids: List[str]):
        is_empty_group = not bool(user_ids)
        if is_empty_group:
            raise EmptyGroupException

    def _get_user_ids_in_group(self, group_id: int) -> List[str]:
        user_ids = self.storage.get_user_ids_for_given_group_id(
            group_id=group_id)
        return user_ids

    def _send_notification_and_get_user_ids_with_no_cm_token(
            self, user_ids: List[str],
            notification_message_dto: NotificationMessageDTO,
            cloud_message_service: CloudMessagingInterface,
            log_notification: bool, device_types: List[str]
    ) -> SendNotificationResponseDTO:

        send_notification_to_user_list_interactor = \
            SendNotificationToUsersInteractor(storage=self.storage)
        user_ids_without_cm_token_dto = \
            send_notification_to_user_list_interactor. \
            send_notification_to_users(
                user_ids=user_ids,
                cloud_message_provider=cloud_message_service,
                notification_message_dto=notification_message_dto,
                log_notification=log_notification,
                device_types=device_types)

        return user_ids_without_cm_token_dto



from typing import List

from ib_notifications.exceptions.exceptions import InvalidGroupException, \
    EmptyUsersListException
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface


class AddUsersToGroupInteractor:
    def __init__(self, storage: StorageInterface):
        self.storage = storage

    def add_users_into_group_response(
            self, group_id: int, user_ids: List[str],
            presenter: PresenterInterface):
        try:
            self.add_users_into_group(group_id=group_id, user_ids=user_ids)
        except InvalidGroupException:
            presenter.raise_invalid_group_id_exception()
        except EmptyUsersListException:
            presenter.raise_empty_user_ids_exception()

    def add_users_into_group(self, group_id: int, user_ids: List[str]):
        is_invalid_group_id = self.storage.is_invalid_group_id(
            group_id=group_id)

        if is_invalid_group_id:
            raise InvalidGroupException
        if self._is_empty_list(user_ids):
            raise EmptyUsersListException

        distinct_user_ids = self._get_unique_user_ids(user_ids=user_ids)
        group_user_ids = self.storage.get_user_ids_in_group(group_id=group_id)
        valid_user_ids = self._remove_items_from_list(
            list_=distinct_user_ids,
            items_to_be_removed=group_user_ids)
        is_not_empty_list = not self._is_empty_list(user_ids=valid_user_ids)

        if is_not_empty_list:
            self.storage.add_users_to_group(group_id=group_id,
                                            user_ids=valid_user_ids)

    @staticmethod
    def _is_empty_list(user_ids: List[str]) -> bool:
        return len(user_ids) == 0

    @staticmethod
    def _get_unique_user_ids(user_ids: List[str]) -> List[str]:
        return list(dict.fromkeys(user_ids))

    @staticmethod
    def _remove_items_from_list(list_: List[str],
                                items_to_be_removed: List[str]) -> List[str]:
        valid_list = [
            item for item in list_ if item not in items_to_be_removed
        ]
        return valid_list

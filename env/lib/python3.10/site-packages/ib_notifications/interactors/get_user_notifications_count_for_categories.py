from typing import List

from ib_notifications.constants.enums import NotificationCategory
from ib_notifications.interactors.dtos import NotificationCategoryCountDTO
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface


class GetUserNotificationsCountForCategoriesInteractor:

    def __init__(self, storage: StorageInterface):
        self.storage = storage


    def get_user_notifications_count_for_categories(
            self, user_id: str, categories: List[NotificationCategory]
    ) -> List[NotificationCategoryCountDTO]:

        notification_category_count_dtos = []

        category_func_map = {
            NotificationCategory.UNREAD.value: self._get_unread_notifications_count,
            NotificationCategory.ALL.value: self._get_user_all_notifications_count
        }

        for category in categories:
            eval_func = category_func_map[category]
            count = eval_func(user_id)
            notification_category_count_dtos.append(
                NotificationCategoryCountDTO(
                    category=category,
                    count=count
                )
            )
        return notification_category_count_dtos

    def _get_unread_notifications_count(self, user_id: str) -> int:

        return self.storage.get_unread_notifications_count(user_id=user_id)

    def _get_user_all_notifications_count(self, user_id: str) -> int:

        return self.storage.get_all_notifications_count(user_id=user_id)

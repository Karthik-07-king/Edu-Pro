from ib_notifications.exceptions.custom_exceptions import InvalidNotificationId, \
    InvalidUserNotificationId
from ib_notifications.interactors.presenters.delete_user_notification_presenter_interface import \
    DeleteUserNotificationPresenterInterface
from ib_notifications.interactors.storages.storage_interface import StorageInterface


class DeleteUserNotification:

    def __init__(self, storage: StorageInterface):
        self.storage = storage

    def delete_user_notification_wrapper(
        self, user_id: str, notification_id: str,
        presenter: DeleteUserNotificationPresenterInterface
    ):
        try:
            self.delete_user_notification(user_id, notification_id)
        except InvalidNotificationId as err:
            return presenter.raise_invalid_notification_id(err)
        except InvalidUserNotificationId as err:
            return presenter.raise_invalid_user_notification_id(err)
        return presenter.get_success_response()

    def delete_user_notification(self, user_id: str, notification_id: str):
        self._validate_notification_id(notification_id)
        user_notification_id = self.storage.get_user_notification_id(
            user_id=user_id, notification_id=notification_id
        )
        self.storage.mark_user_notifications_as_deleted([user_notification_id])

    def _validate_notification_id(self, notification_id: str):
        is_valid_notification_id = self.storage.check_is_valid_notification_id(
            notification_id=notification_id
        )
        is_invalid_notification_id = not is_valid_notification_id
        if is_invalid_notification_id:
            raise InvalidNotificationId(notification_id)

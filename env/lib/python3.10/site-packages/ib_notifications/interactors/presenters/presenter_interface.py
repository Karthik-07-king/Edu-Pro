from abc import abstractmethod, ABCMeta
from typing import List

from ib_notifications.dtos.notification_dto import NotificationDTO
from ib_notifications.dtos.user_ids_with_no_cm_token import \
    SendNotificationResponseDTO


class PresenterInterface(metaclass=ABCMeta):

    @abstractmethod
    def get_unread_notifications_count_response(
            self, unread_notifications_count: int):
        pass

    @abstractmethod
    def get_user_notifications_response(self, notification_dtos: List[
        NotificationDTO], total_count: int):
        pass

    @abstractmethod
    def raise_exception_for_empty_user_ids(self):
        pass

    @abstractmethod
    def get_send_notification_to_user_response(
            self, user_ids_without_cm_token_dto: SendNotificationResponseDTO) -> \
            dict:
        pass

    @abstractmethod
    def get_send_notification_to_group_response(
            self, user_ids_without_cm_token_dto: SendNotificationResponseDTO
    ) -> dict:
        pass

    @abstractmethod
    def raise_empty_group_exception(self):
        pass

    @abstractmethod
    def raise_invalid_device_type(self):
        pass

    @abstractmethod
    def raise_invalid_group_id(self):
        pass

    @abstractmethod
    def create_group_response(self, group_id: int):
        pass

    @abstractmethod
    def raise_invalid_group_id_exception(self):
        pass

    @abstractmethod
    def raise_empty_user_ids_exception(self):
        pass

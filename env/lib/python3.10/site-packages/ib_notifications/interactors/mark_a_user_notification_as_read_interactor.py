from ib_notifications.exceptions.custom_exceptions import \
    InvalidUserNotificationId, GivenNotificationHasAlreadyReadByUser, \
    InvalidNotificationId
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface
from ib_notifications.interactors.presenter_interfaces.\
    mark_a_user_notification_as_read_presenter_interface import \
    MarkAUserNotificationAsReadPresenterInterface


class MarkAUserNotificationAsReadInteractor:

    def __init__(self, storage: StorageInterface):
        self.storage = storage

    def mark_a_user_notification_as_read_wrapper(
            self, user_id: str, notification_id: str,
            presenter: MarkAUserNotificationAsReadPresenterInterface):
        try:
            self.mark_a_user_notification_as_read(
                user_id=user_id, notification_id=notification_id)
        except InvalidNotificationId as err:
            return presenter.raise_invalid_notification_exception(err)
        except InvalidUserNotificationId as err:
            return presenter.raise_invalid_user_notification_exception(err)
        except GivenNotificationHasAlreadyReadByUser as err:
            return presenter.\
                raise_given_notification_has_already_read_by_user_exception(
                    err)

    def mark_a_user_notification_as_read(
            self, user_id: str, notification_id: str):

        self._validate_notification_id(notification_id=notification_id)
        self._validate_is_notification_belongs_to_user(
            user_id=user_id, notification_id=notification_id)
        self._validate_is_notification_is_unread(
            user_id=user_id, notification_id=notification_id)

        notification_id_list = [notification_id]
        from ib_notifications.interactors.\
            user_notifications_mark_as_read_interactor import \
            MarkUserNotificationsAsReadInteractor

        mark_user_notifications_as_read_interactor = \
            MarkUserNotificationsAsReadInteractor(storage=self.storage)

        mark_user_notifications_as_read_interactor.\
            mark_user_notifications_as_read(
                user_id=user_id, notification_ids=notification_id_list)

    def _validate_notification_id(self, notification_id: str):
        is_valid_notification_id = self.storage.check_is_valid_notification_id(
            notification_id=notification_id
        )
        is_invalid_notification_id = not is_valid_notification_id
        if is_invalid_notification_id:
            raise InvalidNotificationId(notification_id)

    def _validate_is_notification_belongs_to_user(
            self, user_id: str, notification_id: str):

        notification_id_list = [notification_id]
        user_valid_notification_ids = \
            self.storage.get_valid_user_notification_ids(
                user_id=user_id, notification_ids=notification_id_list
            )
        user_valid_notification_ids_as_strings = [
            str(user_valid_notification_id)
            for user_valid_notification_id in user_valid_notification_ids
        ]

        is_not_a_user_notification = \
            notification_id not in user_valid_notification_ids_as_strings

        if is_not_a_user_notification:
            raise InvalidUserNotificationId(notification_id)

    def _validate_is_notification_is_unread(
            self, notification_id: str, user_id: str):
        is_user_notification_unread = \
            self.storage.validate_user_notification_is_unread(
                user_id=user_id, notification_id=notification_id)
        is_user_notification_read = not is_user_notification_unread

        if is_user_notification_read:
            raise GivenNotificationHasAlreadyReadByUser(notification_id)

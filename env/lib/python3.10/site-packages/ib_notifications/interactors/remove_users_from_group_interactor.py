from typing import List

from ib_notifications.exceptions.exceptions import InvalidGroupException, \
    EmptyUsersListException
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface


class RemoveUsersFromGroupInteractor:
    def __init__(self, storage: StorageInterface):
        self.storage = storage

    def remove_users_from_group_response(
            self, group_id: int, user_ids: List[str],
            presenter: PresenterInterface):
        try:
            self.remove_users_from_group(group_id=group_id,
                                         user_ids=user_ids)
        except InvalidGroupException:
            presenter.raise_invalid_group_id_exception()
        except EmptyUsersListException:
            presenter.raise_empty_user_ids_exception()

    def remove_users_from_group(self, group_id: int, user_ids: List[str]):
        is_invalid_group_id = self.storage.is_invalid_group_id(
            group_id=group_id)

        if is_invalid_group_id:
            raise InvalidGroupException
        if self._is_empty_list(user_ids):
            raise EmptyUsersListException

        self.storage.remove_users_from_group(group_id=group_id,
                                             user_ids=user_ids)

    @staticmethod
    def _is_empty_list(user_ids: List[str]) -> bool:
        return len(user_ids) == 0

from ib_notifications.exceptions.custom_exceptions import \
    InvalidUserNotificationId, InvalidNotificationId
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface



class MarkUserNotificationAsUnreadInteractor:

    def __init__(self, storage: StorageInterface):
        self.storage = storage

    def mark_user_notification_as_unread(
            self, user_id: str, notification_id: str):

        self._validate_notification_id(notification_id=notification_id)
        self._validate_is_notification_belongs_to_user(
            user_id=user_id, notification_id=notification_id)

        self.storage.mark_user_notifications_as_unread(
            user_id=user_id, notification_ids=[notification_id]
        )

    def _validate_notification_id(self, notification_id: str):
        is_valid_notification_id = self.storage.check_is_valid_notification_id(
            notification_id=notification_id
        )
        is_invalid_notification_id = not is_valid_notification_id
        if is_invalid_notification_id:
            raise InvalidNotificationId(notification_id)

    def _validate_is_notification_belongs_to_user(
            self, user_id: str, notification_id: str):

        notification_id_list = [notification_id]
        user_valid_notification_ids = \
            self.storage.get_valid_user_notification_ids(
                user_id=user_id, notification_ids=notification_id_list
            )
        user_valid_notification_ids_as_strings = [
            str(user_valid_notification_id)
            for user_valid_notification_id in user_valid_notification_ids
        ]

        is_not_a_user_notification = \
            notification_id not in user_valid_notification_ids_as_strings

        if is_not_a_user_notification:
            raise InvalidUserNotificationId(notification_id)

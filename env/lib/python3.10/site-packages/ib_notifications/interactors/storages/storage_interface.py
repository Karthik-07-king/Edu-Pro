import abc
from typing import List, Tuple, Dict, Optional

from ib_notifications.dtos.cm_token_with_user_id_dto import \
    UserIdWithCMToken
from ib_notifications.dtos.notification_dto import NotificationDTO
from ib_notifications.dtos.notification_message_dto import \
    NotificationMessageDTO


class StorageInterface(abc.ABC):

    @abc.abstractmethod
    def get_user_cm_tokens_for_specific_device_types(
            self, user_ids: List[str],device_types: List) ->\
            List[UserIdWithCMToken]:
        pass

    @abc.abstractmethod
    def log_notification(
        self,
        user_ids: List[str],
        notification_message_dto: NotificationMessageDTO,
        notification_service_response: Dict
    ):
        pass

    @abc.abstractmethod
    def get_user_cm_tokens_for_all_device_types(
            self, user_ids: List[str]) -> List[UserIdWithCMToken]:
        pass

    @abc.abstractmethod
    def get_user_ids_for_given_group_id(self, group_id: int) -> List[str]:
        pass

    @abc.abstractmethod
    def get_unread_notifications_count(self, user_id: str) -> int:
        pass

    @abc.abstractmethod
    def get_all_notifications_count(self, user_id: str) -> int:
        pass

    @abc.abstractmethod
    def mark_user_notifications_as_read(
            self, user_id: str, notification_ids: List[str]):
        pass

    @abc.abstractmethod
    def mark_user_notifications_as_unread(
            self, user_id: str, notification_ids: List[str]):
        pass

    @abc.abstractmethod
    def get_user_notifications(self, user_id: str, offset: int, limit: int) -> \
            Tuple[List[NotificationDTO], int]:
        pass

    @abc.abstractmethod
    def create_cloud_message_token(self, user_id: str, device_id: str,
                                   device_type: str, token: str):
        pass

    @abc.abstractmethod
    def delete_token_for_user_device(self, user_id: str, device_id: str,
                                     device_type: str):
        pass

    @abc.abstractmethod
    def delete_tokens_for_device(self, device_id: str, device_type: str):
        pass

    @abc.abstractmethod
    def create_group(self, name: str) -> int:
        pass

    @abc.abstractmethod
    def is_invalid_group_id(self, group_id: int) -> bool:
        pass

    @abc.abstractmethod
    def remove_users_from_group(self, group_id: int, user_ids: List[str]):
        pass

    @abc.abstractmethod
    def add_users_to_group(self, group_id: int, user_ids: List[str]):
        pass

    @abc.abstractmethod
    def get_user_ids_in_group(self, group_id: int) -> List[str]:
        pass

    @abc.abstractmethod
    def check_is_valid_device_id(self, device_id: str) -> bool:
        pass

    @abc.abstractmethod
    def get_valid_user_notification_ids(
            self, notification_ids: List[str], user_id: str) -> List[str]:
        pass

    @abc.abstractmethod
    def get_user_unread_notification_ids(self, user_id: str) -> List[str]:
        pass

    @abc.abstractmethod
    def check_is_valid_notification_id(self, notification_id: str) -> bool:
        pass

    @abc.abstractmethod
    def get_valid_notification_ids(
            self, notification_ids: List[str]) -> List[str]:
        pass

    @abc.abstractmethod
    def validate_user_notification_is_unread(
            self, user_id: str, notification_id: str) -> bool:
        pass

    @abc.abstractmethod
    def delete_cloud_message_tokens(self, user_id):
        pass

    @abc.abstractmethod
    def get_all_user_notifications(
        self, user_id: str, offset: int, limit: int
    ) -> Tuple[List[int], int]:
        pass

    @abc.abstractmethod
    def get_user_unread_notifications(
        self, user_id: str, offset: int, limit: int
    ) -> Tuple[List[int], int]:
        pass

    @abc.abstractmethod
    def get_user_notifications_details_bulk(
        self, user_notifications_ids: List[int]
    ) -> List[NotificationDTO]:
        pass

    @abc.abstractmethod
    def get_user_notification_id(self, user_id: str, notification_id: str) -> str:
        pass

    @abc.abstractmethod
    def mark_user_notifications_as_deleted(self, user_notification_ids: List[str]):
        pass

    @abc.abstractmethod
    def get_fcm_credentials_json(self) -> Optional[Dict[str, str]]:
        pass

    @abc.abstractmethod
    def delete_user_device_tokens(self, user_device_token_ids):
        pass

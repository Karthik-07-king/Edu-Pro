from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface
from ib_notifications.interactors.presenter_interfaces.\
    mark_all_user_notifications_as_read_presenter_interface import \
    MarkAllUserNotificationsAsReadPresenterInterface
from ib_notifications.exceptions.custom_exceptions import \
    UserDoesNotHaveUnreadNotifications


class MarkAllUserNotificationsAsReadInteractor:

    def __init__(self, storage: StorageInterface):
        self.storage = storage

    def mark_all_user_notifications_as_read_wrapper(
            self, user_id: str,
            presenter: MarkAllUserNotificationsAsReadPresenterInterface):
        try:
            self.mark_all_user_notifications_as_read(user_id=user_id)
        except UserDoesNotHaveUnreadNotifications:
            return presenter.raise_user_does_not_have_unread_notifications()

    def mark_all_user_notifications_as_read(self, user_id: str):

        user_unread_notification_ids = \
            self.storage.get_user_unread_notification_ids(user_id=user_id)
        is_user_has_no_unread_notifications = not user_unread_notification_ids

        if is_user_has_no_unread_notifications:
            raise UserDoesNotHaveUnreadNotifications()

        from ib_notifications.interactors.\
            user_notifications_mark_as_read_interactor import \
            MarkUserNotificationsAsReadInteractor

        mark_user_notifications_as_read_interactor = \
            MarkUserNotificationsAsReadInteractor(storage=self.storage)

        user_unread_notification_ids_strings = [
            str(user_unread_notification_id)
            for user_unread_notification_id in user_unread_notification_ids
        ]

        mark_user_notifications_as_read_interactor.\
            mark_user_notifications_as_read(
                user_id=user_id,
                notification_ids=user_unread_notification_ids_strings)

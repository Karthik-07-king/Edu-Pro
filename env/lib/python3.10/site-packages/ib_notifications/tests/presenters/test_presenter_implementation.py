import pytest
from django_swagger_utils.drf_server.exceptions import ExpectationFailed, \
    NotFound, BadRequest

from ib_notifications.constants.exception_messages import INVALID_GROUP_ID, \
    EMPTY_USER_LIST, EMPTY_GROUP, INVALID_DEVICE_TYPE
from datetime import datetime

from ib_notifications.dtos.notification_dto import NotificationDTO
from ib_notifications.dtos.user_ids_with_no_cm_token import \
    SendNotificationResponseDTO
from ib_notifications.presenters.presenter_implementation import \
    PresenterImplementation


class TestPresenterImplementation:
    def test_get_unread_notifications_count_response(self):
        unread_notifications_count = 5
        expected_response = {
            "unread_notifications_count": unread_notifications_count
        }

        presenter = PresenterImplementation()

        response = presenter.get_unread_notifications_count_response(
            unread_notifications_count=unread_notifications_count)

        assert expected_response == response

    def test_get_user_notifications_response(self):
        total_count = 5
        expected_response = {
            "notifications": [
                {
                    "title": "System Update",
                    "message": "update is 4 mb",
                    "extra_data": "you can get better experience",
                    "notification_type": "update",
                    "notification_id": 'n_id',
                    "read_at": datetime(2020, 4, 17),
                    "created_at": datetime(2020, 5, 17)
                }
            ],
            "total_count": total_count
        }
        notification_dtos = [
            NotificationDTO(
                title="System Update",
                message="update is 4 mb",
                extra_data="you can get better experience",
                notification_type="update",
                notification_id="n_id",
                read_at=datetime(2020, 4, 17),
                created_at=datetime(2020, 5, 17)
            )
        ]

        presenter = PresenterImplementation()

        response = presenter.get_user_notifications_response(
            notification_dtos=notification_dtos, total_count=total_count)

        assert expected_response == response

    def test_user_ids_returns_dict(self):
        # Arrange
        user_ids_without_cm_token_dto = \
            SendNotificationResponseDTO(user_ids_without_cm_token=['1', '2'])
        expected_result = {"user_ids_without_cm_tokens": ['1', '2']}

        json_presenter = PresenterImplementation()
        # Act
        actual_result = json_presenter.get_send_notification_to_user_response(
            user_ids_without_cm_token_dto=user_ids_without_cm_token_dto)

        # Assert
        assert expected_result == actual_result

    def test_user_ids_of_group_returns_dict(self):
        # Arrange
        user_ids_without_cm_token_dto = \
            SendNotificationResponseDTO(user_ids_without_cm_token=['1', '2', '3'])
        expected_result = {"user_ids_without_cm_tokens": ['1', '2','3']}

        json_presenter = PresenterImplementation()
        # Act
        actual_result = json_presenter.get_send_notification_to_group_response(
            user_ids_without_cm_token_dto=user_ids_without_cm_token_dto)

        # Assert
        assert expected_result == actual_result

    def test_raise_exception_for_invalid_group_id(self):
        # Arrange
        json_presenter = PresenterImplementation()

        # Act
        # Assert
        with pytest.raises(NotFound) as ex:
            json_presenter.raise_invalid_group_id()
        assert ex.value.res_status == INVALID_GROUP_ID[1]
        assert ex.value.message == INVALID_GROUP_ID[0]

    def test_raise_exception_for_invalid_device_type(self):
        # Arrange
        json_presenter = PresenterImplementation()

        # Act
        # Assert
        with pytest.raises(BadRequest) as ex:
            json_presenter.raise_invalid_device_type()
        assert ex.value.res_status == INVALID_DEVICE_TYPE[1]
        assert ex.value.message == INVALID_DEVICE_TYPE[0]

    def test_raise_exception_for_empty_group(self):
        # Arrange
        json_presenter = PresenterImplementation()

        # Act
        # Assert
        with pytest.raises(ExpectationFailed) as ex:
            json_presenter.raise_empty_group_exception()
        assert ex.value.res_status == EMPTY_GROUP[1]
        assert ex.value.message == EMPTY_GROUP[0]

    def test_raise_exception_for_empty_user_list(self):
        # Arrange
        json_presenter = PresenterImplementation()

        # Act
        # Assert
        with pytest.raises(ExpectationFailed) as ex:
            json_presenter.raise_exception_for_empty_user_ids()
        assert ex.value.res_status == EMPTY_USER_LIST[1]
        assert ex.value.message == EMPTY_USER_LIST[0]

    def test_create_group_response(self):
        group_id = 1
        actual_result = {
            "group_id": group_id
        }
        presenter = PresenterImplementation()

        expected_result = presenter.create_group_response(group_id=group_id)

        assert actual_result["group_id"] == expected_result["group_id"]

    def test_raise_invalid_group_id_exception(self):
        exception_message = INVALID_GROUP_ID[0]
        exception_res_status = INVALID_GROUP_ID[1]
        presenter = PresenterImplementation()

        with pytest.raises(NotFound) as exe:
            presenter.raise_invalid_group_id_exception()

        assert exception_message == exe.value.message
        assert exception_res_status == exe.value.res_status

    def test_raise_empty_user_ids_exception(self):
        exception_message = EMPTY_USER_LIST[0]
        exception_res_status = EMPTY_USER_LIST[1]
        presenter = PresenterImplementation()

        with pytest.raises(ExpectationFailed) as exe:
            presenter.raise_empty_user_ids_exception()

        assert exception_message == exe.value.message
        assert exception_res_status == exe.value.res_status

import pytest


class TestMarkAUserNotificationAsReadPresenterImplementation:

    @pytest.fixture
    def presenter(self):
        from ib_notifications.presenters. \
            mark_a_user_notification_as_read_presenter_implementation import \
            MarkAUserNotificationAsReadPresenterImplementation
        return MarkAUserNotificationAsReadPresenterImplementation()

    def test_raise_invalid_notification_exception(self, snapshot, presenter):
        # Arrange
        notification_id = "notification_1"
        from ib_notifications.exceptions.custom_exceptions import \
            InvalidNotificationId
        err = InvalidNotificationId(notification_id)

        # Act
        response_object = presenter.raise_invalid_notification_exception(err)

        # Assert
        import json
        response = json.loads(response_object.content)
        snapshot.assert_match(response['http_status_code'], 'http_status_code')
        snapshot.assert_match(response['res_status'], 'res_status')
        snapshot.assert_match(response['response'], 'response')

    def test_raise_invalid_user_notification_exception(
            self, snapshot, presenter):
        # Arrange
        notification_id = "notification_1"
        from ib_notifications.exceptions.custom_exceptions import \
            InvalidUserNotificationId
        err = InvalidUserNotificationId(notification_id)

        # Act
        response_object = \
            presenter.raise_invalid_user_notification_exception(err)

        # Assert
        import json
        response = json.loads(response_object.content)
        snapshot.assert_match(response['http_status_code'], 'http_status_code')
        snapshot.assert_match(response['res_status'], 'res_status')
        snapshot.assert_match(response['response'], 'response')

    def test_raise_given_notification_has_already_read_by_user_exception(
            self, snapshot, presenter):
        # Arrange
        notification_id = "notification_1"
        from ib_notifications.exceptions.custom_exceptions import \
            GivenNotificationHasAlreadyReadByUser
        err = GivenNotificationHasAlreadyReadByUser(notification_id)

        # Act
        response_object = presenter.\
            raise_given_notification_has_already_read_by_user_exception(err)

        # Assert
        import json
        response = json.loads(response_object.content)
        snapshot.assert_match(response['http_status_code'], 'http_status_code')
        snapshot.assert_match(response['res_status'], 'res_status')
        snapshot.assert_match(response['response'], 'response')

import pytest


def seed_uuid_generation(mocker, count=100):
    import uuid

    from faker import Faker

    Faker.seed(909)
    fake = Faker()
    rand_uuids = [uuid.UUID(fake.uuid4()) for _ in range(count)]
    uuid_mock = mocker.patch("uuid.uuid4")
    uuid_mock.side_effect = rand_uuids


@pytest.fixture(autouse=True, scope="function")
def reset_sequence():
    from ib_notifications.tests.factories import interactor_dtos
    interactor_dtos.UserIdWithCMTokenFactory.reset_sequence()
    interactor_dtos.AndroidDeviceDTOFactory.reset_sequence()
    interactor_dtos.NotificationMessageDTOFactory.reset_sequence()
    interactor_dtos.NotificationCategoryCountDTOFactory.reset_sequence()


def get_mock(mocker, func_to_mock):
    mock = mocker.patch(
        "{}.{}".format(func_to_mock.__module__, func_to_mock.__qualname__)
    )
    return mock

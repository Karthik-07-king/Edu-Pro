import pytest
import mock

from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface
from ib_notifications.interactors.user_notifications_mark_as_read_interactor \
    import MarkUserNotificationsAsReadInteractor


class TestMarkUserNotificationsAsReadInteractor:
    @pytest.fixture
    def storage_mock(self):
        from ib_notifications.interactors.storages.storage_interface import \
            StorageInterface

        return mock.create_autospec(StorageInterface)

    def test_with_invalid_notification_ids_raises_exception(
            self, storage_mock):
        # Arrange
        user_id = "1"
        notification_ids = ["notification_1"]

        interactor = \
            MarkUserNotificationsAsReadInteractor(storage=storage_mock)
        storage_mock.get_valid_notification_ids.return_value = []

        from ib_notifications.exceptions.custom_exceptions import \
            InvalidNotificationIds

        # Assert
        with pytest.raises(InvalidNotificationIds) as err:
            interactor.mark_user_notifications_as_read(
                user_id=user_id, notification_ids=notification_ids)
        storage_mock.get_valid_notification_ids.assert_called_once_with(
            notification_ids=notification_ids
        )
        assert err.value.args[0] == notification_ids

    def test_with_notification_ids_not_belongs_to_user_raises_exception(
            self, storage_mock):
        # Arrange
        user_id = "1"
        notification_ids = ["notification_1"]

        interactor = \
            MarkUserNotificationsAsReadInteractor(storage=storage_mock)

        storage_mock.get_valid_notification_ids.return_value = \
            notification_ids
        storage_mock.get_valid_user_notification_ids.return_value = []

        from ib_notifications.exceptions.custom_exceptions import \
            InvalidUserNotificationIds

        # Assert
        with pytest.raises(InvalidUserNotificationIds) as err:
            interactor.mark_user_notifications_as_read(
                user_id=user_id, notification_ids=notification_ids)

        storage_mock.get_valid_notification_ids.assert_called_once_with(
            notification_ids=notification_ids
        )
        storage_mock.get_valid_user_notification_ids.assert_called_once_with(
            user_id=user_id, notification_ids=notification_ids
        )
        assert err.value.args[0] == notification_ids

    def test_with_valid_details_will_make_notifications_as_read(
            self, storage_mock):
        # Arrange
        user_id = "1"
        notification_ids = ["notification_1"]

        storage_mock.get_valid_user_notification_ids.return_value = \
            notification_ids
        storage_mock.get_valid_notification_ids.return_value = \
            notification_ids

        interactor = \
            MarkUserNotificationsAsReadInteractor(storage=storage_mock)

        # Act
        interactor.mark_user_notifications_as_read(
            user_id=user_id, notification_ids=notification_ids)

        # Assert
        storage_mock.get_valid_notification_ids.assert_called_once_with(
            notification_ids=notification_ids
        )
        storage_mock.get_valid_user_notification_ids.assert_called_once_with(
            user_id=user_id, notification_ids=notification_ids
        )
        storage_mock.mark_user_notifications_as_read.assert_called_once_with(
            user_id=user_id, notification_ids=notification_ids)

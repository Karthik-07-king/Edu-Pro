import pytest
import mock

from ib_notifications.interactors.\
    mark_all_user_notifications_as_read_interactor \
    import MarkAllUserNotificationsAsReadInteractor


class TestMarkUserNotificationsAsReadInteractor:

    @pytest.fixture
    def storage_mock(self):
        from ib_notifications.interactors.storages.storage_interface import \
            StorageInterface

        return mock.create_autospec(StorageInterface)

    @pytest.fixture
    def presenter_mock(self):
        from ib_notifications.interactors.presenter_interfaces. \
            mark_all_user_notifications_as_read_presenter_interface import \
            MarkAllUserNotificationsAsReadPresenterInterface

        return mock.create_autospec(
            MarkAllUserNotificationsAsReadPresenterInterface)

    def test_when_user_has_no_unread_notifications_raises_exception(
            self, storage_mock, presenter_mock):
        # Arrange
        user_id = "1"
        notification_ids = []

        storage_mock.get_user_unread_notification_ids.return_value = \
            notification_ids
        interactor = \
            MarkAllUserNotificationsAsReadInteractor(storage=storage_mock)

        presenter_mock_response = mock.Mock()
        presenter_mock.raise_user_does_not_have_unread_notifications.\
            return_value = presenter_mock_response
        # Act
        response = interactor.mark_all_user_notifications_as_read_wrapper(
            user_id=user_id, presenter=presenter_mock)

        # Assert
        assert response == presenter_mock_response
        storage_mock.get_user_unread_notification_ids.assert_called_once_with(
            user_id=user_id)
        presenter_mock.raise_user_does_not_have_unread_notifications.\
            assert_called_once()

    def test_when_user_has_unread_notifications_then_mark_them_as_read(
            self, storage_mock, presenter_mock, mocker):
        # Arrange
        user_id = "1"
        notification_ids = ["notification_1"]

        from ib_notifications.tests.common_fixtures.interactors import \
            user_notifications_mark_as_read_interactor_mock
        user_notifications_mark_as_read_interactor_mock_method = \
            user_notifications_mark_as_read_interactor_mock(mocker)

        storage_mock.get_user_unread_notification_ids.return_value = \
            notification_ids
        interactor = \
            MarkAllUserNotificationsAsReadInteractor(storage=storage_mock)

        # Act
        interactor.mark_all_user_notifications_as_read_wrapper(
            user_id=user_id, presenter=presenter_mock)

        # Assert
        storage_mock.get_user_unread_notification_ids.assert_called_once_with(
            user_id=user_id)
        user_notifications_mark_as_read_interactor_mock_method.\
            assert_called_once_with(
                user_id=user_id, notification_ids=notification_ids)

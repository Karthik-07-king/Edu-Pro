import pytest
from django_swagger_utils.drf_server.exceptions import NotFound, \
    ExpectationFailed
from mock import create_autospec

from ib_notifications.constants.enums import DeviceType
from ib_notifications.dtos.cm_token_with_user_id_dto import \
    UserIdWithCMToken
from ib_notifications.dtos.notification_message_dto import \
    NotificationMessageDTO
from ib_notifications.dtos.user_ids_with_no_cm_token import \
    SendNotificationResponseDTO
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface
from ib_notifications.interactors.send_notification_to_group_interactor import \
    SendNotificationToGroupInteractor
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface
from ib_notifications.services.cloud_messaging_interface import \
    CloudMessagingInterface


class TestSendNotificationToGroupInteractor:

    def test_group_id_raise_exception(self):
        # Arrange
        invalid_group_id = 12
        is_valid_group_id = True
        notification_message_dto = NotificationMessageDTO(
            title="title",
            message="sample message",
            extra_data="extra data",
            notification_type="normal"
        )
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]
        log_notification = False
        cloud_message_service_mock = \
            create_autospec(CloudMessagingInterface)

        storage_mock = create_autospec(StorageInterface)
        storage_mock.is_invalid_group_id.return_value = is_valid_group_id
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.raise_invalid_group_id.side_effect = \
            NotFound
        interactor = SendNotificationToGroupInteractor(storage=storage_mock)

        # Act
        # Assert
        with pytest.raises(NotFound):
            interactor.send_notification_to_group_response(
                group_id=invalid_group_id,
                cloud_message_service=cloud_message_service_mock,
                notification_message_dto=notification_message_dto,
                log_notification=log_notification, device_types=device_types,
                presenter=presenter_mock)

    def test_group_id_wont_raise_exception(self):
        # Arrange
        group_id = 12
        is_invalid_group_id = False
        user_ids = [1, 2]
        notification_message_dto = NotificationMessageDTO(
            title="title",
            message="sample message",
            extra_data="extra data",
            notification_type="normal"
        )
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]
        log_notification = False
        cloud_message_provider_mock = \
            create_autospec(CloudMessagingInterface)

        storage_mock = create_autospec(StorageInterface)
        storage_mock.is_invalid_group_id.return_value = is_invalid_group_id
        storage_mock.get_user_ids_for_given_group_id.return_value = user_ids
        presenter_mock = create_autospec(PresenterInterface)

        interactor = SendNotificationToGroupInteractor(storage=storage_mock)

        # Act
        interactor.send_notification_to_group_response(
            group_id=group_id, presenter=presenter_mock,
            cloud_message_service=cloud_message_provider_mock,
            notification_message_dto=notification_message_dto,
            log_notification=log_notification, device_types=device_types)

        # Assert
        storage_mock.get_user_ids_for_given_group_id.assert_called_once_with(
            group_id=group_id)
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)

    def test_group_id_with_empty_members_raise_exception(self):
        # Arrange
        group_id = 3
        is_invalid_group_id = False
        user_ids = []
        notification_message_dto = NotificationMessageDTO(
            title="title",
            message="sample message",
            extra_data="extra data",
            notification_type="normal"
        )
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]
        log_notification = False

        cloud_message_provider_mock = \
            create_autospec(CloudMessagingInterface)

        storage_mock = create_autospec(StorageInterface)
        storage_mock.is_invalid_group_id.return_value = is_invalid_group_id
        storage_mock.get_user_ids_for_given_group_id.return_value = user_ids
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.raise_empty_group_exception.side_effect = ExpectationFailed
        interactor = SendNotificationToGroupInteractor(storage=storage_mock)

        # Act
        # Assert
        with pytest.raises(ExpectationFailed):
            interactor.send_notification_to_group_response(
                group_id=group_id,presenter=presenter_mock,
                cloud_message_service=cloud_message_provider_mock,
                notification_message_dto=notification_message_dto,
                log_notification=log_notification, device_types=device_types)
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)
        storage_mock.get_user_ids_for_given_group_id.assert_called_once_with(
            group_id=group_id)

    def test_group_id_returns_user_ids_with_no_cm_tokens(self):
        # Arrange
        group_id = 3
        is_invalid_group_id = False
        expected_result = {"users_who_dont_have_cm_tokens": [1, 2]}
        user_ids = ['1', '2']
        notification_message_dto = NotificationMessageDTO(
            title="title",
            message="sample message",
            extra_data="extra data",
            notification_type="normal"
        )
        user_ids_without_cm_token_dto = SendNotificationResponseDTO(
            user_ids_without_cm_token=user_ids
        )
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]
        log_notification = False

        cloud_message_provider_mock = \
            create_autospec(CloudMessagingInterface)

        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_specific_device_types.return_value \
            = []
        storage_mock.is_invalid_group_id.return_value = is_invalid_group_id
        storage_mock.get_user_ids_for_given_group_id.return_value = \
            user_ids
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.get_send_notification_to_group_response.return_value = \
            expected_result
        interactor = SendNotificationToGroupInteractor(storage=storage_mock)

        # Act
        actual_result = interactor.send_notification_to_group_response(
            group_id=group_id,presenter=presenter_mock,
            cloud_message_service=cloud_message_provider_mock,
            notification_message_dto=notification_message_dto,
            log_notification=log_notification, device_types=device_types)

        # Assert
        assert expected_result == actual_result
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)
        storage_mock.get_user_ids_for_given_group_id.assert_called_once_with(
            group_id=group_id)
        presenter_mock.\
            get_send_notification_to_group_response.assert_called_once_with(
                user_ids_without_cm_token_dto=user_ids_without_cm_token_dto)

    def test_group_id_returns_empty_user_ids(self):
        group_id = 3
        is_invalid_group_id = False
        user_ids = ['1', '2', '3']
        expected_result = {"users_who_dont_have_cm_tokens": []}
        notification_message_dto = NotificationMessageDTO(
            title="title",
            message="sample message",
            extra_data="extra data",
            notification_type="normal"
        )
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]
        log_notification = False
        user_cm_token_dtos = [
            UserIdWithCMToken(user_id=user_ids[0], cm_token='token1', device_type=DeviceType.WEB.value),
            UserIdWithCMToken(user_id=user_ids[1], cm_token='token2', device_type=DeviceType.WEB.value),
            UserIdWithCMToken(user_id=user_ids[2], cm_token='token3', device_type=DeviceType.WEB.value),
        ]
        user_ids_without_cm_token_dto = SendNotificationResponseDTO(
            user_ids_without_cm_token=[]
        )
        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_specific_device_types.return_value \
            = user_cm_token_dtos
        storage_mock.is_invalid_group_id.return_value = is_invalid_group_id
        storage_mock.get_user_ids_for_given_group_id.return_value = \
            user_ids
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.get_send_notification_to_group_response.return_value =\
            expected_result
        cloud_message_provider_mock = \
            create_autospec(CloudMessagingInterface)

        interactor = SendNotificationToGroupInteractor(storage=storage_mock)

        # Act
        actual_result = interactor.send_notification_to_group_response(
            group_id=group_id,presenter=presenter_mock,
            cloud_message_service=cloud_message_provider_mock,
            notification_message_dto=notification_message_dto,
            log_notification=log_notification, device_types=device_types)

        # Assert
        assert expected_result == actual_result
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)
        storage_mock.get_user_ids_for_given_group_id.assert_called_once_with(
            group_id=group_id)
        presenter_mock.get_send_notification_to_group_response.\
            assert_called_once_with(
                user_ids_without_cm_token_dto=user_ids_without_cm_token_dto)



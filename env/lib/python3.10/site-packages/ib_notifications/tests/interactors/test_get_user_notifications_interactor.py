from datetime import datetime

from mock import create_autospec

from ib_notifications.dtos.notification_dto import NotificationDTO
from ib_notifications.interactors.get_user_notifications_interactor import \
    GetUserNotificationsInteractor
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface


class TestGetUserNotificationsInteractor:

    def test_with_user_id_returns_notifications(self):
        user_id = "1"
        limit = 5
        offset = 0
        total_count = 10
        expected_response = {
            "notifications": [
                {
                    "title": "System Update",
                    "message": "update is 4 mb",
                    "extra_data": "you can get better experience",
                    "notification_type": "update",
                    "notification_id": 0,
                    "read_at": datetime(2020, 5, 17),
                    "created_at": datetime(2020, 5, 17)
                }
            ],
            "total_count": total_count
        }
        notification_dtos = [
            NotificationDTO(
                title="System Update",
                message="update is 4 mb",
                extra_data="you can get better experience",
                notification_type="update",
                notification_id="n_id",
                read_at=datetime(2020, 5, 17),
                created_at=datetime(2020, 4, 17)
            )
        ]

        storage = create_autospec(StorageInterface)
        presenter = create_autospec(PresenterInterface)
        interactor = GetUserNotificationsInteractor(storage=storage)

        storage.get_user_notifications.return_value \
            = notification_dtos, total_count
        presenter.get_user_notifications_response.return_value \
            = expected_response
        response = interactor.get_user_notifications_response(
            user_id=user_id, offset=offset, limit=limit, presenter=presenter)

        storage.get_user_notifications.assert_called_once_with(
            user_id=user_id, offset=offset, limit=limit)
        presenter.get_user_notifications_response.assert_called_once_with(
            notification_dtos=notification_dtos, total_count=total_count)
        assert response == expected_response

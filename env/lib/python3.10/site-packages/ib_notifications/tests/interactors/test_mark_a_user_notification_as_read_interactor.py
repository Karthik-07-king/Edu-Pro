import pytest
import mock

from ib_notifications.interactors.mark_a_user_notification_as_read_interactor \
    import MarkAUserNotificationAsReadInteractor


class TestMarkAUserNotificationAsReadInteractor:

    @pytest.fixture
    def storage_mock(self):
        from ib_notifications.interactors.storages.storage_interface import \
            StorageInterface

        return mock.create_autospec(StorageInterface)

    @pytest.fixture
    def presenter_mock(self):
        from ib_notifications.interactors.presenter_interfaces. \
            mark_a_user_notification_as_read_presenter_interface import \
            MarkAUserNotificationAsReadPresenterInterface

        return mock.create_autospec(
            MarkAUserNotificationAsReadPresenterInterface)

    def test_with_a_invalid_notification_id_raises_exception(
            self, storage_mock, presenter_mock):
        # Arrange
        user_id = "1"
        invalid_notification_id = "notification_1"

        storage_mock.check_is_valid_notification_id.return_value = False
        interactor = \
            MarkAUserNotificationAsReadInteractor(storage=storage_mock)

        presenter_mock_response = mock.Mock()
        presenter_mock.raise_invalid_notification_exception.\
            return_value = presenter_mock_response

        # Act
        response = interactor.mark_a_user_notification_as_read_wrapper(
            user_id=user_id, notification_id=invalid_notification_id,
            presenter=presenter_mock)

        # Assert
        assert response == presenter_mock_response
        storage_mock.check_is_valid_notification_id.assert_called_once_with(
            notification_id=invalid_notification_id)
        call_args = \
            presenter_mock.raise_invalid_notification_exception.call_args
        assert call_args.args[0].args[0] == invalid_notification_id

    def test_with_a_invalid_user_notification_id_raises_exception(
            self, storage_mock, presenter_mock):
        # Arrange
        user_id = "1"
        invalid_user_notification_id = "notification_1"
        invalid_user_notification_ids_list = [invalid_user_notification_id]

        storage_mock.check_is_valid_notification_id.return_value = True
        storage_mock.get_valid_user_notification_ids.return_value = []

        interactor = \
            MarkAUserNotificationAsReadInteractor(storage=storage_mock)

        presenter_mock_response = mock.Mock()
        presenter_mock.raise_invalid_user_notification_exception.\
            return_value = presenter_mock_response

        # Act
        response = interactor.mark_a_user_notification_as_read_wrapper(
            user_id=user_id, notification_id=invalid_user_notification_id,
            presenter=presenter_mock)

        # Assert
        assert response == presenter_mock_response
        storage_mock.check_is_valid_notification_id.assert_called_once_with(
            notification_id=invalid_user_notification_id)
        storage_mock.get_valid_user_notification_ids.assert_called_once_with(
            notification_ids=invalid_user_notification_ids_list,
            user_id=user_id
        )
        call_args = \
            presenter_mock.raise_invalid_user_notification_exception.call_args
        assert call_args.args[0].args[0] == invalid_user_notification_id

    def test_with_a_notification_already_read_by_user_raises_exception(
            self, storage_mock, presenter_mock):
        # Arrange
        user_id = "1"
        notification_id = "notification_1"
        notification_ids_list = [notification_id]

        storage_mock.check_is_valid_notification_id.return_value = True
        storage_mock.get_valid_user_notification_ids.return_value = \
            notification_ids_list
        storage_mock.validate_user_notification_is_unread.return_value = False

        interactor = \
            MarkAUserNotificationAsReadInteractor(storage=storage_mock)

        presenter_mock_response = mock.Mock()
        presenter_mock.\
            raise_given_notification_has_already_read_by_user_exception.\
            return_value = presenter_mock_response

        # Act
        response = interactor.mark_a_user_notification_as_read_wrapper(
            user_id=user_id, notification_id=notification_id,
            presenter=presenter_mock)

        # Assert
        assert response == presenter_mock_response
        storage_mock.check_is_valid_notification_id.assert_called_once_with(
            notification_id=notification_id)
        storage_mock.get_valid_user_notification_ids.assert_called_once_with(
            notification_ids=notification_ids_list,
            user_id=user_id)
        storage_mock.validate_user_notification_is_unread.\
            assert_called_once_with(
                user_id=user_id, notification_id=notification_id)
        call_args = presenter_mock.\
            raise_given_notification_has_already_read_by_user_exception.\
            call_args
        assert call_args.args[0].args[0] == notification_id

    def test_with_valid_details_mark_notification_as_read(
            self, storage_mock, presenter_mock, mocker):
        # Arrange
        user_id = "1"
        notification_id = "notification_1"
        notification_ids_list = [notification_id]

        storage_mock.check_is_valid_notification_id.return_value = True
        storage_mock.get_valid_user_notification_ids.return_value = \
            notification_ids_list
        storage_mock.validate_user_notification_is_unread.return_value = True
        from ib_notifications.tests.common_fixtures.interactors import \
            user_notifications_mark_as_read_interactor_mock
        user_notifications_mark_as_read_interactor_mock_method = \
            user_notifications_mark_as_read_interactor_mock(mocker)

        interactor = \
            MarkAUserNotificationAsReadInteractor(storage=storage_mock)

        # Act
        interactor.mark_a_user_notification_as_read_wrapper(
            user_id=user_id, notification_id=notification_id,
            presenter=presenter_mock)

        # Assert
        storage_mock.check_is_valid_notification_id.assert_called_once_with(
            notification_id=notification_id)
        storage_mock.get_valid_user_notification_ids.assert_called_once_with(
            notification_ids=notification_ids_list,
            user_id=user_id)
        storage_mock.validate_user_notification_is_unread.\
            assert_called_once_with(
                user_id=user_id, notification_id=notification_id)
        user_notifications_mark_as_read_interactor_mock_method.\
            assert_called_once_with(
                user_id=user_id, notification_ids=notification_ids_list)

import json
from typing import Optional

import pytest

from ib_notifications.constants.enums import DeviceType
from ib_notifications.exceptions.exceptions import EmptyRegistrationIdsException
from ib_notifications.services.fcm_service_interface import FCMServiceInterface
from ib_notifications.tests.conftest import get_mock
from ib_notifications.tests.factories.interactor_dtos import UserIdWithCMTokenFactory, NotificationMessageDTOFactory, \
    AndroidDeviceDTOFactory


class DummyResponse:
    def __init__(self, status_code: int, text: Optional[str]):
        self.status_code = status_code
        self.text = text


class TestFCMServiceInterface:

    @pytest.fixture
    def interactor(self):
        return FCMServiceInterface()

    def test_with_empty_cm_tokes(self, interactor):
        # Arrange
        cm_token_dtos = []
        notification_msg_dto = NotificationMessageDTOFactory()

        # Act
        with pytest.raises(EmptyRegistrationIdsException) as err:
            interactor.send_notification(
                cm_token_dtos=cm_token_dtos,
                notification_message_dto=notification_msg_dto
            )

        # Assert

    def test_with_valid_data(self, interactor, mocker):
        # Arrange
        cm_token_dtos = [
            UserIdWithCMTokenFactory(
                cm_token="android_token",
                device_type=DeviceType.ANDROID.value
            ),
            UserIdWithCMTokenFactory(
                cm_token="web_token",
                device_type=DeviceType.WEB.value
            ),
            UserIdWithCMTokenFactory(
                cm_token="ios_token",
                device_type=DeviceType.IOS.value
            )
        ]
        notification_msg_dto = NotificationMessageDTOFactory()

        send_notification_mock = get_mock(
            mocker=mocker,
            func_to_mock=FCMServiceInterface.send_notification_request
        )
        send_notification_mock.side_effect = [
            DummyResponse(
                status_code=200,
                text=json.dumps({"success": 2, "failure": 0})
            ),
            DummyResponse(
                status_code=200,
                text=json.dumps({"success": 1, "failure": 0})
            )
        ]
        expected_send_notification_args = [
            {"request_body": {
                "data": {
                    "extra_data": "{'user_id': 'user_id'}",
                    "notification_type": "notification_type_0"
                },
                "notification": {
                    "body": "message_0",
                    "notification_id": "notification_0",
                    "title": "title_0"
                },
                "registration_ids": [
                    "web_token",
                    "ios_token"
                ]
            }}
            ,
            {"request_body": {
                "notification": {
                    "notification_id": "notification_0",
                    "title": "title_0",
                    "body": "message_0"
                },
                "data": {
                    "extra_data": "{'user_id': 'user_id'}",
                    "notification_type": "notification_type_0"
                },
                "android": {
                    "notification": {
                        "channel_id": "channel_0"
                    }
                },
                "registration_ids": [
                    "android_token",
                ]
            }}

        ]

        # Act
        interactor.send_notification(
            cm_token_dtos=cm_token_dtos,
            notification_message_dto=notification_msg_dto
        )

        # Assert
        assert send_notification_mock.call_count == 2
        for call_args, expected_args in zip(
                send_notification_mock.call_args_list,
                expected_send_notification_args
        ):
            assert call_args.kwargs == expected_args

    @pytest.mark.parametrize(
        "fcm_android_details",
        [
            None, AndroidDeviceDTOFactory(channel_id=None)
        ]
    )
    def test_with_valid_data_without_android_channel_id(self, interactor, mocker, fcm_android_details):
        # Arrange
        cm_token_dtos = [
            UserIdWithCMTokenFactory(
                cm_token="android_token",
                device_type=DeviceType.ANDROID.value
            ),
            UserIdWithCMTokenFactory(
                cm_token="web_token",
                device_type=DeviceType.WEB.value
            ),
            UserIdWithCMTokenFactory(
                cm_token="ios_token",
                device_type=DeviceType.IOS.value
            )
        ]
        notification_msg_dto = NotificationMessageDTOFactory(
            fcm_android_details=fcm_android_details
        )

        send_notification_mock = get_mock(
            mocker=mocker,
            func_to_mock=FCMServiceInterface.send_notification_request
        )
        send_notification_mock.side_effect = [
            DummyResponse(
                status_code=200,
                text=json.dumps({"success": 2, "failure": 0})
            ),
            DummyResponse(
                status_code=200,
                text=json.dumps({"success": 1, "failure": 0})
            )
        ]
        expected_send_notification_args = [
            {"request_body": {
                "data": {
                    "extra_data": "{'user_id': 'user_id'}",
                    "notification_type": "notification_type_0"
                },
                "notification": {
                    "body": "message_0",
                    "notification_id": "notification_0",
                    "title": "title_0"
                },
                "registration_ids": [
                    "web_token",
                    "ios_token"
                ]
            }}
            ,
            {"request_body": {
                "notification": {
                    "notification_id": "notification_0",
                    "title": "title_0",
                    "body": "message_0"
                },
                "data": {
                    "extra_data": "{'user_id': 'user_id'}",
                    "notification_type": "notification_type_0"
                },
                "registration_ids": [
                    "android_token"
                ]
            }}

        ]

        # Act
        interactor.send_notification(
            cm_token_dtos=cm_token_dtos,
            notification_message_dto=notification_msg_dto
        )

        # Assert
        assert send_notification_mock.call_count == 2
        for call_args, expected_args in zip(
                send_notification_mock.call_args_list,
                expected_send_notification_args
        ):
            assert call_args.kwargs == expected_args

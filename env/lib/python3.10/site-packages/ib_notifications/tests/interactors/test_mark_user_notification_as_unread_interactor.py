import mock
import pytest

from ib_notifications.exceptions.custom_exceptions import \
    InvalidNotificationId, InvalidUserNotificationId


class TestMarkUserNotificationAsUnreadInteractor:

    @pytest.fixture
    def storage_mock(self):
        from ib_notifications.interactors.storages.storage_interface import \
            StorageInterface

        return mock.create_autospec(StorageInterface)

    @pytest.fixture
    def interactor(self, storage_mock):

        from ib_notifications.interactors.mark_user_notification_as_unread_interactor \
            import MarkUserNotificationAsUnreadInteractor

        return MarkUserNotificationAsUnreadInteractor(
            storage=storage_mock
        )

    def test_with_a_invalid_notification_id_raises_exception(
            self, storage_mock, interactor
    ):
        # Arrange
        user_id = "1"
        invalid_notification_id = "notification_1"

        storage_mock.check_is_valid_notification_id.return_value = False

        # Act
        with pytest.raises(InvalidNotificationId) as err:
            interactor.mark_user_notification_as_unread(
                user_id=user_id, notification_id=invalid_notification_id
            )

        # Assert
        storage_mock.check_is_valid_notification_id.assert_called_once_with(
            notification_id=invalid_notification_id)
        assert err.value.notification_id == invalid_notification_id

    def test_with_a_invalid_user_notification_id_raises_exception(
            self, storage_mock, interactor
    ):
        # Arrange
        user_id = "1"
        notification_id = "notification_1"

        storage_mock.check_is_valid_notification_id.return_value = True
        storage_mock.get_valid_user_notification_ids.return_value = []

        # Act
        with pytest.raises(InvalidUserNotificationId) as err:
            interactor.mark_user_notification_as_unread(
                user_id=user_id, notification_id=notification_id
            )

        # Assert
        storage_mock.check_is_valid_notification_id.assert_called_once_with(
            notification_id=notification_id
        )
        storage_mock.get_valid_user_notification_ids.assert_called_once_with(
            user_id=user_id, notification_ids=[notification_id]
        )

    def test_with_valid_data(
            self, storage_mock, interactor
    ):
        # Arrange
        user_id = "1"
        notification_id = "notification_1"

        storage_mock.check_is_valid_notification_id.return_value = True
        storage_mock.get_valid_user_notification_ids.return_value = [
            notification_id]

        # Act
        interactor.mark_user_notification_as_unread(
            user_id=user_id, notification_id=notification_id
        )

        # Assert
        storage_mock.check_is_valid_notification_id.assert_called_once_with(
            notification_id=notification_id
        )
        storage_mock.get_valid_user_notification_ids.assert_called_once_with(
            user_id=user_id, notification_ids=[notification_id]
        )
        storage_mock.mark_user_notifications_as_unread.assert_called_once_with(
            user_id=user_id, notification_ids=[notification_id]
        )
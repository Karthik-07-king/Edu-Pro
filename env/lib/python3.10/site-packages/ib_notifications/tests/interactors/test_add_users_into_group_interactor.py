import pytest
from django_swagger_utils.drf_server.exceptions import NotFound, \
    ExpectationFailed
from mock import create_autospec

from ib_notifications.constants.exception_messages import INVALID_GROUP_ID, \
    EMPTY_USER_LIST
from ib_notifications.interactors.add_users_into_group_interactor import \
    AddUsersToGroupInteractor
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface


class TestAddUsersToGroupInteractor:
    def test_invalid_group_id_raise_exception(self):
        group_id = 123
        user_ids = ["1", "2", "3"]
        exception_message = INVALID_GROUP_ID[0]
        exception_res_status = INVALID_GROUP_ID[1]

        presenter_mock = create_autospec(PresenterInterface)
        storage_mock = create_autospec(StorageInterface)
        interactor = AddUsersToGroupInteractor(
            storage=storage_mock
        )

        storage_mock.is_invalid_group_id.return_value = True
        presenter_mock.raise_invalid_group_id_exception.side_effect = NotFound(
            *INVALID_GROUP_ID)

        with pytest.raises(NotFound) as exe:
            interactor.add_users_into_group_response(
                group_id=group_id,
                user_ids=user_ids,
                presenter=presenter_mock
            )

        assert exception_message == exe.value.message
        assert exception_res_status == exe.value.res_status
        presenter_mock.raise_invalid_group_id_exception.assert_called_once()
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)

    def test_empty_user_ids_raise_exception(self):
        group_id = 1
        user_ids = []
        exception_message = EMPTY_USER_LIST[0]
        exception_res_status = EMPTY_USER_LIST[1]

        presenter_mock = create_autospec(PresenterInterface)
        storage_mock = create_autospec(StorageInterface)
        interactor = AddUsersToGroupInteractor(
            storage=storage_mock
        )

        storage_mock.is_invalid_group_id.return_value = False
        presenter_mock.raise_empty_user_ids_exception.side_effect = \
            ExpectationFailed(*EMPTY_USER_LIST)

        with pytest.raises(ExpectationFailed) as exe:
            interactor.add_users_into_group_response(
                group_id=group_id,
                user_ids=user_ids,
                presenter=presenter_mock
            )

        assert exception_message == exe.value.message
        assert exception_res_status == exe.value.res_status
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)
        presenter_mock.raise_empty_user_ids_exception.assert_called_once()

    def test_with_valid_input_add_user_ids_to_group(self):
        group_id = 1
        user_ids = ["1", "2", "3"]

        presenter_mock = create_autospec(PresenterInterface)
        storage_mock = create_autospec(StorageInterface)
        interactor = AddUsersToGroupInteractor(
            storage=storage_mock
        )

        storage_mock.is_invalid_group_id.return_value = False

        interactor.add_users_into_group_response(
            group_id=group_id,
            user_ids=user_ids,
            presenter=presenter_mock
        )

        storage_mock.add_users_to_group.assert_called_once_with(
            user_ids=user_ids, group_id=group_id)
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)

    def test_with_duplicate_user_ids_add_user_ids_to_group(self):
        group_id = 1
        user_ids = ["1", "1", "1"]
        distinct_user_ids = ["1"]

        presenter_mock = create_autospec(PresenterInterface)
        storage_mock = create_autospec(StorageInterface)
        interactor = AddUsersToGroupInteractor(
            storage=storage_mock
        )

        storage_mock.is_invalid_group_id.return_value = False

        interactor.add_users_into_group_response(
            group_id=group_id,
            user_ids=user_ids,
            presenter=presenter_mock
        )

        storage_mock.add_users_to_group.assert_called_once_with(
            user_ids=distinct_user_ids, group_id=group_id)
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)

    def test_with_exists_user_ids_to_group(self):
        group_id = 1
        user_ids = ["1", "2", "3", "4"]
        valid_user_ids = ["4"]

        presenter_mock = create_autospec(PresenterInterface)
        storage_mock = create_autospec(StorageInterface)
        interactor = AddUsersToGroupInteractor(
            storage=storage_mock
        )

        storage_mock.is_invalid_group_id.return_value = False
        storage_mock.get_user_ids_in_group.return_value = ["1", "2", "3"]

        interactor.add_users_into_group_response(
            group_id=group_id,
            user_ids=user_ids,
            presenter=presenter_mock
        )

        storage_mock.get_user_ids_in_group.assert_called_once_with(group_id=group_id)
        storage_mock.add_users_to_group.assert_called_once_with(
            user_ids=valid_user_ids, group_id=group_id)
        storage_mock.is_invalid_group_id.assert_called_once_with(
            group_id=group_id)

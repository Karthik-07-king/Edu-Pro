from unittest.mock import create_autospec

import pytest
from django_swagger_utils.drf_server.exceptions import BadRequest

from ib_notifications.constants.enums import DeviceType
from ib_notifications.dtos.notification_message_dto import \
    NotificationMessageDTO
from ib_notifications.dtos.user_ids_with_no_cm_token import \
    SendNotificationResponseDTO
from ib_notifications.exceptions.exceptions import EmptyUserListException
from ib_notifications.interactors.presenters.presenter_interface import \
    PresenterInterface
from ib_notifications.interactors.send_notification_to_users_interactor \
    import SendNotificationToUsersInteractor
from ib_notifications.interactors.storages.storage_interface import \
    StorageInterface
from ib_notifications.services.cloud_messaging_interface import \
    CloudMessagingInterface
from ib_notifications.tests.factories.interactor_dtos import UserIdWithCMTokenFactory


class TestSendNotificationToUserListInteractor:

    def test_user_ids_return_user_ids_without_cm_token(self):
        # Arrange
        user_ids = ['1', '2', '3', '4']
        expected_result = {"user_ids_without_cm_tokens": ['1', '2', '3', '4']}
        notification_message_dto = NotificationMessageDTO(
            title="notification title",
            message="a sample message",
            extra_data="extra data",
            notification_type="normal"

        )
        user_ids_without_cm_token_dto = SendNotificationResponseDTO(
            user_ids_without_cm_token=user_ids
        )
        log_notification = False
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]

        user_cm_token_dtos = []
        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_specific_device_types.return_value \
            = user_cm_token_dtos

        cloud_message_mock = create_autospec(CloudMessagingInterface)
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.raise_exception_for_empty_user_ids.side_effect = \
            EmptyUserListException
        presenter_mock.get_send_notification_to_user_response.return_value = \
            expected_result

        interactor = SendNotificationToUsersInteractor(storage=storage_mock)

        # Act
        actual_result = interactor.send_notification_to_users_response(
            user_ids=user_ids, log_notification=log_notification,
            cloud_message_provider=cloud_message_mock,
            device_types=device_types,
            notification_message_dto=notification_message_dto,
            presenter=presenter_mock)

        # Assert
        assert expected_result == actual_result
        assert cloud_message_mock.send_notification.call_count == 0
        presenter_mock.get_send_notification_to_user_response. \
            assert_called_once_with(
                user_ids_without_cm_token_dto=user_ids_without_cm_token_dto)

    def test_user_ids_send_notification(self):
        # Arrange
        user_ids = ['1', '2']
        tokens = ['token1', 'token2']
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]

        notification_message_dto = NotificationMessageDTO(
            title="notification title",
            message="a sample message",
            extra_data="extra data",
            notification_type="normal"

        )
        log_notification = False

        cm_tokens_with_user_ids_dtos = [
            UserIdWithCMTokenFactory(user_id=user_ids[0], cm_token=tokens[0]),
            UserIdWithCMTokenFactory(user_id=user_ids[1], cm_token=tokens[1])
        ]
        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_specific_device_types.return_value \
            = cm_tokens_with_user_ids_dtos
        presenter_mock = create_autospec(PresenterInterface)

        cloud_message_mock = create_autospec(CloudMessagingInterface)
        interactor = SendNotificationToUsersInteractor(storage=storage_mock)

        # Act
        interactor.send_notification_to_users_response(
            user_ids=user_ids, device_types=device_types,
            cloud_message_provider=cloud_message_mock,
            log_notification=log_notification,
            notification_message_dto=notification_message_dto,
            presenter=presenter_mock)
        # Assert
        storage_mock.get_user_cm_tokens_for_specific_device_types. \
            assert_called_once_with(
                user_ids=user_ids, device_types=device_types)

    def test_given_user_ids_notification_message_dto_then_log_notification(
            self):
        # Arrange
        user_ids = ['1']
        tokens = ['token1']
        log_notification = True
        device_types = [DeviceType.ANDROID.value, DeviceType.IOS.value]

        notification_message_dto = NotificationMessageDTO(
            title="notification title",
            message="a sample message",
            extra_data="extra data",
            notification_type="normal"

        )
        cm_tokens_with_user_ids_dtos = [
            UserIdWithCMTokenFactory(user_id=user_ids[0], cm_token=tokens[0])
        ]

        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_specific_device_types.return_value \
            = cm_tokens_with_user_ids_dtos
        presenter_mock = create_autospec(PresenterInterface)

        cloud_message_mock = create_autospec(CloudMessagingInterface)
        service_response = {"errors": []}

        cloud_message_mock.send_notification.return_value = service_response
        interactor = SendNotificationToUsersInteractor(storage=storage_mock)

        # Act
        interactor.send_notification_to_users_response(
            user_ids=user_ids, log_notification=log_notification,
            cloud_message_provider=cloud_message_mock,
            device_types=device_types,
            notification_message_dto=notification_message_dto,
            presenter=presenter_mock)
        # Assert

        storage_mock.log_notification.assert_called_once_with(
            user_ids=user_ids,
            notification_message_dto=notification_message_dto,
            notification_service_response=service_response
        )

    def test_given_valid_inputs_and_device_types_then_send_notification_to_given_device_types(
            self):
        # Arrange
        user_ids = ['1']
        tokens = ['token1']
        log_notification = True
        device_types = [DeviceType.ANDROID.value]
        expected_result = {"user_ids_without_cm_tokens": []}

        notification_message_dto = NotificationMessageDTO(
            title="notification title",
            message="a sample message",
            extra_data="extra data",
            notification_type="normal"

        )
        cm_tokens_with_user_ids_dtos = [
            UserIdWithCMTokenFactory(user_id=user_ids[0], cm_token=tokens[0])
        ]
        user_ids_without_cm_token_dto = SendNotificationResponseDTO(
            user_ids_without_cm_token=[]
        )

        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_specific_device_types.return_value \
            = cm_tokens_with_user_ids_dtos
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.get_send_notification_to_user_response.return_value = \
            expected_result

        cloud_message_mock = create_autospec(CloudMessagingInterface)
        service_response = {"errors": []}
        cloud_message_mock.send_notification.return_value = service_response

        interactor = SendNotificationToUsersInteractor(storage=storage_mock)

        # Act
        actual_result = interactor.send_notification_to_users_response(
            user_ids=user_ids, log_notification=log_notification,
            cloud_message_provider=cloud_message_mock,
            device_types=device_types,
            notification_message_dto=notification_message_dto,
            presenter=presenter_mock)
        # Assert
        assert expected_result == actual_result
        storage_mock.log_notification.assert_called_once_with(
            user_ids=user_ids,
            notification_message_dto=notification_message_dto,
            notification_service_response=service_response
        )
        presenter_mock.get_send_notification_to_user_response. \
            assert_called_once_with(
                user_ids_without_cm_token_dto=user_ids_without_cm_token_dto)

    def test_given_valid_inputs_and_invalid_device_types_then_raise_exception(
            self):
        # Arrange
        user_ids = ['1', '2', '3']
        tokens = ['token1', 'token2']
        log_notification = True
        device_types = ["android"]

        notification_message_dto = NotificationMessageDTO(
            title="notification title",
            message="a sample message",
            extra_data="extra data",
            notification_type="normal"
        )

        user_cm_token_dtos = [
            UserIdWithCMTokenFactory(user_id=user_ids[0], cm_token=tokens[0]),
            UserIdWithCMTokenFactory(user_id=user_ids[1], cm_token=tokens[1])
        ]
        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_specific_device_types.return_value \
            = user_cm_token_dtos
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.raise_invalid_device_type.side_effect = BadRequest

        cloud_message_mock = create_autospec(CloudMessagingInterface)
        interactor = SendNotificationToUsersInteractor(storage=storage_mock)

        # Act
        # Assert
        with pytest.raises(BadRequest):
            interactor.send_notification_to_users_response(
                user_ids=user_ids, log_notification=log_notification,
                cloud_message_provider=cloud_message_mock,
                device_types=device_types,
                notification_message_dto=notification_message_dto,
                presenter=presenter_mock)

    def test_given_valid_inputs_and_empty_device_types_then_send_notification_to_all_users(
            self):
        # Arrange
        user_ids = ['1', '2', '3']
        tokens = ['token1', 'token2', 'token3']
        log_notification = True
        device_types = []
        expected_result = {"user_ids_without_cm_tokens": []}

        notification_message_dto = NotificationMessageDTO(
            title="notification title",
            message="a sample message",
            extra_data="extra data",
            notification_type="normal"

        )
        user_ids_without_cm_token_dto = SendNotificationResponseDTO(
            user_ids_without_cm_token=[]
        )
        cm_tokens_with_user_ids_dtos = [
            UserIdWithCMTokenFactory(user_id=user_ids[0], cm_token=tokens[0]),
            UserIdWithCMTokenFactory(user_id=user_ids[1], cm_token=tokens[1]),
            UserIdWithCMTokenFactory(user_id=user_ids[2], cm_token=tokens[2])
        ]
        registration_ids = tokens

        storage_mock = create_autospec(StorageInterface)
        storage_mock.get_user_cm_tokens_for_all_device_types. \
            return_value = cm_tokens_with_user_ids_dtos
        presenter_mock = create_autospec(PresenterInterface)
        presenter_mock.get_send_notification_to_user_response.return_value = \
            expected_result

        cloud_message_mock = create_autospec(CloudMessagingInterface)
        interactor = SendNotificationToUsersInteractor(storage=storage_mock)

        # Act
        actual_result = interactor.send_notification_to_users_response(
            user_ids=user_ids, log_notification=log_notification,
            cloud_message_provider=cloud_message_mock,
            device_types=device_types,
            notification_message_dto=notification_message_dto,
            presenter=presenter_mock)

        # Assert
        assert expected_result == actual_result
        storage_mock.get_user_cm_tokens_for_all_device_types. \
            assert_called_once_with(user_ids=user_ids)
        cloud_message_mock.send_notification. \
            assert_called_once_with(
                cm_token_dtos=cm_tokens_with_user_ids_dtos,
                notification_message_dto=notification_message_dto)
        presenter_mock.get_send_notification_to_user_response. \
            assert_called_once_with(
                user_ids_without_cm_token_dto=user_ids_without_cm_token_dto)

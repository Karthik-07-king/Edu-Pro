"""
# given valid inputs test create or update token
"""
from ib_notifications.constants.enums import DeviceType
from ib_notifications.models import UserDeviceToken
from ib_notifications.utils.api_test_utils import ApiTestUtils
from . import APP_NAME, OPERATION_NAME, REQUEST_METHOD, URL_SUFFIX

REQUEST_BODY = """
{
    "device_id": "1",
    "device_type": "WEB",
    "token": "token 1"
}
"""

TEST_CASE = {
    "request": {
        "path_params": {},
        "query_params": {},
        "header_params": {},
        "securities": {"oauth": {"tokenUrl": "http://www.example.com",
                                 "flow": "password",
                                 "scopes": ["write", "update"],
                                 "type": "oauth2"}},
        "body": REQUEST_BODY,
    },
}


class TestCase01CreateOrUpdateCloudMessageTokenAPITestCase(ApiTestUtils):
    app_name = APP_NAME
    operation_name = OPERATION_NAME
    request_method = REQUEST_METHOD
    url_suffix = URL_SUFFIX
    test_case_dict = TEST_CASE

    def test_case(self):
        self.default_test_case()

        user_device_token = UserDeviceToken.objects.get(
            user_id=str(self.foo_user.id), device_id=1,
            device_type=DeviceType.WEB.value)

        self.assert_match_snapshot(
            name="user_id",
            value=user_device_token.user_id
        )
        self.assert_match_snapshot(
            name="device_id",
            value=user_device_token.device_id
        )
        self.assert_match_snapshot(
            name="device_type",
            value=user_device_token.device_type
        )
        self.assert_match_snapshot(
            name="token",
            value=user_device_token.token
        )

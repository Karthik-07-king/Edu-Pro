"""
mark a user unread notification as read with valid data
"""
import datetime

import freezegun

from ib_notifications.utils.api_test_utils import ApiTestUtils
from . import APP_NAME, OPERATION_NAME, REQUEST_METHOD, URL_SUFFIX

REQUEST_BODY = """
{}
"""

TEST_CASE = {
    "request": {
        "path_params": {},
        "query_params": {
            "notification_id": "bb0a8f20-e5a1-4824-856c-7dfeed9f9a2e"
        },
        "header_params": {},
        "securities": {
            "oauth": {
                "tokenUrl": "http://www.example.com",
                "flow": "password",
                "scopes": ["write", "update"],
                "type": "oauth2"
            }
        },
        "body": REQUEST_BODY,
    },
}


@freezegun.freeze_time(datetime.datetime(2020, 5, 4, 5, 10, 22))
class TestCase01MarkNotificationAsReadAPITestCase(ApiTestUtils):
    app_name = APP_NAME
    operation_name = OPERATION_NAME
    request_method = REQUEST_METHOD
    url_suffix = URL_SUFFIX
    test_case_dict = TEST_CASE

    def setupUser(self, username, password):
        super(TestCase01MarkNotificationAsReadAPITestCase,
              self).setupUser(
            username=username,
            password=password
        )

        from ib_notifications.tests.factories.models import \
            UserNotificationFactory, NotificationFactory
        UserNotificationFactory.reset_sequence()
        NotificationFactory.reset_sequence()

        notification = NotificationFactory.create(
            id="bb0a8f20-e5a1-4824-856c-7dfeed9f9a2e")
        UserNotificationFactory.create(
            user_id=self.foo_user.id,
            notification=notification)

    def test_case(self):
        self.default_test_case()

        from ib_notifications.models.user_notification import UserNotification
        user_notification_object = UserNotification.objects.get(
            user_id=str(self.foo_user.id),
            notification_id="bb0a8f20-e5a1-4824-856c-7dfeed9f9a2e")

        self.assert_match_snapshot(user_notification_object.read_at,
                                   "read_at_value")

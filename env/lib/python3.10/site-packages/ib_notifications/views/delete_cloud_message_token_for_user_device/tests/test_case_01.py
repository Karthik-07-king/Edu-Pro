"""
delete user access token when exists
"""

from ib_notifications.constants.enums import DeviceType
from ib_notifications.utils.api_test_utils import ApiTestUtils
from . import APP_NAME, OPERATION_NAME, REQUEST_METHOD, URL_SUFFIX

REQUEST_BODY = """
{}
"""

TEST_CASE = {
    "request": {
        "path_params": {},
        "query_params": {
            "device_id": "string",
            "device_type": "WEB"
        },
        "header_params": {},
        "securities": {
            "oauth": {
                "tokenUrl": "http://www.example.com",
                "flow": "password",
                "scopes": ["delete"],
                "type": "oauth2"
            }
        },
        "body": REQUEST_BODY,
    },
}


class TestCase01DeleteCloudMessageTokenForUserDeviceAPITestCase(ApiTestUtils):
    app_name = APP_NAME
    operation_name = OPERATION_NAME
    request_method = REQUEST_METHOD
    url_suffix = URL_SUFFIX
    test_case_dict = TEST_CASE

    USER_DEVICE_TOKEN = {
        "user_id": "1",
        "device_id": "1",
        "device_type": DeviceType.WEB.value,
        "token": "token 1"
    }

    def setupUser(self, username, password):
        super(TestCase01DeleteCloudMessageTokenForUserDeviceAPITestCase,
              self).setupUser(
            username=username,
            password=password
        )
        self.create_user_device_token()

    def test_case(self):
        self.default_test_case()

        user_id = str(self.foo_user.id),
        device_id = self.USER_DEVICE_TOKEN["device_id"],
        device_type = self.USER_DEVICE_TOKEN["device_type"],

        from ib_notifications.models.user_device_token import UserDeviceToken
        is_deleted_token = not UserDeviceToken.objects.filter(
            user_id=user_id,
            device_id=device_id,
            device_type=device_type).exists()

        self.assert_match_snapshot(
            name="is deleted token for user device",
            value=is_deleted_token
        )

import pytest

from ib_notifications.constants.enums import DeviceType
from ib_notifications.models import UserDeviceToken
from ib_notifications.models import Group, GroupUser


USER_DEVICES = [
    {
        "user_id": "1",
        "device_id": "1",
        "device_type": DeviceType.WEB.value,
        "token": "token 1"
    },
    {
        "user_id": "1",
        "device_id": "2",
        "device_type": DeviceType.ANDROID.value,
        "token": "token 2"
    },
    {
        "user_id": "2",
        "device_id": "3",
        "device_type": DeviceType.ANDROID.value,
        "token": "token 3"
    }
]
GROUPS = [
    {
        "name": "group 1"
    },
    {
        "name": "group 2"
    }
]

USER_IDS = [
    "1", "2", "3", "4", "5", "6"
]


@pytest.fixture
def users_devices_setup():
    user_devices = []
    for user_device in USER_DEVICES:
        user_devices.append(UserDeviceToken.objects.create(
            device_id=user_device["device_id"],
            device_type=user_device["device_type"],
            user_id=user_device["user_id"],
            token=user_device["token"]
        ))

    return user_devices


@pytest.fixture()
def groups_setup():
    groups = []
    for group in GROUPS:
        group_object = Group.objects.create(name=group["name"])
        groups.append(group_object)
    return groups


@pytest.fixture()
def group_users_setup(groups_setup):
    group_users = []
    group_id = groups_setup[0].id
    for user_id in USER_IDS:
        group_user_object = GroupUser.objects.create(
            group_id=group_id,
            user_id=user_id)
        group_users.append(group_user_object)

    return group_users

import json
from dsu.dsu_gen.openapi.generator.path_generator import \
    PathGenerator
from dsu.test_cases.constants.conf import render_test_cases


class TestCaseGenerator:
    def __init__(self, parser, path,
                 app_name, dir_paths, group_name = None, path_name=None):
        self.parser = parser
        self.path = path
        self.app_name = app_name
        self.path_name = path_name
        self.dir_paths = dir_paths
        self.group_name = group_name

    def generate_new_testcase(
            self, req_operation_id, tcn, path, path_name, snapshot=False):

        from dsu.dsu_gen.openapi.generator.path_generator import \
            PathGenerator

        found = False
        for method_name, each_method in list(self.path.items()):

            path_generator = PathGenerator(app_name=self.app_name,
                                           path=path, dir_paths=self.dir_paths,
                                           path_name=path_name, parser=self.parser,
                                           group_name=self.group_name)

            if method_name != "parameters" and each_method.get(
                    'operationId') == req_operation_id:
                self.group_name = each_method.get('x-group', '')

                path_url, example_path_url, path_params_dict = \
                    path_generator.get_method_path_url(method_name)

                method_dict = {}
                operation_id = each_method["operationId"]
                request_method = method_name.upper()

                method_dict[request_method] = operation_id

                endpoint_dict = path_generator.get_endpoint_dict(method_name,
                                                       each_method)
                endpoint_dict["path_params"] = json.dumps(path_params_dict)
                testing_url = path_generator.clean_path_url(self.path_name)
                self.generate_test_cases(
                    endpoint_dict, testing_url, tcn, snapshot=snapshot)
                found = True
                break

        return found

    def generate_apis_testcases(self):
        path_method_dict = {}
        path_generator = PathGenerator( app_name=self.app_name,  path=self.path,
            dir_paths=self.dir_paths, group_name=self.group_name,
                                        parser=self.parser, path_name=self.path_name)
        for method_name, each_method in list(self.path.items()):
            if method_name != "parameters":

                self.group_name = each_method.get('x-group', '')
                path_url, example_path_url, path_params_dict = \
                    path_generator.get_method_path_url(method_name)

                method_dict = path_method_dict.get(path_url, {})

                # allowed skip url tag
                tags = each_method.get('tags', [])
                from django.conf import settings
                skip_url_tags = getattr(
                    settings, 'DJANGO_SWAGGER_UTILS_SKIP_URL_TAGS',
                    []
                )
                skip_tag_found = False
                for tag in tags:
                    if tag in skip_url_tags:
                        skip_tag_found = True
                        break
                if not skip_tag_found:
                    path_method_dict[path_url] = method_dict

                endpoint_dict = path_generator.get_endpoint_dict(method_name,
                                                       each_method)
                endpoint_dict["path_params"] = json.dumps(path_params_dict)
                path_generator.generate_endpoint_file(endpoint_dict)
                testing_url = path_generator.clean_path_url(self.path_name)
                self.generate_test_cases(endpoint_dict, testing_url, 1,
                                         snapshot=True)

    def generate_test_cases(
            self, endpoint_dict, example_path_url, tcn, snapshot=False):

        from dsu.utils.write_to_file import write_to_file
        from django.conf import settings
        from dsu.runtime.constants.enums import CleanCodeViewsTestsVersion
        django_swagger_utils_settings = settings.SWAGGER_UTILS
        try:
            dsu_version = django_swagger_utils_settings['APPS'][
                self.app_name]['dsu_version']
        except KeyError:
            dsu_version = CleanCodeViewsTestsVersion.VERSION_ZERO.value

        if dsu_version == CleanCodeViewsTestsVersion.VERSION_ONE.value:
            tests_dir_path = self._get_tests_dir_path_for_dsu_version_one(
                endpoint_dict)
        else:
            tests_dir_path = self._get_tests_dir_path_for_dsu_version_zero(
                endpoint_dict)

        sample_test_case = "test_case_{0}.py".format(str(tcn).zfill(2))
        sample_test_case_path = tests_dir_path + sample_test_case

        from dsu.utils.check_path_exists import \
            check_path_exists
        is_test_case_file_exists = check_path_exists(sample_test_case_path)

        endpoint_dict["securities"] = self.get_test_case_security_dict(
            endpoint_dict["securities"])
        if not is_test_case_file_exists:
            from dsu.utils.case_convertion import \
                to_camel_case
            camel_case_operation_name = to_camel_case(
                endpoint_dict["operation_id"])
            sample_test_case = sample_test_case.split(".")[0]
            endpoint_dict["test_case_class"] = to_camel_case(
                sample_test_case) + camel_case_operation_name \
                                               + "APITestCase"
            if snapshot:
                sample_test_case_contents = self.get_snapshot_test_content(
                    endpoint_dict, dsu_version)
            else:
                sample_test_case_contents = self.get_tests_file_contents(
                    endpoint_dict)

            from yapf.yapflib.yapf_api import FormatCode
            formatted_test_case_contents = \
                FormatCode(sample_test_case_contents)
            write_to_file(formatted_test_case_contents[0],
                          sample_test_case_path)

        from dsu.utils.get_test_cases_dict import \
            get_test_cases_dict

        if dsu_version == CleanCodeViewsTestsVersion.VERSION_ZERO.value:
            test_cases_dict = get_test_cases_dict(
                tests_dir_path,
                endpoint_dict["operation_id"]
            )
            endpoint_dict["test_cases"] = test_cases_dict
        endpoint_dict["example_path_url"] = example_path_url

        tests_init_file = tests_dir_path + "__init__.py"
        base_path = self.parser.base_path()
        endpoint_dict['base_path'] = base_path
        tests_init_file_contents = self.get_tests_init_file_contents(
            endpoint_dict
        )

        write_to_file(tests_init_file_contents, tests_init_file)

    def get_test_case_security_dict(self, securities):
        security_defs = self.parser.security_definitions()
        new_security = {}
        for each_security in securities:
            if each_security:
                security_name = list(each_security.keys())[0]
                security_def = security_defs.get(security_name, {})
                # currently supporting only oauth2 security in test_cases
                if security_def:
                    if security_def.get("type") == "oauth2":
                        security_def.update(
                            {"scopes": each_security[security_name]})
                        new_security[security_name] = security_def
                    elif security_def.get("type") == "apiKey":
                        security_key_name = security_def.get("name")
                        security_def.update({"value": "api_key",
                                             "header_name": "HTTP_" + security_key_name.upper().replace(
                                                 "-", "_")})
                        new_security[security_name] = security_def
                    elif security_def.get("type") == "basic":
                        security_def.update(
                            {"username": "username", "password": "password"})
                        new_security[security_name] = security_def
        return json.dumps(new_security)

    def get_snapshot_test_content(self, endpoint_context, dsu_version):
        from dsu.runtime.constants.enums import CleanCodeViewsTestsVersion
        securities = json.loads(endpoint_context["securities"])
        if dsu_version == CleanCodeViewsTestsVersion.VERSION_ONE.value:
            try:
                body = json.loads(endpoint_context['request_body_sample_json'])
            except ValueError:
                body = {}
            endpoint_context.update({
                'securities': str(self.get_securities_for_snapshot_file(securities)),
                'request_query_params': json.loads(
                    str(endpoint_context['request_query_params'])),
                'path_prams': json.loads(
                    str(endpoint_context['default_request_path_params'])),
                'request_headers_params': json.loads(
                    str(endpoint_context['request_headers_params'])),
                'body': body
            })
            return render_test_cases('snapshot_test_v1.j2', endpoint_context)
        else:
            return render_test_cases('snapshot_test.j2', endpoint_context)

    @staticmethod
    def get_securities_for_snapshot_file(securities):
        if not "oauth" in securities:
            return {}
        if securities["oauth"]["type"] == "oauth2":
            oauth_type = "oauth"
        else:
            oauth_type = securities["oauth"]["type"]
        scopes = securities["oauth"]["scopes"]
        return {oauth_type: {'scopes': scopes}}

    @staticmethod
    def get_tests_file_contents(endpoint_context):
        return render_test_cases('test_case.j2', endpoint_context)

    @staticmethod
    def get_tests_init_file_contents(endpoint_context):
        return render_test_cases(
            'test_case_init_file.j2', endpoint_context
        )

    def _get_tests_dir_path_for_dsu_version_zero(self, endpoint_dict):
        if self.group_name:
            tests_dir_path = \
                self.dir_paths["views_dir"] + "/" + self.group_name + "/" + \
                endpoint_dict["operation_id"] + "/tests/"
        else:
            tests_dir_path = self.dir_paths["views_dir"] + "/" + endpoint_dict[
                "operation_id"] + "/tests/"
        return tests_dir_path

    def _get_tests_dir_path_for_dsu_version_one(self, endpoint_dict):
        if self.group_name:
            tests_dir_path = \
                self.dir_paths["tests_dir"] + "/views/" + self.group_name + \
                "/" + endpoint_dict["operation_id"] + "/"
        else:
            tests_dir_path = self.dir_paths["tests_dir"] + "/views/" + \
                             endpoint_dict["operation_id"] + "/"
        return tests_dir_path



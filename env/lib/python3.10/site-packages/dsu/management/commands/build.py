import json

from django.core.management import BaseCommand

from dsu.dsu_gen.openapi.generator.build_generator import Build


class Command(BaseCommand):
    can_import_settings = True
    help = 'Generate views and docs from swagger spec files'

    def add_arguments(self, parser):
        parser.add_argument('-a', '--apis', action='store_true',
                            help='Build API Views')
        parser.add_argument('-t', '--thirdparty', action='store_true',
                            help='Build Third Party API Views')
        parser.add_argument('app', nargs='*', type=str)
        parser.add_argument('-l', '--lib', action='store_true',
                            help='Build Third Party API Views in lib directory for google ape')

    def handle(self, *args, **options):
        '''
        Handles the concerned activity
        :param args: aruguments user give in command line
        :param options: options to arguments given
        :return:
        '''

        from django.conf import settings
        import os
        base_dir = settings.BASE_DIR
        # obtain path of zappa_settings
        zappa_settings = os.path.join(base_dir, "zappa_settings.json")
        # set default domain as empty string
        domain = ''
        django_swagger_utils_settings = settings.SWAGGER_UTILS
        swagger_apps = list(django_swagger_utils_settings['APPS'].keys())

        third_party_swagger_apps = getattr(settings,
                                           'THIRD_PARTY_SWAGGER_APPS', [])

        try:
            apps = options['app']
            if not apps:
                apps = swagger_apps

            for app in apps:
                if app in swagger_apps:
                    build = Build(app, base_dir,
                                      django_swagger_utils_settings)

                    if options['apis']:
                        build.clean()

            # calling the concerned build methods for each app
            for app in apps:
                if app in swagger_apps:
                    build = Build(app, base_dir,
                                      django_swagger_utils_settings)

                    if options['apis']:
                        build.generate_specs_build()

                else:
                    print(
                        "Ignoring %s app. Please add it in SWAGGER_UTILS['APPS'] first.")

            if options['thirdparty']:

                for third_party_app in third_party_swagger_apps:
                    third_party_base_dir = None
                    if options["lib"]:
                        third_party_base_dir = base_dir + "/lib"
                    else:
                        try:
                            third_party_base_dir = os.path.abspath(
                                os.path.join(__import__(third_party_app).
                                             __path__[0], os.pardir))
                        except ImportError:
                            raise

                    build = Build(app_name=third_party_app,
                                  base_dir=third_party_base_dir)
                    build.clean()
                    build.generate_specs_build()

        except Exception as err:
            print(err)
            raise

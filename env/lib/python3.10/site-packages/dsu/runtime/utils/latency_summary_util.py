
def summarize_latency():
    from django_swagger_utils.models import Latency, LatencySummary
    from django.db.models.functions import Cast
    from django.db.models.fields import DateField
    import datetime
    from django.db.models import Avg, Count
    from django.conf import settings
    # Assuming the results will be in local timezones

    delete_latency_after_summary = getattr(
        settings, 'DELETE_LATENCY_OBJECT_AFTER_SUMMARY', False)

    recorded_dates = Latency.objects.annotate(
        date_only=Cast('date_time', DateField())).values_list(
        'date_only', flat=True).distinct()

    for recorded_date in recorded_dates:
        if recorded_date != datetime.date.today():
            if LatencySummary.objects.filter(
                    summary_date=recorded_date).count() == 0:
                from_datetime = datetime.datetime.combine(
                    recorded_date, datetime.time(0, 0, 0))
                to_datetime = from_datetime + datetime.timedelta(days=1)
                qs = Latency.objects.filter(
                        date_time__gte=from_datetime,
                        date_time__lt=to_datetime).\
                    values('app_name', 'operation_id').annotate(
                    Count('id'), Avg('response_time'))
                summary_objects = []

                for obj in qs:
                    summary_objects.append(
                        LatencySummary(
                            app_name=obj['app_name'],
                            operation_id=obj['operation_id'],
                            avg_response_time=obj['response_time__avg'],
                            summary_date=recorded_date,
                            count=obj['id__count']
                        )
                    )
                LatencySummary.objects.bulk_create(summary_objects)
                if delete_latency_after_summary:
                    Latency.objects.filter(
                        date_time__gte=from_datetime,
                        date_time__lt=to_datetime).delete()
                print(recorded_date, 'Success')
            else:
                print(recorded_date, 'Failed')

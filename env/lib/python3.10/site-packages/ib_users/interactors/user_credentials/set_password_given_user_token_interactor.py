from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage
from ib_users.validators import PasswordValidator


class SetPasswordGivenUserTokenInteractor:
    def __init__(self, token_storage: UserPasswordResetTokenStorage,
                 accounts_storage: UserAccountsStorage):
        self.token_storage = token_storage
        self.accounts_storage = accounts_storage

    def set_password_given_user_and_token(self, user_id: str, token: str,
                                          new_password: str):
        PasswordValidator.validate(new_password)
        self.token_storage.verify_token(user_id=user_id, token=token)
        self.accounts_storage.update_user_password(user_id=user_id,
                                                   new_password=new_password)

    def set_password_given_user_password_reset_token(
            self, reset_password_token: str,
            new_password: str):
        # TODO use the above method. need to refactor
        PasswordValidator.validate(new_password)
        user_password_reset_token_dto = self.token_storage.get_user_password_reset_token_dto(
            token=reset_password_token)
        self._verify_token_is_expired(token=user_password_reset_token_dto)
        self.accounts_storage.update_user_password(
            user_id=user_password_reset_token_dto.user_id,
            new_password=new_password)

    @staticmethod
    def _verify_token_is_expired(token):
        from ib_common.date_time_utils.get_current_local_date_time import \
            get_current_local_date_time

        if token.expires_at <= get_current_local_date_time():
            from ib_users.interactors.exceptions.user_credentials_exceptions import \
                TokenExpiredException
            raise TokenExpiredException

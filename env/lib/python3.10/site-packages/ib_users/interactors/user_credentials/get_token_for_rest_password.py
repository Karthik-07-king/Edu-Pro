from ib_users.validators import EmailValidator

from ib_users.interactors.presenters.user_credentials_presenter import \
    UserCredentialsPresenter

from ib_users.interactors.third_party.token_generator import TokenGenerator

from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage

from ib_users.interactors.storages import UserAccountsStorage


class GetTokenForResetPassword:
    def __init__(self, account_storage: UserAccountsStorage,
                 token_storage: UserPasswordResetTokenStorage,
                 token_generator: TokenGenerator):
        self.account_storage = account_storage
        self.token_storage = token_storage
        self.token_generator = token_generator

    def get_reset_password_token_for_rest_password_wrapper(
            self, email: str,
            token_expiry_in_seconds: int, presenter: UserCredentialsPresenter):
        token = self.get_reset_password_token_for_reset_password(
            email=email, token_expiry_in_seconds=token_expiry_in_seconds)
        return presenter.get_response_for_reset_password(
            token=token)

    def get_reset_password_token_for_reset_password(
            self, email: str, token_expiry_in_seconds: int) -> str:
        EmailValidator.validate(email)
        self._validate_expiry_time_in_seconds(
            token_expiry_in_seconds=token_expiry_in_seconds)
        user = self.account_storage.get_user_given_email(
            email=email)
        user_id = str(user.user_id)
        is_active, token = self.token_storage.is_reset_password_token_active(
            user_id=user_id)

        if is_active:
            self.token_storage.update_expiry_time(
                user_id=user_id,
                expiry_time_in_seconds=token_expiry_in_seconds)
        else:
            token = self.token_generator.get_token(user=user)
            self.token_storage.store_reset_password_token(
                user_id=user_id, token=token,
                expiry_time_in_seconds=token_expiry_in_seconds)
        return token

    @staticmethod
    def _validate_expiry_time_in_seconds(token_expiry_in_seconds: int):
        if token_expiry_in_seconds <= 0:
            from ib_users.interactors.exceptions.user_credentials_exceptions import \
                InvalidTokenExpiryInSeconds
            raise InvalidTokenExpiryInSeconds

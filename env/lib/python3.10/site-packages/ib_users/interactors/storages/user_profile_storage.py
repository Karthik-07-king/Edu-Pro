import abc
import typing
from typing import List

from ib_users.interactors.DTOs.common_dtos import UserIdsWithTotalDTO, \
    UserIdWithEmailIdDTO, PhoneNumberDTO
from ib_users.interactors.user_profile_interactor import GetUserProfileDTO, \
    UserProfileDTO, CreateUserProfileDTO
from ib_users.interactors.storages import dtos as storage_dtos
from ib_users.interfaces import dtos as interface_dtos, enums
from ib_users.interactors import dtos as interactor_dtos


class UserProfileStorage:
    @abc.abstractmethod
    def get_user_profile(self, user_id: int) -> GetUserProfileDTO:
        pass

    @abc.abstractmethod
    def get_user_profiles(self, user_ids: List[int]) -> \
            List[GetUserProfileDTO]:
        pass

    @abc.abstractmethod
    def update_user_profile(self, user_id: int,
                            update_profile_data: UserProfileDTO):
        pass

    @abc.abstractmethod
    def get_user_country_code_and_phone_number(
            self, user_id: int) -> (str, str):
        pass

    @abc.abstractmethod
    def update_user_phone_number_verified(self, user_id: str):
        pass

    @abc.abstractmethod
    def get_user_email(self, user_id: str) -> str:
        pass

    @abc.abstractmethod
    def update_user_email_verified(self, user_id: str):
        pass

    @abc.abstractmethod
    def does_user_exists(self, user_id: str) -> bool:
        pass

    @abc.abstractmethod
    def is_any_user_id_invalid(self, user_ids: List[str]) -> bool:
        pass

    @abc.abstractmethod
    def create_user_profile(self, user_profile: CreateUserProfileDTO,
                            account_id: str) -> int:
        pass

    @abc.abstractmethod
    def check_is_emails_already_linked(self, email_ids: List[str]):
        pass

    @abc.abstractmethod
    def get_user_ids_by_name_or_email(self, offset: int, limit: int,
                                      search_value: str) -> UserIdsWithTotalDTO:
        pass

    @abc.abstractmethod
    def get_user_ids_by_email_ids(
            self, email_ids: List[str]
    ) -> List[UserIdWithEmailIdDTO]:
        pass

    @abc.abstractmethod
    def create_or_update_user_ssc_details(
            self, user_id: str, ssc_details: interface_dtos.UpdateSSCDetailsDTO):
        pass

    @abc.abstractmethod
    def create_or_update_user_intermediate_details(
            self, user_id: str, intermediate_details: interface_dtos.UpdateIntermediateDetailsDTO):
        pass

    @abc.abstractmethod
    def get_user_degree_details(
            self, user_id: str) -> List[storage_dtos.UserDegreeDetailsDTO]:
        pass

    @abc.abstractmethod
    def create_user_degree_details(
            self, user_id: str, degree_details: List[interface_dtos.UpdateDegreeDetailsDTO]):
        pass

    @abc.abstractmethod
    def update_user_degree_details(
            self, degree_details: List[interface_dtos.UpdateDegreeDetailsDTO]):
        pass

    @abc.abstractmethod
    def delete_user_degree_details(self, degree_details_ids: List[str]):
        pass

    @abc.abstractmethod
    def create_or_update_user_profile_details(
            self, user_id: str, profile_details: interface_dtos.UpdateProfileDetailsDTO):
        pass

    @abc.abstractmethod
    def create_or_update_user_contact_details(
            self, user_id: str, contact_details: interface_dtos.ContactDetailsDTO):
        pass

    @abc.abstractmethod
    def get_user_social_profile_details(self, user_id: str) \
            -> typing.List[storage_dtos.SocialProfileDetailsDTO]:
        pass

    @abc.abstractmethod
    def create_user_social_profile_details(
            self, user_id: str, social_profile_details: typing.List[interface_dtos.SocialProfileDetailsDTO]):
        pass

    @abc.abstractmethod
    def delete_user_social_profile_details(self, social_profile_details_ids: typing.List[str]):
        pass

    @abc.abstractmethod
    def update_social_profile_details(
            self, social_profile_details: typing.List[interface_dtos.SocialProfileDetailsDTO]):
        pass

    @abc.abstractmethod
    def get_user_profile_details(self, user_id: str) -> storage_dtos.ProfileDetailsDTO:
        pass

    @abc.abstractmethod
    def get_user_address_details(self, user_id: str) -> typing.List[storage_dtos.AddressDetailsDTO]:
        pass

    @abc.abstractmethod
    def get_user_ssc_details(self, user_id: str) -> storage_dtos.SSCDetailsDTO:
        pass

    @abc.abstractmethod
    def get_user_intermediate_details(
            self, user_id: str) -> storage_dtos.IntermediateDetailsDTO:
        pass

    @abc.abstractmethod
    def get_user_work_experience_details(
            self, user_id) -> storage_dtos.WorkExperienceDetailsDTO:
        pass

    @abc.abstractmethod
    def get_user_company_details(
            self, user_id: str) -> typing.List[storage_dtos.CompanyDetailsDTO]:
        pass

    @abc.abstractmethod
    def get_user_current_professional_details(
            self, user_id: str) -> storage_dtos.CurrentProfessionalDetailsDTO:
        pass

    @abc.abstractmethod
    def get_user_preferred_languages(self, user_id: str) \
            -> typing.Optional[typing.List[storage_dtos.UserPreferredLanguagesDTO]]:
        pass

    @abc.abstractmethod
    def update_user_preferred_languages(
            self, user_id: str, preferred_languages: typing.List[enums.Language]):
        pass

    @abc.abstractmethod
    def update_is_email_verified(self, user_id: str, is_email_verified: bool):
        pass

    @abc.abstractmethod
    def create_or_update_user_work_experience_details(
            self, user_id: str, work_experience_details: interface_dtos.WorkExperienceDetailsDTO):
        pass

    @abc.abstractmethod
    def create_or_update_user_current_professional_details(
            self, current_professional_details: interactor_dtos.CurrentProfessionalDetailsDTO,
            user_id: str):
        pass

    @abc.abstractmethod
    def update_user_company_details(
            self, user_company_details: typing.List[interface_dtos.UpdateUserCompanyDetailsDTO]):
        pass

    @abc.abstractmethod
    def create_user_company_details(
            self, user_id: str, user_company_details: typing.List[interface_dtos.UpdateUserCompanyDetailsDTO]):
        pass

    @abc.abstractmethod
    def remove_user_company_details(self, user_company_detail_ids: typing.List[str]):
        pass

    @abc.abstractmethod
    def create_or_update_user_address_details(
            self, user_id: str, address_details: typing.List[interface_dtos.UpdateAddressDetailsDTO]):
        pass

    @abc.abstractmethod
    def get_user_professional_skills_details(
            self, user_id: str) -> typing.List[storage_dtos.UserProfessionalSkillsDTO]:
        pass

    @abc.abstractmethod
    def update_user_professional_skills_details(
            self, user_professional_skills: typing.List[interface_dtos.SkillDetailsDTO]):
        pass

    @abc.abstractmethod
    def create_user_professional_skills_details(
            self, user_professional_skills: typing.List[storage_dtos.UserProfessionalSkillsDTO]):
        pass

    @abc.abstractmethod
    def remove_user_professional_skills(self, user_professional_skills_ids: typing.List[str]):
        pass

    @abc.abstractmethod
    def get_user_contact_details(
            self, user_id: str) -> storage_dtos.UserContactDetailsDTO:
        pass

    @abc.abstractmethod
    def create_or_update_user_guardian_details(
            self, user_guardian_details: interface_dtos.UserGuardianDetailsDTO):
        pass

    @abc.abstractmethod
    def get_user_guardian_details(self, user_id: str) -> storage_dtos.UserGuardianDetailsDTO:
        pass

    @abc.abstractmethod
    def get_users_preferred_languages(self, user_ids: typing.List[str]) \
            -> typing.Optional[typing.List[storage_dtos.UserPreferredLanguagesDTO]]:
        pass

    @abc.abstractmethod
    def get_users_contact_details(
            self, user_ids: typing.List[str]) -> typing.List[storage_dtos.UserContactDetailsDTO]:
        pass

    @abc.abstractmethod
    def create_or_update_user_social_profile_details(
            self, user_id: str, social_provider: typing.Optional[enums.SocialProvider],
            profile_link: typing.Optional[str]):
        pass
    
    @abc.abstractmethod
    def get_user_ids_for_phone_number(self, phone_number_dto: PhoneNumberDTO) -> typing.List[str]:
        pass

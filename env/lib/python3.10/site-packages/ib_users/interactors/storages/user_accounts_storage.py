import abc
import datetime
from dataclasses import dataclass
from typing import List

import typing

from ib_users.constants import otp_verification_constants
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithPhoneNumberDTO, CreateAccountWithEmailDTO
from ib_users.interactors.storages import dtos as storage_dtos
from ib_users.interactors.storages.user_account_base_storage import \
    UserAccountBaseStorage
from ib_users.models import UserAccount


@dataclass
class PhoneNumberAndPasswordDTO:
    phone_number_DTO: PhoneNumberDTO
    password: str


@dataclass
class UserNameAndPasswordDTO:
    username: str
    password: str


@dataclass
class EmailAndPasswordDTO:
    email: str
    password: str


@dataclass
class UserEmailAndPhoneNumberDTO:
    user_id: str
    email: str
    phone_number: PhoneNumberDTO


@dataclass
class UserAccountDTO:
    user_id: str
    username: str


@dataclass
class UserAccountWithProfileDTO:
    name: str
    username: str
    password: str
    email: str
    phone_number: str
    country_code: str


@dataclass
class UserProfileWithUsernameDTO:
    user_id: str
    name: str
    username: str
    email: str
    phone_number: str
    country_code: str


@dataclass
class UserAccountDTO:
    user_id: str
    username: str = None
    email: str = None
    phone_number: str = None
    country_code: str = None


@dataclass
class UserIdWithPhoneNumberDTO:
    user_id: str
    phone_number: str
    country_code: str


class UserAccountsStorage(UserAccountBaseStorage):
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def create_account_with_username(self, username: str, password: str) -> \
            str:
        pass

    @abc.abstractmethod
    def create_account_with_phone_number(
            self, create_account_dto: CreateAccountWithPhoneNumberDTO) -> str:
        pass

    @abc.abstractmethod
    def create_account_with_email(
            self, create_account_dto: CreateAccountWithEmailDTO) -> str:
        pass

    @abc.abstractmethod
    def check_user_exists_with_email(self, email: str):
        pass

    @abc.abstractmethod
    def check_user_exists_with_username(self, username: str):
        pass

    @abc.abstractmethod
    def check_user_exists_with_phone_number(self,
                                            phone_number_dto: PhoneNumberDTO):
        pass

    @abc.abstractmethod
    def get_user_id_given_username_and_password(
            self,
            username_login: UserNameAndPasswordDTO) -> str:
        pass

    @abc.abstractmethod
    def get_user_id_given_email_and_password(
            self,
            email_login: EmailAndPasswordDTO) -> str:
        pass

    @abc.abstractmethod
    def get_user_id_given_phone_number_and_password(
            self,
            phone_number_login: PhoneNumberAndPasswordDTO) -> str:
        pass

    @abc.abstractmethod
    def get_user_id_given_email(self, email: str) -> str:
        pass

    @abc.abstractmethod
    def get_existing_user_id_given_email(self, email:str) -> str:
        pass

    @abc.abstractmethod
    def get_user_id_given_phone_number(
            self,
            phone_number_dto: PhoneNumberDTO) -> str:
        pass

    @abc.abstractmethod
    def get_user_details_to_send_otp_given_email(
            self,
            email: str) -> UserEmailAndPhoneNumberDTO:
        pass

    @abc.abstractmethod
    def get_user_details_to_send_otp_given_phone_number(
            self,
            phone_number: PhoneNumberDTO) -> UserEmailAndPhoneNumberDTO:
        pass

    @abc.abstractmethod
    def update_username(self, current_username: str, new_username: str):
        pass

    @abc.abstractmethod
    def is_user_account_deactivated(self, user_id: str) -> bool:
        pass

    @abc.abstractmethod
    def activate_user(self, user_id: str):
        pass

    @abc.abstractmethod
    def deactivate_user_account(self, user_id: str):
        pass

    @abc.abstractmethod
    def is_user_id_exists(self, user_id: str) -> bool:
        pass

    @abc.abstractmethod
    def is_username_exists(self, username: str) -> bool:
        pass

    @abc.abstractmethod
    def link_phone_number_to_user(
            self, user_id: str, phone_number_dto: PhoneNumberDTO):
        pass

    @abc.abstractmethod
    def link_email_to_user(self, user_id: str, email: str):
        pass

    @abc.abstractmethod
    def check_current_password_matches(self, user_id: str,
                                       current_password: str):
        pass

    @abc.abstractmethod
    def update_user_password(self, user_id: str, new_password: str):
        pass

    @abc.abstractmethod
    def is_default_password_changed(self, user_id: str) -> bool:
        pass

    @abc.abstractmethod
    def get_user_given_username(self, username: str) -> UserAccount:
        pass

    @abc.abstractmethod
    def get_user_given_email(self, email: str) -> UserAccount:
        pass

    @abc.abstractmethod
    def get_user_given_phone_number(
            self, phone_number_dto: PhoneNumberDTO) -> UserAccount:
        pass

    @abc.abstractmethod
    def get_user_details_to_send_otp_given_username(self, username: str) -> \
            UserEmailAndPhoneNumberDTO:
        pass

    @abc.abstractmethod
    def get_user_details(self, user_id: str) -> UserProfileWithUsernameDTO:
        pass

    @abc.abstractmethod
    def get_user_account_details(self, user_id: str) -> UserAccountDTO:
        pass

    @abc.abstractmethod
    def get_user_details_for_usernames(self, usernames: List[str]) -> \
            [UserProfileWithUsernameDTO]:
        pass

    @abc.abstractmethod
    def get_user_email(self, user_id) -> str:
        pass

    @abc.abstractmethod
    def get_user_phone_number(self, user_id) -> str:
        pass

    @abc.abstractmethod
    def update_user_phone_number(self, user_id, phone_number, country_code):
        pass

    @abc.abstractmethod
    def update_email(self, user_id, email):
        pass

    @abc.abstractmethod
    def update_user_active_status(self, user_id: str, is_active: bool):
        pass

    @abc.abstractmethod
    def set_user_last_login(self, user_id: str):
        pass

    @abc.abstractmethod
    def get_all_users_accounts(self) -> List[UserAccountDTO]:
        pass

    @abc.abstractmethod
    def check_is_user_ids_already_exists(self, user_ids: List[str]):
        pass

    @abc.abstractmethod
    def get_user_id_give_username(self, username: str):
        pass

    def get_user_ids_for_given_phone_numbers(
            self, phone_number_with_country_code_dtos: typing.List[
                PhoneNumberDTO]) -> typing.List[UserIdWithPhoneNumberDTO]:
        pass

    # FIXME: Need to move to the appropriate storage
    def get_message_template_string(self, message_template_id: str) -> str:
        pass

    @abc.abstractmethod
    def get_user_latest_update_phone_number_log_details(self, user_id: str)\
            -> storage_dtos.UserAccountUpdatePhoneLogWithCreationDetailsDTO:
        pass

    @abc.abstractmethod
    def create_user_account_phone_number_update_log_details(
            self, user_account_update_phone_details_dto:
            storage_dtos.UserAccountUpdatePhoneDetailsLogDTO):
        pass

    @abc.abstractmethod
    def update_user_update_phone_number_verification_status(
            self, user_account_update_phone_details_log_id: str,
            verification_status: otp_verification_constants.VerificationStatus,
            failure_remarks: typing.Optional[str],
            verified_datetime: typing.Optional[datetime.datetime]):
        pass

    @abc.abstractmethod
    def get_users_phone_number_update_logs(
            self, user_ids: typing.List[str],
            verification_status: otp_verification_constants.VerificationStatus
            ) -> typing.List[storage_dtos.UserAccountUpdatePhoneDetailsLogDTO]:
        pass

    @abc.abstractmethod
    def get_users_accounts_details_to_update(self, user_ids: typing.List[str]) -> \
            typing.List[UserAccountDTO]:
        pass

from ib_users.exceptions.custom_exception_constants import \
    INVALID_REQUEST_ID, INVALID_FINGERPRINT_JS_WEBHOOK_CREDENTIALS
from ib_users.interactors.dtos import FingerprintJsWebhookDetailsDTO
from ib_users.interactors.presenters.\
    create_fingerprint_js_webhook_details_presenter import \
    CreateFingerprintJsWebhookDetailsPresenter
from ib_users.interactors.storages.fingerprint_js_storage import \
    FingerprintJsStorage
from ib_users.validators.base_validator import CustomException


class CreateFingerprintJsWebhookDetailsInteractor:
    def __init__(
            self, fingerprint_js_storage:  FingerprintJsStorage):
        self.fingerprint_js_storage = fingerprint_js_storage

    def create_fingerprint_js_webhook_details_wrapper(
            self, webhook_details_dto: FingerprintJsWebhookDetailsDTO,
            presenter: CreateFingerprintJsWebhookDetailsPresenter):
        try:
            self.create_fingerprint_js_webhook_details(webhook_details_dto)
        except CustomException as err:
            return presenter.get_custom_exception_response(err)

        return presenter.get_success_response()

    def create_fingerprint_js_webhook_details(
            self, webhook_details_dto: FingerprintJsWebhookDetailsDTO):
        self._validate_webhook_credentials(
            webhook_details_dto.username, webhook_details_dto.password)

        self._validate_request_id(webhook_details_dto.request_id)

        self.fingerprint_js_storage.create_fingerprint_js_webhook_details(
            webhook_details_dto)

    @staticmethod
    def _validate_webhook_credentials(username: str, password: str):
        from django.conf import settings
        fingerprint_js_webhook_username = \
            settings.FINGERPRINT_JS_WEBHOOK_USERNAME
        fingerprint_js_webhook_password = \
            settings.FINGERPRINT_JS_WEBHOOK_PASSWORD

        if username != fingerprint_js_webhook_username or \
                password != fingerprint_js_webhook_password:
            raise CustomException.from_exception_message_DTO(
                INVALID_FINGERPRINT_JS_WEBHOOK_CREDENTIALS)

    @staticmethod
    def _validate_request_id(request_id: str):
        if not request_id or type(request_id) != str:
            raise CustomException.from_exception_message_DTO(
                INVALID_REQUEST_ID)

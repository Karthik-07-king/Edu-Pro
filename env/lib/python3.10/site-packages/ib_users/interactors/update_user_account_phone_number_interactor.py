import datetime
import typing

from ib_common.date_time_utils.convert_datetime_to_local_string import \
    convert_datetime_to_local_string
from django.conf import settings

from ib_users.constants import otp_verification_constants
from ib_users.constants.config import DEFAULT_DATETIME_FORMAT
from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.exceptions import user_account_exceptions
from ib_users.exceptions import custom_exception_constants
from ib_users.interactors.DTOs import common_dtos as interactor_common_dtos
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages import user_accounts_storage
from ib_users.interfaces import dtos as interface_dtos
from ib_users.validators import base_validator
from ib_users.interactors.storages import dtos as storage_dtos
from ib_users.interactors.dtos import UserIdWiseCanUpdatePhoneNumberDetailsDTO


class UpdateUserAccountPhoneNumberInteractor:
    def __init__(self, user_account_storage: UserAccountsStorage):
        self.user_account_storage = user_account_storage

    def update_user_account_phone_number(
            self, update_user_account_phone_number_dto:
            interface_dtos.UpdateUserAccountPhoneNumberDTO):

        user_id = update_user_account_phone_number_dto.user_id
        phone_number = update_user_account_phone_number_dto.phone_number
        country_code = update_user_account_phone_number_dto.country_code

        self._validate_phone_number_details(phone_number, country_code)
        self._validate_user_account_details(user_id)

        user_account_dto = self.user_account_storage.get_user_account_details(
            user_id)
        self._validate_user_phone_number_details(
            user_account_dto, phone_number, country_code)
        self._validate_is_user_eligible_for_phone_number_update(user_id)

        user_account_update_phone_details_dto = \
            storage_dtos.UserAccountUpdatePhoneDetailsLogDTO(
                user_id=user_account_dto.user_id,
                old_phone_number=user_account_dto.phone_number,
                old_country_code=user_account_dto.country_code,
                new_phone_number=phone_number,
                new_country_code=country_code,
                failure_remarks=None,
                change_reason=
                update_user_account_phone_number_dto.reason_to_change,
                verification_status=otp_verification_constants.
                VerificationStatus.VERIFICATION_IN_PROGRESS.value,
                verified_datetime=None)

        self._send_otp_to_verify_phone_details(
            update_user_account_phone_number_dto)

        self.user_account_storage. \
            create_user_account_phone_number_update_log_details(
                user_account_update_phone_details_dto)

    def _validate_user_account_details(self, user_id: str):

        is_user_id_exists = self.user_account_storage.is_user_id_exists(user_id)
        if not is_user_id_exists:
            raise user_account_exceptions.InvalidUserIdException()

        is_user_active = self.user_account_storage.is_user_account_active(
            user_id)
        if not is_user_active:
            raise base_validator.CustomException.from_exception_message_DTO(
                custom_exception_constants.USER_ACCOUNT_IS_DEACTIVATED)

    def _validate_user_phone_number_details(
            self, user_account_dto: user_accounts_storage.UserAccountDTO,
            phone_number: str, country_code: str):

        existing_phone_number = user_account_dto.phone_number
        existing_country_code = user_account_dto.country_code

        if (existing_phone_number, existing_country_code) == \
                (phone_number, country_code):
            raise base_validator.CustomException.from_exception_message_DTO(
                custom_exception_constants.
                USER_NEW_PHONE_DETAILS_IS_SAME_AS_EXISTING_PHONE_DETAILS)
        if not settings.SWAP_PHONE_NUMBERS_WHILE_UPDATING:
            self.user_account_storage.check_user_exists_with_phone_number(
                phone_number_dto=interactor_common_dtos.PhoneNumberDTO(
                    phone_number=phone_number, country_code=country_code))

    @staticmethod
    def _validate_phone_number_details(
            phone_number: str, country_code: str):

        from ib_users.validators.phone_number_validator_impl \
            import PhoneNumberValidatorImpl

        phone_numbers_validator = PhoneNumberValidatorImpl()

        phone_numbers_validator.validate(
            interactor_common_dtos.PhoneNumberDTO(
                phone_number=phone_number,
                country_code=country_code
            )
        )

    def _validate_is_user_eligible_for_phone_number_update(
            self, user_id: str):
        is_user_can_update_phone_number_details = self.get_is_users_can_update_phone_number_details(
            user_ids=[user_id])[0]
        if not is_user_can_update_phone_number_details.can_update_phone_number:
            can_update_after_datetime_str = convert_datetime_to_local_string(
                is_user_can_update_phone_number_details.can_update_phone_number_after_datetime,
                format_=DEFAULT_DATETIME_FORMAT)
            latest_phone_number_update_datetime_str = convert_datetime_to_local_string(
                is_user_can_update_phone_number_details.latest_phone_number_update_datetime,
                format_=DEFAULT_DATETIME_FORMAT)
            exception_dto = custom_exception_constants. \
                UPDATE_USER_PHONE_NUMBER_INTERVAL_NOT_COMPLETED

            exception_dto.message = exception_dto.message.format(
                latest_phone_number_update_datetime_str, can_update_after_datetime_str)
            raise base_validator.CustomException.from_exception_message_DTO(
                exception_dto)

    def get_is_users_can_update_phone_number_details(
            self, user_ids: typing.List[str]):
        user_id_wise_latest_phone_number_update_datetime = \
            self._get_user_id_wise_latest_successful_phone_number_update_datetime(user_ids=user_ids)

        user_can_update_phone_number_details = []
        for each_user_id in user_ids:
            is_user_can_update_phone_number_details = self._get_is_user_can_update_phone_number_details(
                user_id_wise_latest_phone_number_update_datetime.get(each_user_id))
            user_can_update_phone_number_details.append(
                UserIdWiseCanUpdatePhoneNumberDetailsDTO(
                    user_id=each_user_id,
                    can_update_phone_number=is_user_can_update_phone_number_details[
                        'can_update_phone_number'],
                    can_update_phone_number_after_datetime=is_user_can_update_phone_number_details[
                        'can_update_phone_number_after_datetime'],
                    latest_phone_number_update_datetime=is_user_can_update_phone_number_details[
                        'latest_phone_number_update_datetime']
                )
            )
        return user_can_update_phone_number_details

    def _get_user_id_wise_latest_successful_phone_number_update_datetime(
            self, user_ids: typing.List[str]) -> typing.Dict[str, datetime.datetime]:
        from ib_users.constants import otp_verification_constants
        from collections import defaultdict

        update_phone_number_logs = self.user_account_storage.get_users_phone_number_update_logs(
            user_ids=user_ids,
            verification_status=otp_verification_constants.VerificationStatus.VERIFIED.value)
        user_id_wise_update_phone_number_logs = defaultdict(list)
        for update_phone_number_log in update_phone_number_logs:
            user_id_wise_update_phone_number_logs[update_phone_number_log.user_id].append(
                update_phone_number_log)

        user_id_wise_latest_phone_number_update_datetime = {}
        for user_id, update_phone_number_logs_for_user in user_id_wise_update_phone_number_logs.items():
            update_phone_number_logs_for_user.sort(
                key=lambda phone_number_update_log: phone_number_update_log.verified_datetime, reverse=True)
            latest_phone_number_update_log = update_phone_number_logs_for_user[0]
            user_id_wise_latest_phone_number_update_datetime[user_id] = \
                latest_phone_number_update_log.verified_datetime

        return user_id_wise_latest_phone_number_update_datetime

    @staticmethod
    def _get_is_user_can_update_phone_number_details(
            latest_phone_number_update_datetime: typing.Optional[datetime.datetime]):
        from ib_common.date_time_utils.get_current_local_date_time import \
            get_current_local_date_time
        from django.conf import settings
        from dateutil.relativedelta import relativedelta

        current_datetime = get_current_local_date_time()
        can_update_phone_number = True
        can_update_phone_number_after_datetime = None
        if latest_phone_number_update_datetime:
            days_diff = (current_datetime - latest_phone_number_update_datetime).days
            update_phone_number_interval_in_days = \
                settings.UPDATE_USER_ACCOUNT_PHONE_NUMBER_INTERVAL_IN_DAYS
            if days_diff < update_phone_number_interval_in_days:
                can_update_phone_number = False
                can_update_phone_number_after_datetime = latest_phone_number_update_datetime + relativedelta(
                    days=update_phone_number_interval_in_days)

        return {
            'can_update_phone_number': can_update_phone_number,
            'can_update_phone_number_after_datetime': can_update_phone_number_after_datetime,
            'latest_phone_number_update_datetime': latest_phone_number_update_datetime
        }

    @staticmethod
    def _raise_update_user_phone_interval_not_completed(
            interval_in_days: int, last_update_datetime: datetime.datetime):

        last_update_datetime_str = convert_datetime_to_local_string(
            last_update_datetime, format_=DEFAULT_DATETIME_FORMAT)
        can_update_at_datetime = \
            last_update_datetime + datetime.timedelta(
                days=interval_in_days)
        can_update_at_datetime_str = convert_datetime_to_local_string(
            can_update_at_datetime, format_=DEFAULT_DATETIME_FORMAT)
        exception_dto = custom_exception_constants. \
            UPDATE_USER_PHONE_NUMBER_INTERVAL_NOT_COMPLETED

        exception_dto.message = exception_dto.message.format(
            last_update_datetime_str, can_update_at_datetime_str
        )
        raise base_validator.CustomException.from_exception_message_DTO(
            exception_dto)

    def _send_otp_to_verify_phone_details(
            self, update_user_account_phone_number_dto:
            interface_dtos.UpdateUserAccountPhoneNumberDTO):

        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.constants.sms_constants import INDIA_COUNTRY_CODE
        from django.conf import settings

        send_otp_through = \
            update_user_account_phone_number_dto.send_otp_through
        if not send_otp_through:
            send_otp_through = \
                otp_verification_constants.SendOTPThrough.SMS

        verify_otp_interactor = VerifyThroughOTPInteractor(
            otp_verification_constants.VerificationType
            .VERIFY_UPDATE_PHONE_NUMBER_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_user_account_phone_number_dto.phone_number,
            country_code=update_user_account_phone_number_dto.country_code,
        )

        sms_template = \
            OTPMessageFormatConstants.FORMAT_TO_VERIFY_UPDATE_PHONE_NUMBER
        if phone_number_dto.country_code != INDIA_COUNTRY_CODE:
            if settings.USE_TWILIO_FOR_INTERNATIONAL_NUMBERS:
                sms_template = self.user_account_storage.\
                    get_message_template_string(
                        message_template_id=
                        settings.TWILIO_UPDATE_PHONE_NUMBER_TEMPLATE_ID)

        call_template = settings.VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE

        otp_service.send_otp_to_user_phone_number(
            phone_number=phone_number_dto,
            template=sms_template,
            call_template=call_template,
            send_otp_through=send_otp_through
        )

from ib_users.interfaces import enums
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
from ib_users.interfaces import dtos as interface_dtos
from ib_users.interfaces.enums import GuardianRelation
from ib_users.constants.user_profile import exception_messages


class CreateOrUpdateUserGuardianDetailsInteractor:

    def __init__(self, user_profile_storage: UserProfileStorage,
                 user_account_storage: UserAccountsStorage):
        self.user_profile_storage = user_profile_storage
        self.user_account_storage = user_account_storage

    def create_or_update_user_guardian_details(
            self, user_guardian_details: interface_dtos.UserGuardianDetailsDTO):
        self._validate_user_guardian_details(
            user_guardian_details=user_guardian_details)

        if user_guardian_details.whatsapp_mobile_number and \
                user_guardian_details.whatsapp_mobile_country_code:
            user_guardian_details.have_whatsapp = True
        self.user_profile_storage.create_or_update_user_guardian_details(
            user_guardian_details=user_guardian_details)

    def _validate_user_guardian_details(
            self, user_guardian_details: interface_dtos.UserGuardianDetailsDTO):
        from ib_users.exceptions.invalid_phone_number_exception import \
            InvalidPhoneNumberException
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidGuardianDetailsException

        self._validate_user_id(user_id=user_guardian_details.user_id)

        invalid_relation, invalid_email, invalid_phone_number, \
            invalid_whatsapp_mobile_number = None, None, None, None
        if user_guardian_details.relation:
            invalid_relation = self._get_invalid_guardian_relation_details(
                relation=user_guardian_details.relation)
        if user_guardian_details.job_role_id:
            self._validate_job_role_id(job_role_id=user_guardian_details.job_role_id)
        if user_guardian_details.email:
            invalid_email = self._get_invalid_email_details(email=user_guardian_details.email)
        if user_guardian_details.phone_number and user_guardian_details.country_code:
            try:
                self._validate_contact_details(
                    phone_number=user_guardian_details.phone_number,
                    country_code=user_guardian_details.country_code)
            except InvalidPhoneNumberException:
                invalid_phone_number = interface_dtos.InvalidValueDetailsDTO(
                    value=user_guardian_details.phone_number,
                    error_code=exception_messages.INVALID_PHONE_NUMBER[1],
                    error_message=exception_messages.INVALID_PHONE_NUMBER[0])

        if user_guardian_details.whatsapp_mobile_number and \
                user_guardian_details.whatsapp_mobile_country_code:
            try:
                self._validate_contact_details(
                    phone_number=user_guardian_details.whatsapp_mobile_number,
                    country_code=user_guardian_details.whatsapp_mobile_country_code)
            except InvalidPhoneNumberException:
                invalid_whatsapp_mobile_number = interface_dtos.InvalidValueDetailsDTO(
                    value=user_guardian_details.whatsapp_mobile_number,
                    error_code=exception_messages.INVALID_WHATSAPP_MOBILE_NUMBER[1],
                    error_message=exception_messages.INVALID_WHATSAPP_MOBILE_NUMBER[0])

        if invalid_relation or invalid_email or invalid_phone_number or \
                invalid_whatsapp_mobile_number:
            invalid_guardian_details = interface_dtos.InvalidUserGuardianDetailsDTO(
                relation=invalid_relation,
                email=invalid_email,
                phone_number=invalid_phone_number,
                whatsapp_mobile_number=invalid_whatsapp_mobile_number)
            raise InvalidGuardianDetailsException(
                invalid_guardian_details=invalid_guardian_details)

    def _validate_user_id(self, user_id: str):
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        is_user_id_exists = self.user_account_storage.is_user_id_exists(
            user_id=user_id)
        if not is_user_id_exists:
            raise InvalidUserIdException()

    @staticmethod
    def _get_invalid_guardian_relation_details(relation: enums.GuardianRelation):
        invalid_value_details_dto = None
        valid_relations = GuardianRelation.get_list_of_values()
        if relation not in valid_relations:
            invalid_value_details_dto = interface_dtos.InvalidValueDetailsDTO(
                value=relation,
                error_code=exception_messages.INVALID_GUARDIAN_RELATION[1],
                error_message=exception_messages.INVALID_GUARDIAN_RELATION[0])

        return invalid_value_details_dto

    def _validate_job_role_id(self, job_role_id: str):
        # TODO: Add job_role_id validation
        pass

    @staticmethod
    def _get_invalid_email_details(email: str):
        from ib_users.validators.email_validator import EmailValidator
        from ib_users.constants.custom_exception_messages import INVALID_EMAIL
        from ib_users.validators.base_validator import CustomException

        invalid_value_details_dto = None
        try:
            EmailValidator.validate(value=email)
        except CustomException:
            invalid_value_details_dto = interface_dtos.InvalidValueDetailsDTO(
                value=email,
                error_code=INVALID_EMAIL.code,
                error_message=INVALID_EMAIL.message)

        return invalid_value_details_dto

    @staticmethod
    def _validate_contact_details(
            country_code: str, phone_number: str):
        from ib_users.interactors.storages.user_accounts_storage import \
            PhoneNumberDTO
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        phone_number_dto = PhoneNumberDTO(
            country_code=country_code, phone_number=phone_number)
        phone_number_validator = PhoneNumberValidatorImpl()
        phone_number_validator.validate(phone_number_DTO=phone_number_dto)

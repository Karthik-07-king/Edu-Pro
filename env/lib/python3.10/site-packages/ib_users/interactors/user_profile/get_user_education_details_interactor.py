import typing

from ib_users.interfaces import dtos as interface_dtos
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
from ib_users.interactors.storages.user_profile_storage import UserProfileStorage


class GetUserEducationDetailsInteractor:

    def __init__(self, user_profile_storage: UserProfileStorage,
                 user_account_storage: UserAccountsStorage):
        self.user_profile_storage = user_profile_storage
        self.user_account_storage = user_account_storage

    def get_user_education_details(
            self, user_id: str) -> interface_dtos.UserEducationDetailsDTO:
        self._validate_user_id(user_id=user_id)
        education_details = self._get_user_education_details(user_id=user_id)

        return education_details

    def _validate_user_id(self, user_id: str):
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        is_user_id_exists = self.user_account_storage.is_user_id_exists(
            user_id=user_id)
        if not is_user_id_exists:
            raise InvalidUserIdException()

    def _get_user_education_details(
            self, user_id: str) -> interface_dtos.UserEducationDetailsDTO:
        user_ssc_details_dto = self._get_ssc_details(user_id=user_id)
        user_intermediate_details_dto = self._get_intermediate_details(
            user_id=user_id)
        user_degree_details_dtos = self._get_degree_details(user_id=user_id)

        return interface_dtos.UserEducationDetailsDTO(
            user_id=user_id, ssc_details=user_ssc_details_dto,
            intermediate_details=user_intermediate_details_dto,
            degree_details=user_degree_details_dtos)

    def _get_ssc_details(
            self, user_id: str) -> typing.Optional[interface_dtos.SSCDetailsDTO]:
        from ib_users.exceptions.user_profile_exceptions import \
            UserSSCDetailsDoesNotExistException
        from ib_users.constants.user_profile.constants import \
            SSC_BOARD_NAME_ENUM_WITH_BOARD_NAME

        try:
            user_ssc_details = self.user_profile_storage.get_user_ssc_details(
                user_id=user_id)
        except UserSSCDetailsDoesNotExistException:
            user_ssc_details = None

        ssc_details_dto = None
        if user_ssc_details:
            board_name_enum = user_ssc_details.board_name_enum
            board_name = None
            if board_name_enum:
                board_name = SSC_BOARD_NAME_ENUM_WITH_BOARD_NAME[board_name_enum]
            ssc_details_dto = interface_dtos.SSCDetailsDTO(
                board_details=interface_dtos.BoardDetailsDTO(
                    board_name=board_name, board_name_enum=board_name_enum),
                institute_details=interface_dtos.InstituteDetailsDTO(
                    institute_id=user_ssc_details.institute_id,
                    institute_name=user_ssc_details.institute_name),
                other_institute_name=user_ssc_details.other_institute_name,
                completion_status=user_ssc_details.completion_status,
                score_type=user_ssc_details.score_type,
                score=user_ssc_details.score,
                year_of_completion=user_ssc_details.year_of_completion)

        return ssc_details_dto

    def _get_intermediate_details(
            self, user_id: str) -> typing.Optional[interface_dtos.IntermediateDetailsDTO]:
        from ib_users.exceptions.user_profile_exceptions import \
            UserIntermediateDetailsDoesNotExistException

        try:
            user_intermediate_details = self.user_profile_storage. \
                get_user_intermediate_details(user_id=user_id)
        except UserIntermediateDetailsDoesNotExistException:
            user_intermediate_details = None

        intermediate_details_dto = None
        if user_intermediate_details:
            intermediate_details_dto = interface_dtos.IntermediateDetailsDTO(
                course_details=interface_dtos.CourseDetailsDTO(
                    course_id=user_intermediate_details.intermediate_course_id,
                    course_name=user_intermediate_details.course_name),
                other_course_name=user_intermediate_details.other_intermediate_course,
                institute_details=interface_dtos.InstituteDetailsDTO(
                    institute_id=user_intermediate_details.institute_id,
                    institute_name=user_intermediate_details.institute_name),
                other_institute_name=user_intermediate_details.other_institute_name,
                completion_status=user_intermediate_details.completion_status,
                score_type=user_intermediate_details.score_type,
                score=user_intermediate_details.score,
                year_of_completion=user_intermediate_details.year_of_completion)

        return intermediate_details_dto

    def _get_degree_details(
            self, user_id: str) -> typing.List[interface_dtos.DegreeDetailsDTO]:
        user_degree_details = self.user_profile_storage.\
            get_user_degree_details(user_id=user_id)

        user_degree_details_dtos = [
            interface_dtos.DegreeDetailsDTO(
                id=each_degree_details.id,
                type=each_degree_details.type,
                course_details=interface_dtos.CourseDetailsDTO(
                    course_id=each_degree_details.course_id,
                    course_name=each_degree_details.course_name),
                other_course_name=each_degree_details.other_course_name,
                completion_status=each_degree_details.completion_status,
                department_details=interface_dtos.DepartmentDetailsDTO(
                    department_id=each_degree_details.department_id,
                    department_name=each_degree_details.department_name),
                score_type=each_degree_details.score_type,
                score=each_degree_details.score,
                start_year=each_degree_details.start_year,
                end_year=each_degree_details.end_year,
                no_of_backlogs=each_degree_details.no_of_backlogs,
                institute_details=interface_dtos.InstituteDetailsDTO(
                    institute_id=each_degree_details.institute_id,
                    institute_name=each_degree_details.institute_name),
                other_institute_name=each_degree_details.other_institute_name,
                institute_pin_code=each_degree_details.institute_pin_code,
                institute_city_details=interface_dtos.CityDetailsDTO(
                    city_id=each_degree_details.institute_city_id,
                    city_name=each_degree_details.institute_city_name),
                expected_date_to_clear_backlogs=each_degree_details.expected_date_to_clear_backlogs,
                institute_district_details=interface_dtos.DistrictDetailsDTO(
                    district_id=each_degree_details.institute_district_id,
                    district_name=each_degree_details.institute_district_name),
                institute_state_details=interface_dtos.StateDetailsDTO(
                    state_id=each_degree_details.institute_state_id,
                    state_name=each_degree_details.institute_state_name),
                other_institute_city_name=each_degree_details.other_institute_city_name,
                other_department_name=each_degree_details.other_department_name,
                institute_country_details=interface_dtos.CountryDetailsDTO(
                    country_id=each_degree_details.institute_country_id,
                    country_name=each_degree_details.institute_country_name)
            )
            for each_degree_details in user_degree_details
        ]

        return user_degree_details_dtos

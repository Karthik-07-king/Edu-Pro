import typing

from ib_users.interfaces import dtos as interface_dtos
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
from ib_users.interactors.storages.user_profile_storage import UserProfileStorage


class GetUserAddressDetailsInteractor:

    def __init__(self, user_profile_storage: UserProfileStorage,
                 user_account_storage: UserAccountsStorage):
        self.user_profile_storage = user_profile_storage
        self.user_account_storage = user_account_storage

    def get_user_address_details(
            self, user_id: str) -> typing.List[interface_dtos.AddressDetailsDTO]:
        self._validate_user_id(user_id=user_id)
        address_details = self._get_address_details(user_id=user_id)

        return address_details

    def _validate_user_id(self, user_id: str):
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        is_user_id_exists = self.user_account_storage.is_user_id_exists(
            user_id=user_id)
        if not is_user_id_exists:
            raise InvalidUserIdException()

    def _get_address_details(self, user_id: str) \
            -> typing.List[interface_dtos.AddressDetailsDTO]:
        user_address_details = self.user_profile_storage.get_user_address_details(
            user_id=user_id)

        address_details_dtos = [
            interface_dtos.AddressDetailsDTO(
                address_type=each.address_type, address_1=each.address_1,
                address_2=each.address_2, pin_code=each.pin_code,
                other_city_name=each.other_city_name,
                city_details=interface_dtos.CityDetailsDTO(
                    city_id=each.city_id, city_name=each.city_name),
                district_details=interface_dtos.DistrictDetailsDTO(
                    district_id=each.district_id, district_name=each.district_name),
                state_details=interface_dtos.StateDetailsDTO(
                    state_id=each.state_id, state_name=each.state_name),
                country_details=interface_dtos.CountryDetailsDTO(
                    country_id=each.country_id, country_name=each.country_name)
            )
            for each in user_address_details
        ]

        return address_details_dtos

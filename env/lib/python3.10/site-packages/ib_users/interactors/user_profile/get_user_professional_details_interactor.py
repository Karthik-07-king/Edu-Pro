import typing

from ib_users.interfaces import dtos as interface_dtos
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
from ib_users.interactors.storages.user_profile_storage import UserProfileStorage


class GetUserProfessionalDetailsInteractor:

    def __init__(self, user_profile_storage: UserProfileStorage,
                 user_account_storage: UserAccountsStorage):
        self.user_profile_storage = user_profile_storage
        self.user_account_storage = user_account_storage

    def get_user_professional_details(
            self, user_id: str) -> interface_dtos.UserProfessionalDetailsDTO:
        self._validate_user_id(user_id=user_id)
        professional_details = self._get_user_professional_details(user_id=user_id)

        return professional_details

    def _validate_user_id(self, user_id: str):
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        is_user_id_exists = self.user_account_storage.is_user_id_exists(
            user_id=user_id)
        if not is_user_id_exists:
            raise InvalidUserIdException()

    def _get_user_professional_details(
            self, user_id: str) -> interface_dtos.UserProfessionalDetailsDTO:
        current_professional_details = self. \
            _get_current_professional_details(user_id=user_id)
        company_details = self._get_company_details(user_id=user_id)
        work_experience_details = self._get_work_experience_details(
            user_id=user_id)

        return interface_dtos.UserProfessionalDetailsDTO(
            user_id=user_id, work_experience_details=work_experience_details,
            company_details=company_details,
            current_professional_details=current_professional_details)

    def _get_current_professional_details(
            self, user_id: str) -> typing.Optional[interface_dtos.CurrentProfessionalDetailsDTO]:
        from ib_users.exceptions.user_profile_exceptions import \
            UserCurrentProfessionalDetailsDoesNotExistException

        try:
            user_current_professional_details = self.user_profile_storage. \
                get_user_current_professional_details(user_id=user_id)
        except UserCurrentProfessionalDetailsDoesNotExistException:
            user_current_professional_details = None

        current_professional_details_dto, job_role_details, \
            other_job_role_name, higher_education_course_type, \
            have_work_experience = None, None, None, None, None
        if user_current_professional_details:
            job_role_details = interface_dtos.JobRoleDetailsDTO(
                job_role_id=user_current_professional_details.job_role_id,
                job_role_name=user_current_professional_details.job_role_name)
            other_job_role_name = user_current_professional_details.other_job_role_name
            higher_education_course_type = user_current_professional_details.higher_education_course_type
            have_work_experience = user_current_professional_details.have_work_experience

        user_professional_skills_details = self.user_profile_storage.\
            get_user_professional_skills_details(user_id=user_id)
        skill_details = list()
        for each_skill_details in user_professional_skills_details:
            skill_details.append(
                interface_dtos.SkillDetailsDTO(
                    skill_name=each_skill_details.skill_name, skill_id=each_skill_details.skill_id,
                    id=each_skill_details.id, other_skill_name=each_skill_details.other_skill_name)
            )

        current_professional_details_dto = interface_dtos.CurrentProfessionalDetailsDTO(
            job_role_details=job_role_details, skill_details=skill_details,
            higher_education_course_type=higher_education_course_type,
            other_job_role_name=other_job_role_name, have_work_experience=have_work_experience)

        return current_professional_details_dto

    def _get_company_details(self, user_id: str)\
            -> typing.List[interface_dtos.CompanyDetailsDTO]:

        user_company_details_dtos = self.user_profile_storage. \
            get_user_company_details(user_id=user_id)

        company_details_dtos = [
            interface_dtos.CompanyDetailsDTO(
                id=user_company_details.id,
                company_details=interface_dtos.CompanyIdAndNameDTO(
                    company_id=user_company_details.company_id,
                    company_name=user_company_details.company_name),
                other_company_name=user_company_details.other_company_name,
                company_city_details=interface_dtos.CityDetailsDTO(
                    city_id=user_company_details.company_city_id,
                    city_name=user_company_details.company_city_name),
                job_role_details=interface_dtos.JobRoleDetailsDTO(
                    job_role_id=user_company_details.job_role_id,
                    job_role_name=user_company_details.job_role_name),
                other_job_role_name=user_company_details.other_job_role_name,
                is_currently_working_in_this_company=user_company_details.
                is_currently_working_in_this_company,
                start_date=user_company_details.start_date,
                end_date=user_company_details.end_date,
                ctc=user_company_details.ctc,
                no_of_months_for_notice_period=user_company_details. \
                no_of_months_for_notice_period,
                other_company_city_name=user_company_details.other_company_city_name)
            for user_company_details in user_company_details_dtos
        ]

        return company_details_dtos

    def _get_work_experience_details(
            self, user_id: str) -> typing.Optional[interface_dtos.WorkExperienceDetailsDTO]:
        from ib_users.exceptions.user_profile_exceptions import \
            UserWorkExperienceDetailsDoesNotExistException

        try:
            user_work_experience_details = self.user_profile_storage. \
                get_user_work_experience_details(user_id=user_id)
        except UserWorkExperienceDetailsDoesNotExistException:
            user_work_experience_details = None

        work_experience_details_dto = None
        if user_work_experience_details:
            work_experience_details_dto = interface_dtos.WorkExperienceDetailsDTO(
                no_of_years_experience_in_it_sector=user_work_experience_details.no_of_years_experience_in_it_sector,
                no_of_years_experience_in_non_it_sector=user_work_experience_details.no_of_years_experience_in_non_it_sector)

        return work_experience_details_dto


import typing

from ib_users.interfaces import dtos as interface_dtos
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
from ib_users.interactors.storages.user_profile_storage import UserProfileStorage


class GetUserProfileCompleteDetailsInteractor:

    def __init__(self, user_profile_storage: UserProfileStorage,
                 user_account_storage: UserAccountsStorage):
        self.user_profile_storage = user_profile_storage
        self.user_account_storage = user_account_storage

    def get_user_profile_complete_details(self, user_id: str):
        self._validate_user_id(user_id=user_id)
        profile_details = self._get_user_profile_details(user_id=user_id)
        address_details = self._get_address_details(user_id=user_id)
        education_details = self._get_user_education_details(user_id=user_id)
        professional_details = self._get_user_professional_details(user_id=user_id)
        social_profile_details = self._get_user_social_profile_details(user_id=user_id)
        guardian_details = self._get_user_guardian_details(user_id=user_id)

        return interface_dtos.UserCompleteProfileDetailsDTO(
            user_id=user_id, professional_details=professional_details,
            address_details=address_details, education_details=education_details,
            profile_details=profile_details,
            social_profile_details=social_profile_details,
            guardian_details=guardian_details)

    def _validate_user_id(self, user_id: str):
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        is_user_id_exists = self.user_account_storage.is_user_id_exists(
            user_id=user_id)
        if not is_user_id_exists:
            raise InvalidUserIdException()

    def _get_user_profile_details(
            self, user_id: str) -> interface_dtos.ProfileDetailsDTO:
        from ib_users.interactors.user_profile.get_user_profiles_with_contact_details_interactor import \
            GetUserProfilesWithContactDetailsInteractor

        interactor = GetUserProfilesWithContactDetailsInteractor(
            user_profile_storage=self.user_profile_storage,
            user_account_storage=self.user_account_storage)
        return interactor.get_user_profiles_with_contact_details(
            user_ids=[user_id])[0]

    def _get_user_education_details(
            self, user_id: str) -> interface_dtos.UserEducationDetailsDTO:
        from ib_users.interactors.user_profile.\
            get_user_education_details_interactor import \
            GetUserEducationDetailsInteractor

        interactor = GetUserEducationDetailsInteractor(
            user_profile_storage=self.user_profile_storage,
            user_account_storage=self.user_account_storage)
        user_education_details = interactor.get_user_education_details(
            user_id=user_id)

        return user_education_details

    def _get_address_details(self, user_id: str) \
            -> typing.List[interface_dtos.AddressDetailsDTO]:
        from ib_users.interactors.user_profile.get_user_address_details_interactor\
            import GetUserAddressDetailsInteractor

        interactor = GetUserAddressDetailsInteractor(
            user_profile_storage=self.user_profile_storage,
            user_account_storage=self.user_account_storage)
        user_address_details = interactor.get_user_address_details(
            user_id=user_id)

        return user_address_details

    def _get_user_professional_details(
            self, user_id: str) -> interface_dtos.UserProfessionalDetailsDTO:
        from ib_users.interactors.user_profile.\
            get_user_professional_details_interactor import \
            GetUserProfessionalDetailsInteractor
        interactor = GetUserProfessionalDetailsInteractor(
            user_profile_storage=self.user_profile_storage,
            user_account_storage=self.user_account_storage)

        user_professional_details = interactor.get_user_professional_details(
            user_id=user_id)

        return user_professional_details

    def _get_user_social_profile_details(
            self, user_id: str) -> typing.Optional[
            typing.List[interface_dtos.SocialProfileDetailsDTO]]:
        user_social_profile_details = self.user_profile_storage.\
            get_user_social_profile_details(user_id=user_id)

        return [
            interface_dtos.SocialProfileDetailsDTO(
                id=each.id,
                social_provider=each.social_provider,
                profile_link=each.profile_link
            )
            for each in user_social_profile_details
        ]

    def _get_user_guardian_details(
            self, user_id: str) -> typing.Optional[interface_dtos.UserGuardianDetailsDTO]:
        from ib_users.interactors.user_profile.get_user_guardian_details_interactor import \
            GetUserGuardianDetailsInteractor
        from ib_users.exceptions.user_profile_exceptions import \
            UserGuardianDetailsDoesNotExistsException
        from dataclasses import asdict

        interactor = GetUserGuardianDetailsInteractor(
            user_profile_storage=self.user_profile_storage,
            user_account_storage=self.user_account_storage)
        try:
            user_guardian_details = interactor.get_user_guardian_details(
                user_id=user_id)
        except UserGuardianDetailsDoesNotExistsException:
            user_guardian_details = None

        if user_guardian_details:
            user_guardian_details = interface_dtos.UserGuardianDetailsDTO(**asdict(user_guardian_details))
        return user_guardian_details

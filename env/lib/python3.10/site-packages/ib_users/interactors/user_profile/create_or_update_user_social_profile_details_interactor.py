import typing

from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage
from ib_users.interactors.storages.user_profile_storage import \
    UserProfileStorage
from ib_users.constants.user_profile import enums
from ib_users.exceptions import user_profile_exceptions


class CreateOrUpdateUserSocialProfileDetailsInteractor:

    def __init__(self, user_account_storage: UserAccountsStorage,
                 user_profile_storage: UserProfileStorage):
        self.user_account_storage = user_account_storage
        self.user_profile_storage = user_profile_storage

    def create_or_update_user_social_profile_details(
            self, user_id: str, social_provider: typing.Optional[enums.SocialProvider],
            profile_link: typing.Optional[str]):
        self._validate_user_social_profile_details(
            user_id=user_id, social_provider=social_provider,
            profile_link=profile_link)
        self.user_profile_storage.create_or_update_user_social_profile_details(
            user_id=user_id, social_provider=social_provider,
            profile_link=profile_link)

    def _validate_user_social_profile_details(
            self, user_id: str, social_provider: typing.Optional[enums.SocialProvider],
            profile_link: typing.Optional[str]):
        import re
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException
        from ib_users.constants.config import LINKEDIN_PROFILE_LINK_REGEX, \
            TWITTER_PROFILE_LINK_REGEX

        is_user_id_exists = self.user_account_storage.is_user_id_exists(
            user_id=user_id)
        if not is_user_id_exists:
            raise InvalidUserIdException()

        if social_provider and social_provider not in enums.SocialProvider.get_list_of_values():
            raise user_profile_exceptions.InvalidSocialProviderException()

        if social_provider and social_provider == enums.SocialProvider.LINKEDIN.value:
            if profile_link and not re.match(pattern=LINKEDIN_PROFILE_LINK_REGEX, string=profile_link):
                raise user_profile_exceptions.InvalidSocialProfileLinkException()
        elif social_provider and social_provider == enums.SocialProvider.TWITTER.value:
            if profile_link and not re.match(pattern=TWITTER_PROFILE_LINK_REGEX, string=profile_link):
                raise user_profile_exceptions.InvalidSocialProfileLinkException()

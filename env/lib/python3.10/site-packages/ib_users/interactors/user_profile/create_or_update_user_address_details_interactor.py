import typing

from ib_users.constants.user_profile import exception_messages
from ib_users.interactors.storages.user_profile_storage import \
    UserProfileStorage
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage
from ib_users.interfaces import dtos as interface_dtos
from ib_users.exceptions import user_profile_exceptions
from ib_users.exceptions import user_account_exceptions
from ib_users.interfaces import enums as interface_enums


class CreateOrUpdateUserAddressDetailsInteractor:

    def __init__(self, profile_storage: UserProfileStorage,
                 account_storage: UserAccountsStorage):
        self.account_storage = account_storage
        self.profile_storage = profile_storage

    def create_or_update_user_address_details(
            self, user_id: str, address_details: typing.List[interface_dtos.UpdateAddressDetailsDTO]):

        invalid_address_details = self._get_invalid_user_address_details(address_details)

        if invalid_address_details:
            raise user_profile_exceptions.InvalidAddressDetailsException(
                invalid_address_details=invalid_address_details)

        is_valid_user_id = self.account_storage.is_user_id_exists(user_id=user_id)
        if not is_valid_user_id:
            raise user_account_exceptions.InvalidUserIdException()

        if address_details:
            self.profile_storage.create_or_update_user_address_details(
                user_id=user_id, address_details=address_details)

    @staticmethod
    def _get_invalid_user_address_details(
            address_details: typing.List[interface_dtos.UpdateAddressDetailsDTO]):
        invalid_address_details = []
        for each_address_details in address_details:
            invalid_address_type = None
            if each_address_details.address_type not in interface_enums.AddressType.get_list_of_values():
                invalid_address_type = interface_dtos.InvalidValueDetailsDTO(
                    value=each_address_details.address_type,
                    error_code=exception_messages.INVALID_ADDRESS_TYPE[1],
                    error_message=exception_messages.INVALID_ADDRESS_TYPE[0])
            if invalid_address_type:
                invalid_address_details.append(
                    interface_dtos.InvalidAddressDetailsDTO(
                        address_type=invalid_address_type))
        return invalid_address_details

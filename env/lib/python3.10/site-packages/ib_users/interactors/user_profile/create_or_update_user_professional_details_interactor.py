import datetime
import typing

from ib_users.interactors.storages.dtos import UserProfessionalSkillsDTO
from ib_users.interactors.storages.user_profile_storage import \
    UserProfileStorage
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage
from ib_users.interfaces import dtos as interface_dtos
from ib_users.exceptions import user_profile_exceptions
from ib_users.exceptions import user_account_exceptions
from ib_users.interactors.dtos import CurrentProfessionalDetailsDTO
from ib_users.constants.user_profile import exception_messages


class CreateOrUpdateUserProfessionalDetailsInteractor:

    def __init__(self, profile_storage: UserProfileStorage,
                 account_storage: UserAccountsStorage):
        self.account_storage = account_storage
        self.profile_storage = profile_storage

    def create_or_update_user_professional_details(
            self, update_user_professional_details_dto: interface_dtos.UpdateUserProfessionalDetailsDTO):
        user_id = update_user_professional_details_dto.user_id
        is_valid_user_id = self.account_storage.is_user_id_exists(user_id=user_id)
        if not is_valid_user_id:
            raise user_account_exceptions.InvalidUserIdException()

        self._validate_user_professional_details(
            update_user_professional_details_dto=update_user_professional_details_dto)

        work_experience_details_to_update = update_user_professional_details_dto.work_experience_details
        company_details_to_update = update_user_professional_details_dto.company_details
        current_professional_details_to_update = \
            update_user_professional_details_dto.current_professional_details

        if work_experience_details_to_update:
            self.profile_storage.create_or_update_user_work_experience_details(
                work_experience_details=work_experience_details_to_update, user_id=user_id)
        if current_professional_details_to_update:
            self._create_or_update_user_current_professional_details(
                current_professional_details=current_professional_details_to_update,
                user_id=user_id)
        if company_details_to_update is not None:
            self._create_or_update_user_company_details(
                company_details_to_update=company_details_to_update, user_id=user_id)

    def _validate_user_professional_details(
            self, update_user_professional_details_dto: interface_dtos.UpdateUserProfessionalDetailsDTO):
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidProfessionalDetailsException

        work_experience_details_to_update = update_user_professional_details_dto.work_experience_details
        company_details_to_update = update_user_professional_details_dto.company_details
        current_professional_details_to_update = \
            update_user_professional_details_dto.current_professional_details

        invalid_work_experience_details, invalid_user_company_details, \
            invalid_current_professional_details = None, None, None
        if work_experience_details_to_update:
            invalid_work_experience_details = self._get_invalid_work_experience_details(
                work_experience_details=work_experience_details_to_update)
        if company_details_to_update:
            invalid_user_company_details = self._get_invalid_user_company_details(
                company_details=company_details_to_update)
        if current_professional_details_to_update:
            invalid_current_professional_details = self._get_invalid_current_professional_details(
                current_professional_details=current_professional_details_to_update)

        if invalid_work_experience_details or invalid_user_company_details or \
                invalid_current_professional_details:
            invalid_professional_details = interface_dtos.InvalidProfessionalDetailsDTO(
                work_experience_details=invalid_work_experience_details,
                company_details=invalid_user_company_details,
                current_professional_details=invalid_current_professional_details)
            raise InvalidProfessionalDetailsException(
                invalid_professional_details=invalid_professional_details)

    @staticmethod
    def _get_invalid_work_experience_details(
            work_experience_details: interface_dtos.WorkExperienceDetailsDTO):
        invalid_no_of_years_experience_in_it_sector, \
            invalid_no_of_years_experience_in_non_it_sector = None, None
        if work_experience_details.no_of_years_experience_in_it_sector and \
                work_experience_details.no_of_years_experience_in_it_sector < 0:
            invalid_no_of_years_experience_in_it_sector = interface_dtos.InvalidValueDetailsDTO(
                value=work_experience_details.no_of_years_experience_in_it_sector,
                error_code=exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_IT_SECTOR[1],
                error_message=exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_IT_SECTOR[0])

        if work_experience_details.no_of_years_experience_in_non_it_sector and \
                work_experience_details.no_of_years_experience_in_non_it_sector < 0:
            invalid_no_of_years_experience_in_non_it_sector = interface_dtos.InvalidValueDetailsDTO(
                value=work_experience_details.no_of_years_experience_in_non_it_sector,
                error_code=exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_NON_IT_SECTOR[1],
                error_message=exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_NON_IT_SECTOR[0])

        if invalid_no_of_years_experience_in_non_it_sector or \
                invalid_no_of_years_experience_in_it_sector:
            return interface_dtos.InvalidWorkExperienceDetailsDTO(
                no_of_years_experience_in_it_sector=invalid_no_of_years_experience_in_it_sector,
                no_of_years_experience_in_non_it_sector=invalid_no_of_years_experience_in_non_it_sector)

    def _get_invalid_user_company_details(
            self, company_details: typing.List[interface_dtos.UpdateUserCompanyDetailsDTO]):
        from ib_users.constants.user_profile import enums

        invalid_company_details = []
        for each_company_details in company_details:
            invalid_end_date, invalid_no_of_months_for_notice_period_details, \
                invalid_ctc_details = None, None, None
            # TODO: validate company_id, company_city_id, job_role_id
            if each_company_details.end_date:
                invalid_end_date = self._get_invalid_end_date_details(
                    end_date=each_company_details.end_date, start_date=each_company_details.start_date)
            if each_company_details.no_of_months_for_notice_period and \
                    each_company_details.no_of_months_for_notice_period < 0:
                invalid_no_of_months_for_notice_period_details = interface_dtos.InvalidValueDetailsDTO(
                    value=each_company_details.no_of_months_for_notice_period,
                    error_code=exception_messages.INVALID_NO_OF_MONTHS_FOR_NOTICE_PERIOD[1],
                    error_message=exception_messages.INVALID_NO_OF_MONTHS_FOR_NOTICE_PERIOD[0])
            if each_company_details.ctc and each_company_details.ctc not in enums.CTC.get_list_of_values():
                invalid_ctc_details = interface_dtos.InvalidValueDetailsDTO(
                    value=each_company_details.ctc,
                    error_code=exception_messages.INVALID_CTC[1],
                    error_message=exception_messages.INVALID_CTC[0])

            if invalid_end_date or invalid_no_of_months_for_notice_period_details or invalid_ctc_details:
                invalid_company_details.append(
                    interface_dtos.InvalidUserCompanyDetailsDTO(
                        request_id=each_company_details.request_id,
                        end_date=invalid_end_date, ctc=invalid_ctc_details,
                        no_of_months_for_notice_period=invalid_no_of_months_for_notice_period_details))

        return invalid_company_details

    @staticmethod
    def _get_invalid_end_date_details(
            end_date: datetime.date, start_date: typing.Optional[datetime.date])\
            -> typing.Optional[interface_dtos.InvalidValueDetailsDTO]:
        if start_date and (end_date < start_date):
            return interface_dtos.InvalidValueDetailsDTO(
                value=end_date,
                error_code=exception_messages.END_DATE_SHOULD_BE_GREATER_THAN_START_DATE[1],
                error_message=exception_messages.END_DATE_SHOULD_BE_GREATER_THAN_START_DATE[0])

    @staticmethod
    def _get_invalid_current_professional_details(
            current_professional_details: interface_dtos.UpdateCurrentProfessionalDetailsDTO
            ) -> typing.Optional[interface_dtos.InvalidCurrentProfessionalDetailsDTO]:
        from ib_users.constants.user_profile import enums

        # TODO: validate job_role_id, skill_ids
        higher_education_course_type = current_professional_details.higher_education_course_type
        invalid_highest_education_course_type_details = None
        if higher_education_course_type and higher_education_course_type not in \
                enums.CourseType.get_list_of_values():
            invalid_highest_education_course_type_details = interface_dtos.InvalidValueDetailsDTO(
                value=higher_education_course_type,
                error_code=exception_messages.INVALID_HIGHEST_EDUCATION_COURSE_TYPE[1],
                error_message=exception_messages.INVALID_HIGHEST_EDUCATION_COURSE_TYPE[0])

        if invalid_highest_education_course_type_details:
            return interface_dtos.InvalidCurrentProfessionalDetailsDTO(
                higher_education_course_type=invalid_highest_education_course_type_details)

    def _create_or_update_user_current_professional_details(
            self, current_professional_details: interface_dtos.UpdateCurrentProfessionalDetailsDTO,
            user_id: str):
        current_professional_details_dto = CurrentProfessionalDetailsDTO(
            job_role_id=current_professional_details.job_role_id,
            job_role_name=current_professional_details.job_role_name,
            other_job_role_name=current_professional_details.other_job_role_name,
            higher_education_course_type=current_professional_details.higher_education_course_type,
            have_work_experience=current_professional_details.have_work_experience)
        self.profile_storage.create_or_update_user_current_professional_details(
            current_professional_details=current_professional_details_dto,
            user_id=user_id)
        if current_professional_details.skills is not None:
            self._create_or_update_user_professional_skills_details(
                professional_skills=current_professional_details.skills, user_id=user_id)

    def _create_or_update_user_company_details(
            self, company_details_to_update: typing.List[interface_dtos.UpdateUserCompanyDetailsDTO],
            user_id: str):
        existing_user_company_details = self.profile_storage.get_user_company_details(
            user_id=user_id)
        existing_user_company_details_ids = [
            each_company_details.id for each_company_details in existing_user_company_details]
        given_user_company_detail_ids_to_update = [
            each.id for each in company_details_to_update if each.id]

        invalid_user_company_ids = list(set(given_user_company_detail_ids_to_update) - set(
            existing_user_company_details_ids))
        if invalid_user_company_ids:
            raise user_profile_exceptions.InvalidUserCompanyDetailsIdsException(
                user_company_ids=invalid_user_company_ids)

        user_company_details_to_update = []
        user_company_details_to_create = []
        for each_company_detail_to_update in company_details_to_update:
            if each_company_detail_to_update.id:
                user_company_details_to_update.append(each_company_detail_to_update)
            else:
                user_company_details_to_create.append(each_company_detail_to_update)
        user_company_detail_ids_to_remove = list(set(existing_user_company_details_ids) - set(
            given_user_company_detail_ids_to_update))

        if user_company_detail_ids_to_remove:
            self.profile_storage.remove_user_company_details(
                user_company_detail_ids=user_company_detail_ids_to_remove)
        if user_company_details_to_update:
            self.profile_storage.update_user_company_details(
                user_company_details=user_company_details_to_update)
        if user_company_details_to_create:
            self.profile_storage.create_user_company_details(
                user_id=user_id, user_company_details=user_company_details_to_create)

    def _create_or_update_user_professional_skills_details(
            self, professional_skills: typing.List[interface_dtos.SkillDetailsDTO],
            user_id: str):
        from ib_users.utils.generate_uuid import generate_uuid

        existing_professional_skills_details = self.profile_storage. \
            get_user_professional_skills_details(user_id=user_id)

        existing_professional_skills_ids = [
            each_skill_details.id
            for each_skill_details in existing_professional_skills_details]
        given_professional_skills_ids_to_update = [
            each_skill.id for each_skill in professional_skills if each_skill.id]
        self._validate_professional_skills_ids(
            given_professional_skills_ids_to_update=given_professional_skills_ids_to_update,
            existing_professional_skills_ids=existing_professional_skills_ids)
        user_professional_skills_ids_to_remove = list(
            set(existing_professional_skills_ids) - set(
                given_professional_skills_ids_to_update))

        user_professional_skills_to_create, user_professional_skills_to_update = [], []
        for each_skill_details in professional_skills:
            if each_skill_details.id:
                user_professional_skills_to_update.append(each_skill_details)
            else:
                user_professional_skills_dto = UserProfessionalSkillsDTO(
                    user_id=user_id, id=generate_uuid(),
                    skill_name=each_skill_details.skill_name,
                    skill_id=each_skill_details.skill_id,
                    other_skill_name=each_skill_details.other_skill_name)
                user_professional_skills_to_create.append(
                    user_professional_skills_dto)

        if user_professional_skills_ids_to_remove:
            self.profile_storage.remove_user_professional_skills(
                user_professional_skills_ids=user_professional_skills_ids_to_remove)
        if user_professional_skills_to_update:
            self.profile_storage.update_user_professional_skills_details(
                user_professional_skills=user_professional_skills_to_update)
        if user_professional_skills_to_create:
            self.profile_storage.create_user_professional_skills_details(
                user_professional_skills=user_professional_skills_to_create)

    @staticmethod
    def _validate_professional_skills_ids(
            given_professional_skills_ids_to_update: typing.List[str],
            existing_professional_skills_ids: typing.List[str]):
        invalid_user_professional_skills_ids = list(
            set(given_professional_skills_ids_to_update) -
            set(existing_professional_skills_ids))
        if invalid_user_professional_skills_ids:
            raise user_profile_exceptions.InvalidUserProfessionalSkillIdsException(
                user_professional_skills_ids=invalid_user_professional_skills_ids)

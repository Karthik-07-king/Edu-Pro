from django.conf import settings

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.exceptions.user_account_exceptions import \
    EmailNotVerifiedException
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.exceptions.custom_exception_constants import \
    USER_ACCOUNT_IS_DEACTIVATED
from ib_users.utils.interactors.login_interactors_common import \
    is_phone_number_not_empty
from ib_users.validators import EmailValidator
from ib_users.interactors.storages.user_accounts_storage import PhoneNumberDTO
from ib_users.constants.sms_constants import INDIA_COUNTRY_CODE, ServiceProvider
from ib_users.interactors.storages.otp_verification_storage import OTPVerificationStorage
from ib_users.interactors.storages.user_profile_storage import UserProfileStorage


class SendLoginOTPToEmailInteractor:

    def __init__(
            self, storage: UserAccountsStorage, otp_service: OTPService,
            otp_verification_storage: OTPVerificationStorage,
            user_profile_storage: UserProfileStorage):
        self.storage = storage
        self.otp_service = otp_service
        self.otp_verification_storage = otp_verification_storage
        self.user_profile_storage = user_profile_storage

    def send_login_otp_to_email(
            self, email: str, should_send_otp_to_phone_number: bool):
        EmailValidator.validate(email)

        user_account = self.storage.get_user_given_email(email=email)

        user_profile = self.user_profile_storage.get_user_profile(
            user_id=user_account.user_id)
        if not user_profile.is_email_verified:
            raise EmailNotVerifiedException()

        self.validate_user_account_for_active_state(
            user_id=user_account.user_id)

        self.otp_service.send_otp_to_user_email(
            email=email,
            template=settings.TEMPLATE_FOR_LOGIN_WITH_EMAIL_OTP,
            subject=settings.SUBJECT_FOR_LOGIN_WITH_EMAIL_OTP)

        phone_number_dto = PhoneNumberDTO(
            phone_number=user_profile.phone_number,
            country_code=user_profile.country_code,
        )

        is_phone_number_exists = is_phone_number_not_empty(
            phone_number=phone_number_dto)

        is_allowed_to_send_otp_to_phone_number = (
            is_phone_number_exists and should_send_otp_to_phone_number)

        sent_otp_to_phone_number = None
        if is_allowed_to_send_otp_to_phone_number:
            otp_details = self.otp_verification_storage.get_otp_details_by_email(
                email=email, verification_type=VerificationType.LOGIN_WITH_OTP)
            self._send_otp_to_phone_number(
                phone_number=phone_number_dto,
                otp=otp_details.otp)
            sent_otp_to_phone_number = phone_number_dto

        return email, sent_otp_to_phone_number

    def validate_user_account_for_active_state(self, user_id):
        if not self.storage.is_user_account_active(user_id):
            from ib_users.validators.base_validator import CustomException
            raise CustomException.from_exception_message_DTO(
                USER_ACCOUNT_IS_DEACTIVATED
            )

    def _get_message_template_to_format_to_login(self, country_code: str):

        from ib_users.constants.otp_constants import OTPMessageFormatConstants
        from ib_users.constants.sms_constants import INDIA_COUNTRY_CODE

        template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
        if country_code != INDIA_COUNTRY_CODE:
            if settings.USE_TWILIO_FOR_INTERNATIONAL_NUMBERS:
                template = self.storage.get_message_template_string(
                    message_template_id=settings.TWILIO_LOGIN_TEMPLATE_ID)

        return template

    @staticmethod
    def _get_sms_service_provider(country_code: str) -> ServiceProvider:

        sms_service_provider = settings.SMS_SERVICE_PROVIDER
        if country_code != INDIA_COUNTRY_CODE:
            if settings.USE_TWILIO_FOR_INTERNATIONAL_NUMBERS:
                sms_service_provider = ServiceProvider.TWILIO.value
        return sms_service_provider

    def _send_otp_to_phone_number(
            self, phone_number: PhoneNumberDTO, otp: str):
        template = self._get_message_template_to_format_to_login(
            country_code=phone_number.country_code)
        sms_service_provider = self._get_sms_service_provider(
            country_code=phone_number.country_code)

        sms_sender = self._create_sms_sender(
            sms_template=template,
            sms_service_provider=sms_service_provider)
        sms_sender.send_otp(
            country_code=phone_number.country_code,
            phone_number=phone_number.phone_number,
            otp=otp
        )

    @staticmethod
    def _create_sms_sender(sms_template, sms_service_provider):
        from ib_users.services.msg91_impl import MSG91Impl
        from ib_users.services.sms_country_impl import SMSCountryImpl
        from ib_users.services.twilio_service_impl import TwilioServiceImpl

        if sms_service_provider == ServiceProvider.MSG91.value:
            return MSG91Impl(message_template=sms_template)
        elif sms_service_provider == ServiceProvider.SMS_COUNTRY.value:
            return SMSCountryImpl(message_template=sms_template)
        elif sms_service_provider == ServiceProvider.TWILIO.value:
            return TwilioServiceImpl(message_template=sms_template)

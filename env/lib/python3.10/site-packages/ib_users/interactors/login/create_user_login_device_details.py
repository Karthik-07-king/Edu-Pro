from ib_users.exceptions import devices_exceptions
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage, UserDeviceIdAndAccessTokenDTO, UserDeviceLoginDTO
from django.conf import settings
from ib_users.constants.custom_exception_messages import \
    DEVICE_DETAILS_SHOULD_BE_GIVEN
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator


class CreateUserLoginDeviceDetailsInteractor:

    def __init__(self, user_login_devices_storage: UserLoginDeviceDetailsStorage,
                 auth_token_generator_storage: UserAuthTokensGenerator):
        self.user_login_devices_storage = user_login_devices_storage
        self.auth_token_generator_storage = auth_token_generator_storage

    def create_user_login_device_details(
            self, user_id: str, device_access_token_dto: UserDeviceIdAndAccessTokenDTO):

        enable_login_devices_information = settings.ENABLE_USER_DEVICES_INFORMATION
        if enable_login_devices_information:
            if not device_access_token_dto.device_id:
                raise devices_exceptions.DeviceDetailsShouldBeGivenException(
                    DEVICE_DETAILS_SHOULD_BE_GIVEN.message,
                    DEVICE_DETAILS_SHOULD_BE_GIVEN.code)

        if enable_login_devices_information or device_access_token_dto.device_id:
            user_login_device_ids = self.user_login_devices_storage. \
                get_user_unique_login_device_ids(user_id=user_id)
            if device_access_token_dto.device_id not in user_login_device_ids:
                self.user_login_devices_storage.get_or_create_user_unique_login_device(
                    user_id=user_id, device_id=device_access_token_dto.device_id)

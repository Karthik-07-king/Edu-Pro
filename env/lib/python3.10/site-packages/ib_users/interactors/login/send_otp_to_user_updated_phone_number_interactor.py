from ib_users.constants import otp_verification_constants
from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.DTOs import common_dtos as interactor_common_dtos
from ib_users.interactors.storages import dtos as storage_dtos
from ib_users.interactors.exceptions import user_profile as \
    user_profile_exceptions
from ib_users.exceptions import custom_exception_constants, \
    user_account_exceptions
from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
from ib_users.third_party.otp_service_impl import OTPServiceImpl
from ib_users.validators import base_validator


class SendOTPToUserUpdatedPhoneNumber:

    def __init__(
            self, user_account_storage: UserAccountsStorage):
        self.user_account_storage = user_account_storage

    def send_otp_to_user_updated_phone_number(
            self, user_id: str,
            send_otp_through: otp_verification_constants.SendOTPThrough):

        self._validate_user_account_details(user_id)
        update_phone_number_log_dto = self.\
            _get_user_latest_update_phone_number_log_details(user_id)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code
        )

        self._send_otp_to_user_phone_number(
            phone_number_dto, send_otp_through)

    def _validate_user_account_details(self, user_id: str):

        is_user_id_exists = self.user_account_storage.is_user_id_exists(user_id)
        if not is_user_id_exists:
            raise user_account_exceptions.InvalidUserIdException()

        is_user_active = self.user_account_storage.is_user_account_active(
            user_id)
        if not is_user_active:
            raise base_validator.CustomException.from_exception_message_DTO(
                custom_exception_constants.USER_ACCOUNT_IS_DEACTIVATED)

    def _get_user_latest_update_phone_number_log_details(self, user_id: str) \
            -> storage_dtos.UserAccountUpdatePhoneLogWithCreationDetailsDTO:

        user_updated_phone_details_log_dto = self.user_account_storage \
            .get_user_latest_update_phone_number_log_details(user_id)

        if not user_updated_phone_details_log_dto:
            raise user_profile_exceptions.UserUpdatePhoneDetailsLogDoesNotExist \
                .from_exception_message_DTO(
                    custom_exception_constants.
                    USER_UPDATE_PHONE_NUMBER_LOG_DETAILS_DOES_NOT_EXIST)

        if user_updated_phone_details_log_dto.verification_status == \
                otp_verification_constants.VerificationStatus.VERIFIED.value:
            raise user_profile_exceptions.PhoneNumberAlreadyUpdatedException \
                .from_exception_message_DTO(custom_exception_constants\
                .USER_PHONE_NUMBER_UPDATED_ALREADY)

        return user_updated_phone_details_log_dto

    def _send_otp_to_user_phone_number(
            self, phone_number_dto: interactor_common_dtos.PhoneNumberDTO,
            send_otp_through: otp_verification_constants.SendOTPThrough):

        from ib_users.constants.sms_constants import INDIA_COUNTRY_CODE
        from django.conf import settings

        verify_otp_interactor = VerifyThroughOTPInteractor(
            otp_verification_constants.VerificationType
            .VERIFY_UPDATE_PHONE_NUMBER_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        sms_template = \
            OTPMessageFormatConstants.FORMAT_TO_VERIFY_UPDATE_PHONE_NUMBER
        if phone_number_dto.country_code != INDIA_COUNTRY_CODE:
            if settings.USE_TWILIO_FOR_INTERNATIONAL_NUMBERS:
                sms_template = self.user_account_storage.\
                    get_message_template_string(
                        message_template_id=
                        settings.TWILIO_UPDATE_PHONE_NUMBER_TEMPLATE_ID)

        call_template = settings.VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE
        otp_service.send_otp_to_user_phone_number(
            phone_number=phone_number_dto, template=sms_template,
            send_otp_through=send_otp_through, call_template=call_template)

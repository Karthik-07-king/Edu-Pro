import typing
from django.conf import settings
from ib_users.constants.config import TRUE_STR
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage, UserDeviceIdAndAccessTokenDTO
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator, UserAuthTokensDTO
from ib_users.interactors.presenters.user_login_presenter import UserLoginPresenter


class GenerateAuthTokensInteractor:
    def __init__(
            self, user_account_storage: UserAccountsStorage,
            user_login_device_details_storage: UserLoginDeviceDetailsStorage,
            user_auth_tokens_generator: UserAuthTokensGenerator):
        self.user_auth_tokens_generator = user_auth_tokens_generator
        self.user_login_device_details_storage = user_login_device_details_storage
        self.user_account_storage = user_account_storage

    def generate_auth_tokens_wrapper(
            self, user_id: str, device_id: typing.Optional[str],
            presenter: UserLoginPresenter,
            expiry_in_seconds: int = None):
        user_auth_tokens = self.generate_auth_tokens(
            user_id=user_id, device_id=device_id, expiry_in_seconds=expiry_in_seconds)
        return presenter.get_user_login_response(
            user_tokens=user_auth_tokens)

    def generate_auth_tokens(
            self, user_id: str, device_id: typing.Optional[str],
            expiry_in_seconds: int = None) -> UserAuthTokensDTO:
        user_auth_tokens = self._generate_auth_tokens_for_user(
            user_id=user_id, expiry_in_seconds=expiry_in_seconds)
        self._create_user_login_devices_details(
            user_id=user_id, device_id=device_id,
            access_token=user_auth_tokens.access_token)
        is_user_restrict_to_single_session = \
            settings.RESTRICT_USER_TO_SINGLE_LOGIN_SESSION == TRUE_STR
        if is_user_restrict_to_single_session:
            self._logout_from_other_devices(
                user_id=user_id, access_tokens=[user_auth_tokens.access_token])
        return user_auth_tokens

    def generate_auth_tokens_for_client(
            self, user_id: str, device_id: typing.Optional[str], client_id: str,
            should_expire_other_client_access_tokens: bool = False,
            expiry_in_seconds: int = None) -> UserAuthTokensDTO:

        application_id = self.user_auth_tokens_generator.get_client_application_id(
            client_id=client_id)
        user_auth_tokens = self._generate_auth_tokens_for_user(
            user_id=user_id, expiry_in_seconds=expiry_in_seconds,
            application_id=application_id)
        self._create_user_login_devices_details(
            user_id=user_id, device_id=device_id,
            access_token=user_auth_tokens.access_token)
        is_user_restrict_to_single_session = \
            settings.RESTRICT_USER_TO_SINGLE_LOGIN_SESSION == TRUE_STR

        if is_user_restrict_to_single_session or should_expire_other_client_access_tokens:
            self._expire_access_tokens(
                should_expire_other_client_access_tokens=should_expire_other_client_access_tokens,
                application_id=application_id,
                user_id=user_id,
                new_access_token=user_auth_tokens.access_token
            )
        return user_auth_tokens

    def _generate_auth_tokens_for_user(
            self, user_id: str, expiry_in_seconds: typing.Optional[int], application_id: str = None) -> UserAuthTokensDTO:
        from ib_users.interactors.login.user_tokens_interactor import \
            UserAuthTokenInteractor

        interactor = UserAuthTokenInteractor(
            auth_token_service=self.user_auth_tokens_generator,
            account_storage=self.user_account_storage)
        return interactor.get_user_auth_tokens(
            user_id=user_id, application_id=application_id,
            expiry_in_seconds=expiry_in_seconds)

    def _create_user_login_devices_details(
            self, user_id: str, device_id: typing.Optional[str],
            access_token: str):
        from ib_users.interactors.login.create_user_login_device_details import \
            CreateUserLoginDeviceDetailsInteractor

        device_id_with_access_token = UserDeviceIdAndAccessTokenDTO(
            device_id=device_id, access_token=access_token)
        interactor = CreateUserLoginDeviceDetailsInteractor(
            user_login_devices_storage=self.user_login_device_details_storage,
            auth_token_generator_storage=self.user_auth_tokens_generator)
        interactor.create_user_login_device_details(
            user_id=user_id,
            device_access_token_dto=device_id_with_access_token)

    def _logout_from_other_devices(self, user_id: str, access_tokens: typing.List[str]):
        from ib_users.interactors import LogoutInDevicesImpl
        interactor = LogoutInDevicesImpl(
            storage=self.user_login_device_details_storage,
            login_token_generator=self.user_auth_tokens_generator)
        interactor.logout_in_devices_except_of_given_access_tokens(
            user_id=user_id, access_tokens=access_tokens)

    def _expire_access_tokens(
            self, should_expire_other_client_access_tokens: bool,
            application_id: str, user_id: str,
            new_access_token: str):
        is_user_restrict_to_single_session = \
            settings.RESTRICT_USER_TO_SINGLE_LOGIN_SESSION == TRUE_STR

        if should_expire_other_client_access_tokens and is_user_restrict_to_single_session:
            self._logout_from_other_devices(
                user_id=user_id, access_tokens=[new_access_token]
            )
        elif is_user_restrict_to_single_session is True:
            access_token_dto = self.user_auth_tokens_generator.get_all_access_tokens_related_to_user(
                user_id=user_id, ignore_application_ids=[application_id]
            )
            access_token_not_expire = access_token_dto.access_tokens
            access_token_not_expire.append(new_access_token)
            self._logout_from_other_devices(
                user_id=user_id, access_tokens=access_token_not_expire
            )

        elif should_expire_other_client_access_tokens is True:
            access_token_dto = self.user_auth_tokens_generator.get_all_access_tokens_related_to_user(
                user_id=user_id, select_application_ids=[application_id]
            )
            self._logout_from_other_devices(
                user_id=user_id, access_tokens=access_token_dto.access_tokens
            )

import typing

from ib_users.interactors.login.base_login import BaseLogin
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.validators import UsernameValidator, PasswordValidator


class LoginWithUsername(BaseLogin):
    def __init__(self, storage: UserAccountsStorage,
                 user_login_device_details_storage: UserLoginDeviceDetailsStorage):
        super().__init__(storage)
        self.user_login_device_details_storage = user_login_device_details_storage

    def get_user_id_for_given_login_data(
            self, username_and_password_dto, device_id: typing.Optional[str]):
        UsernameValidator.validate(username_and_password_dto.username)
        PasswordValidator.validate(username_and_password_dto.password)
        user_id = self.storage.get_user_id_given_username_and_password(
            username_and_password_dto)
        self._validate_user_login_device_details(device_id=device_id)
        super().validate_user_account_for_active_state(user_id)
        return user_id

    def _validate_user_login_device_details(
            self, device_id: typing.Optional[str]):
        from ib_users.interactors.login.validate_user_login_device_details import \
            ValidateUserLoginDevicesDetailsInteractor

        interactor = ValidateUserLoginDevicesDetailsInteractor(
            user_login_devices_storage=self.user_login_device_details_storage)
        interactor.validate_users_login_devices(device_id=device_id)

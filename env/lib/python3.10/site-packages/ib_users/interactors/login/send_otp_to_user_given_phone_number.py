import typing
from django.conf import settings

from ib_users.constants.otp_constants import \
    OTPMessageFormatConstants
from ib_users.constants.otp_verification_constants import SendOTPThrough
from ib_users.exceptions.custom_exception_constants import \
    USER_ACCOUNT_IS_DEACTIVATED
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_accounts_storage import PhoneNumberDTO
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.utils.interactors.login_interactors_common import \
    are_email_and_phone_number_not_empty, is_phone_number_not_empty


class SendOTPToUserGivenPhoneNumber:
    def __init__(self, storage: UserAccountsStorage, otp_service: OTPService,
                 phone_number_validator: PhoneNumberValidator):
        self.storage = storage
        self.otp_service = otp_service
        self.phone_number_validator = phone_number_validator

    def send_otp(self, phone_number_dto: PhoneNumberDTO,
                 send_otp_through: SendOTPThrough):
        self.phone_number_validator.validate(phone_number_dto)
        otp_send_to_dto = self.storage.get_user_details_to_send_otp_given_phone_number(
            phone_number_dto)

        user_account = self.storage.get_user_given_phone_number(
            phone_number_dto=phone_number_dto)

        self.validate_user_account_for_active_state(
            user_id=user_account.user_id)

        from django.conf import settings
        should_send_otp_to_email = getattr(
            settings,
            'SHOULD_SEND_OTP_TO_VERIFIED_EMAIL_FOR_PHONE_NUMBER_LOGIN', True)

        if should_send_otp_to_email and are_email_and_phone_number_not_empty(otp_send_to_dto):
            sms_template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
            call_template = settings.LOGIN_OTP_CALL_TEMPLATE
            self.otp_service.send_otp_to_user_email(
                email=otp_send_to_dto.email, template=sms_template,
                subject=OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN)
            self._send_otp_to_user_phone_number(
                phone_number_dto=otp_send_to_dto.phone_number, sms_template=sms_template,
                send_otp_through=send_otp_through, call_template=call_template)
        else:
            sms_template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
            call_template = settings.LOGIN_OTP_CALL_TEMPLATE
            self._send_otp_to_user_phone_number(
                phone_number_dto=otp_send_to_dto.phone_number, sms_template=sms_template,
                send_otp_through=send_otp_through, call_template=call_template)

    def validate_user_account_for_active_state(self, user_id):
        if not self.storage.is_user_account_active(user_id):
            from ib_users.validators.base_validator import CustomException
            raise CustomException.from_exception_message_DTO(
                USER_ACCOUNT_IS_DEACTIVATED
            )
    
    def _send_otp_to_user_phone_number(
            self, phone_number_dto, sms_template: str,
            call_template: str, send_otp_through: SendOTPThrough):
        from ib_users.constants.sms_constants import INDIA_COUNTRY_CODE
        from django.conf import settings
        
        is_phone_number_and_country_code_not_empty = is_phone_number_not_empty(
            phone_number=phone_number_dto)
        if is_phone_number_and_country_code_not_empty and phone_number_dto.country_code != \
                INDIA_COUNTRY_CODE:
            if settings.USE_TWILIO_FOR_INTERNATIONAL_NUMBERS:
                sms_template = self.storage.get_message_template_string(
                    message_template_id=settings.TWILIO_LOGIN_TEMPLATE_ID)
                
        self.otp_service.send_otp_to_user_phone_number(
            phone_number=phone_number_dto, template=sms_template,
            send_otp_through=send_otp_through, call_template=call_template)

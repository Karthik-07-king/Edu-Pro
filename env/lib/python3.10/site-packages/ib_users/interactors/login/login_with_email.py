import typing
from ib_users.interactors.login.generate_auth_tokens_interactor import \
    GenerateAuthTokensInteractor

from ib_users.third_party.oauth_user_auth_tokens_service import \
    OAuthUserAuthTokensService

from ib_users.interactors.storages import OAuth2Storage
from ib_users.interactors.storages.user_accounts_storage import \
    EmailAndPasswordDTO, UserAccountsStorage
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.validators import EmailValidator, PasswordValidator
from ib_users.interactors.login.base_login import BaseLogin


class LoginWithEmail(BaseLogin):

    def __init__(self, storage: UserAccountsStorage,
                 user_login_device_details_storage: UserLoginDeviceDetailsStorage):
        super().__init__(storage)
        self.user_login_device_details_storage = user_login_device_details_storage

    def get_user_id_for_given_login_data(
            self, email_login_dto: EmailAndPasswordDTO, device_id: typing.Optional[str]):
        EmailValidator.validate(email_login_dto.email)
        PasswordValidator.validate(email_login_dto.password)
        user_id = self.storage.get_user_id_given_email_and_password(
            email_login_dto)
        self._validate_user_login_device_details(device_id=device_id)

        super().validate_user_account_for_active_state(user_id)
        return user_id

    def get_auth_tokens_given_login_data(
            self, email_login_dto: EmailAndPasswordDTO,
            oauth2_sql_storage: OAuth2Storage, device_id: typing.Optional[str]):
        user_id = self.get_user_id_for_given_login_data(
            email_login_dto=email_login_dto, device_id=device_id)
        login_tokens_generator = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_sql_storage)
        # TODO OAuthUserAuthTokensService should be an argument as it is a service

        user_auth_token_interactor = GenerateAuthTokensInteractor(
            user_auth_tokens_generator=login_tokens_generator,
            user_account_storage=self.storage,
            user_login_device_details_storage=self.user_login_device_details_storage)

        return user_auth_token_interactor.generate_auth_tokens(user_id=user_id,
                                                               device_id=device_id)

    def _validate_user_login_device_details(
            self, device_id: typing.Optional[str]):
        from ib_users.interactors.login.validate_user_login_device_details import \
            ValidateUserLoginDevicesDetailsInteractor

        interactor = ValidateUserLoginDevicesDetailsInteractor(
            user_login_devices_storage=self.user_login_device_details_storage)
        interactor.validate_users_login_devices(device_id=device_id)

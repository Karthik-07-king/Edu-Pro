from dataclasses import dataclass

import typing

from ib_users.interactors.login.base_login import BaseLogin
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.validators import EmailValidator
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage


@dataclass
class EmailAndOTPDTO:
    email: str
    otp: str


class LoginWithEmailAndOTP(BaseLogin):

    def __init__(
            self, storage: UserAccountsStorage, otp_service: OTPService,
            user_login_device_details_storage: UserLoginDeviceDetailsStorage):
        super().__init__(storage)
        self.otp_service = otp_service
        self.user_login_device_details_storage = user_login_device_details_storage

    def get_user_id_for_given_login_data(
            self, email_login_dto: EmailAndOTPDTO, device_id: typing.Optional[str]):
        EmailValidator.validate(email_login_dto.email)

        user_id = self.storage.get_user_id_given_email(email_login_dto.email)
        self._validate_user_login_device_details(device_id=device_id)
        super().validate_user_account_for_active_state(user_id)
        self.otp_service.validate_otp_send_to_email(
            email=email_login_dto.email,
            otp=email_login_dto.otp)
        return user_id

    def _validate_user_login_device_details(
            self, device_id: typing.Optional[str]):
        from ib_users.interactors.login.validate_user_login_device_details import \
            ValidateUserLoginDevicesDetailsInteractor

        interactor = ValidateUserLoginDevicesDetailsInteractor(
            user_login_devices_storage=self.user_login_device_details_storage)
        interactor.validate_users_login_devices(device_id=device_id)

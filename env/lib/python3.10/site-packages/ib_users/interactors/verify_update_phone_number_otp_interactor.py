import typing
from django.conf import settings
from django.db import transaction

from ib_users.constants import otp_verification_constants
from ib_users.exceptions import custom_exception_constants
from ib_users.interactors.storages import user_accounts_storage as \
    user_accounts_storages
from ib_users.interactors.storages import user_profile_storage as \
    user_profile_storages
from ib_users.interactors.exceptions import user_profile as \
    user_profile_exceptions
from ib_users.interactors.DTOs import common_dtos
from ib_users.interactors.storages import dtos as storage_dtos
from ib_users.exceptions import user_account_exceptions
from ib_users.interactors.storages.user_profile_storage import UserProfileDTO
from ib_users.validators.base_validator import CustomException


class VerifyUpdatePhoneNumberOTPInteractor:

    def __init__(
            self, user_accounts_storage: user_accounts_storages.UserAccountsStorage,
            user_profile_storage: user_profile_storages.UserProfileStorage):
        self.user_accounts_storage = user_accounts_storage
        self.user_profile_storage = user_profile_storage

    def verify_update_phone_number_otp(
            self, user_id: str, otp: str):
        self._validate_user_id(user_id)

        user_updated_phone_details_log_dto = \
            self._get_user_latest_update_phone_number_log_details(user_id)
        self._validate_update_phone_number_details(
            user_updated_phone_details_log_dto)

        phone_number_dto = common_dtos.PhoneNumberDTO(
            country_code=user_updated_phone_details_log_dto.new_country_code,
            phone_number=user_updated_phone_details_log_dto.new_phone_number)

        try:
            self._verify_otp(
                phone_number_dto=phone_number_dto, otp=otp)
        except Exception as exception:
            self._update_user_update_phone_number_verification_status(
                user_updated_phone_details_log_dto.id,
                otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value,
                exception.__class__.__name__)
            raise exception

        self._link_user_new_phone_number_to_user_account(
            user_id=user_id, user_updated_phone_details_log_dto=user_updated_phone_details_log_dto)
        self._update_user_update_phone_number_verification_status(
            user_updated_phone_details_log_dto.id,
            otp_verification_constants.VerificationStatus.VERIFIED.value,
            failure_remarks=None)

    def _get_user_latest_update_phone_number_log_details(self, user_id: str) \
            -> storage_dtos.UserAccountUpdatePhoneLogWithCreationDetailsDTO:
        user_updated_phone_details_log_dto = self.user_accounts_storage \
            .get_user_latest_update_phone_number_log_details(user_id)

        if not user_updated_phone_details_log_dto:
            raise user_profile_exceptions.UserUpdatePhoneDetailsLogDoesNotExist\
                .from_exception_message_DTO(
                    custom_exception_constants.
                    USER_UPDATE_PHONE_NUMBER_LOG_DETAILS_DOES_NOT_EXIST)

        return user_updated_phone_details_log_dto

    def _validate_update_phone_number_details(
            self, user_updated_phone_details_log_dto):
        if user_updated_phone_details_log_dto.verification_status == \
                otp_verification_constants.VerificationStatus.VERIFIED.value:
            raise user_profile_exceptions.PhoneNumberAlreadyUpdatedException\
                .from_exception_message_DTO(
                    custom_exception_constants.USER_PHONE_NUMBER_UPDATED_ALREADY)
        if not settings.SWAP_PHONE_NUMBERS_WHILE_UPDATING:
            self.user_accounts_storage.check_user_exists_with_phone_number(
                common_dtos.PhoneNumberDTO(
                    phone_number=user_updated_phone_details_log_dto.new_phone_number,
                    country_code=user_updated_phone_details_log_dto.new_country_code))

    def _validate_user_id(self, user_id: str):
        is_user_id_exists = self.user_accounts_storage.is_user_id_exists(user_id)
        if not is_user_id_exists:
            raise user_account_exceptions.InvalidUserIdException()

    def _update_user_update_phone_number_verification_status(
            self, user_account_update_phone_details_log_id: str,
            verification_status: otp_verification_constants.VerificationStatus,
            failure_remarks: typing.Optional[str]):
        from ib_common.date_time_utils.get_current_local_date_time import \
            get_current_local_date_time

        verified_datetime = None
        if verification_status == otp_verification_constants.VerificationStatus.VERIFIED.value:
            verified_datetime = get_current_local_date_time()
        self.user_accounts_storage.update_user_update_phone_number_verification_status(
            user_account_update_phone_details_log_id, verification_status,
            failure_remarks, verified_datetime)

    @staticmethod
    def _verify_otp(
            otp: str, phone_number_dto: common_dtos.PhoneNumberDTO):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        otp_service = OTPServiceImpl(
            verify_otp_interactor=VerifyThroughOTPInteractor(
                verification_type=otp_verification_constants.VerificationType
                .VERIFY_UPDATE_PHONE_NUMBER_WITH_OTP))

        otp_service.validate_otp_send_to_phone_number(
            phone_number_dto=phone_number_dto, otp=otp)

    def _link_user_new_phone_number_to_user_account(
            self, user_id: str, user_updated_phone_details_log_dto: storage_dtos.UserAccountUpdatePhoneLogWithCreationDetailsDTO):
        new_phone_number_dto = common_dtos.PhoneNumberDTO(
            country_code=user_updated_phone_details_log_dto.new_country_code,
            phone_number=user_updated_phone_details_log_dto.new_phone_number)
        old_phone_number_dto = common_dtos.PhoneNumberDTO(
            country_code=user_updated_phone_details_log_dto.old_country_code,
            phone_number=user_updated_phone_details_log_dto.old_phone_number)
        if settings.SWAP_PHONE_NUMBERS_WHILE_UPDATING:
            self._swap_if_user_exists_with_phone_number_to_be_updated(
                user_id=user_id,
                new_phone_number_to_be_updated=new_phone_number_dto,
                old_phone_number=old_phone_number_dto)
        else:
            self._update_phone_number_to_user_account(
                user_id=user_id,
                phone_number_dto=new_phone_number_dto)

    @transaction.atomic
    def _swap_if_user_exists_with_phone_number_to_be_updated(
            self, user_id: str, new_phone_number_to_be_updated: common_dtos.PhoneNumberDTO,
            old_phone_number: common_dtos.PhoneNumberDTO):
        try:
            user_id_with_phone_number_to_update = self.user_accounts_storage.get_user_id_given_phone_number(
                phone_number_dto=new_phone_number_to_be_updated)
        except CustomException:
            user_id_with_phone_number_to_update = None

        if user_id_with_phone_number_to_update:
            self.user_accounts_storage.get_users_accounts_details_to_update(
                user_ids=[user_id, user_id_with_phone_number_to_update])
            self.user_accounts_storage.link_phone_number_to_user(
                user_id=user_id,
                phone_number_dto=common_dtos.PhoneNumberDTO(
                    country_code=None, phone_number=None))
            self._update_phone_number_to_user_account(
                user_id=user_id_with_phone_number_to_update,
                phone_number_dto=old_phone_number)

        self._update_phone_number_to_user_account(
            user_id=user_id,
            phone_number_dto=new_phone_number_to_be_updated)

    def _update_phone_number_to_user_account(
            self, user_id: str, phone_number_dto: common_dtos.PhoneNumberDTO):

        self.user_accounts_storage.link_phone_number_to_user(
            user_id=user_id, phone_number_dto=phone_number_dto)
        user_profile_dto = UserProfileDTO(
            phone_number=phone_number_dto.phone_number,
            country_code=phone_number_dto.country_code)
        self.user_profile_storage.update_user_profile(
            user_id=user_id, update_profile_data=user_profile_dto)

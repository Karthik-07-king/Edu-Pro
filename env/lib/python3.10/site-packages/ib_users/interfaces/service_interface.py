from typing import Optional, List

import typing

from ib_users.interactors.DTOs.common_dtos import UserIdsWithTotalDTO
from ib_users.interactors.login.login_with_email_and_otp import EmailAndOTPDTO
from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos import \
    UserResetPasswordOtpPhoneNumberDTO, UserResetPasswordOtpEmailDTO
from ib_users.interfaces.dtos import UpdateUserAccountPhoneNumberDTO
from ib_users.third_party.token_generator_impl import TokenGeneratorImpl

from ib_users.storages.user_password_reset_token_storage_impl import \
    UserPasswordResetTokenStorageImpl

from ib_users.constants.otp_verification_constants import VerificationType, \
    SendOTPThrough
from ib_users.constants.user_account_constants import UserAccountConstants, \
    SocialAccountProviderType
from ib_users.interactors import SendOTPToUserGivenPhoneNumber
from ib_users.interactors import SocialRegistrationInteractor
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithPhoneNumberDTO, CreateAccountWithEmailDTO
from ib_users.interactors.storages.otp_verification_storage import \
    GetOTPDetailsDTO
from ib_users.interactors.storages.user_accounts_storage import PhoneNumberDTO, \
    EmailAndPasswordDTO, UserAccountDTO, UserNameAndPasswordDTO, \
    UserAccountsStorage, UserIdWithPhoneNumberDTO
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensDTO
from ib_users.interactors.user_profile_interactor import UserProfileDTO, \
    GetUserProfileDTO, UserProfileInteractor, CreateUserProfileDTO
from ib_users.presenters.registration_json_presenter import \
    RegistrationJSONPresenter
from ib_users.storages import UserAccountsSQLStorage
from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
from ib_users.storages.user_social_account_sql_storage import \
    UserSocialAccountsSQLStorage
from ib_users.storages.user_login_device_details_sql_storage import \
    UserLoginDeviceDetailsSQLStorage
from ib_users.third_party.oauth_user_auth_tokens_service import \
    OAuthUserAuthTokensService
from ib_users.third_party.social_account import FacebookAccount, GoogleAccount
from ib_users.interfaces import dtos as interface_dtos
from ib_users.interfaces import enums as interface_enums


class ServiceInterface:

    @staticmethod
    def create_user_account_with_phone_number(
            phone_number: str, country_code: str,
            password: Optional[str] = None, username: Optional[str] = None,
            iso_country_code: typing.Optional[str] = None) -> str:
        from ib_users.interactors.registration. \
            phone_number_registration_interactor import \
            PhoneNumberRegistrationInteractor
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.presenters.registration_json_presenter import \
            RegistrationJSONPresenter
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        interactor = PhoneNumberRegistrationInteractor(
            accounts_storage=UserAccountsSQLStorage(),
            presenter=RegistrationJSONPresenter(),
            phone_numbers_validator=PhoneNumberValidatorImpl()
        )

        if not password:
            password = UserAccountConstants.DEFAULT_PASSWORD
        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code,
            password=password,
            username=username,
            iso_country_code=iso_country_code)
        user_id_dict = interactor.create_account_with_phone_number(
            create_account_dto
        )
        return user_id_dict['user_id']

    @staticmethod
    def send_otp_to_verify_account_phone_number(
            user_id: str, send_otp_through=SendOTPThrough.SMS.value
    ):
        from ib_users.interactors.user_profile_interactor \
            import UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage \
            import UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter \
            import UserProfileJSONPresenter
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.storages import UserAccountsSQLStorage

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        accounts_storage = UserAccountsSQLStorage()

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP)

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        if send_otp_through == SendOTPThrough.SMS.value:
            send_otp_through = SendOTPThrough.SMS
        elif send_otp_through == SendOTPThrough.CALL.value:
            send_otp_through = SendOTPThrough.CALL

        interactor.verify_user_phone_number(
            otp_service=OTPServiceImpl(verify_otp_interactor),
            accounts_storage=accounts_storage, user_id=user_id,
            send_otp_through=send_otp_through
        )

    @staticmethod
    def verify_account_phone_number_otp(user_id: str, otp: str):
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        accounts_storage = UserAccountsSQLStorage()
        otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP)

        interactor.verify_and_link_user_phone_number_to_account(
            accounts_storage=accounts_storage,
            otp_service=OTPServiceImpl(otp_interactor),
            user_id=user_id,
            otp=otp
        )

    @staticmethod
    def create_user_account_with_email(
            email: str,
            password: Optional[str] = None, username: Optional[str] = None
    ) -> str:
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.presenters.registration_json_presenter import \
            RegistrationJSONPresenter
        from ib_users.interactors.registration.email_registration_interactor \
            import EmailRegistrationInteractor

        if not password:
            password = UserAccountConstants.DEFAULT_PASSWORD
        storage = UserAccountsSQLStorage()
        presenter = RegistrationJSONPresenter()
        interactor = EmailRegistrationInteractor(
            accounts_storage=storage, presenter=presenter)

        create_account_dto = CreateAccountWithEmailDTO(
            email=email,
            password=password,
            username=username
        )
        user_id_dict = interactor.create_account_with_email(
            create_account_dto
        )
        return user_id_dict['user_id']

    @staticmethod
    def send_otp_to_verify_account_email(
            user_id: str
    ):
        from ib_users.interactors.user_profile_interactor \
            import UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage \
            import UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter \
            import UserProfileJSONPresenter
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.storages import UserAccountsSQLStorage

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        accounts_storage = UserAccountsSQLStorage()

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_EMAIL_WITH_OTP)

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        interactor.verify_user_email(
            otp_service=OTPServiceImpl(verify_otp_interactor),
            accounts_storage=accounts_storage, user_id=user_id
        )

    @staticmethod
    def verify_account_email_otp(user_id: str, otp: str):
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        accounts_storage = UserAccountsSQLStorage()
        otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_EMAIL_WITH_OTP)

        interactor.verify_and_link_user_email_to_account(
            accounts_storage=accounts_storage,
            otp_service=OTPServiceImpl(otp_interactor),
            user_id=user_id,
            otp=otp
        )

    @staticmethod
    def update_user_profile(user_id: str, user_profile: UserProfileDTO) -> \
            GetUserProfileDTO:
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter
        from ib_users.storages import UserAccountsSQLStorage

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()
        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)
        accounts_storage = UserAccountsSQLStorage()

        updated_profile_data = interactor.update_user_profile(
            user_id=user_id, update_profile_data=user_profile,
            accounts_storage=accounts_storage)
        return GetUserProfileDTO(**updated_profile_data)

    @staticmethod
    def request_login_otp(
            phone_number: str, country_code: str,
            send_otp_through=SendOTPThrough.SMS.value):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                          country_code=country_code)

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.LOGIN_WITH_OTP)
        otp_sender_to_user = SendOTPToUserGivenPhoneNumber(
            storage=UserAccountsSQLStorage(),
            otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_number_validator=PhoneNumberValidatorImpl())

        if send_otp_through == SendOTPThrough.SMS.value:
            send_otp_through = SendOTPThrough.SMS
        elif send_otp_through == SendOTPThrough.CALL.value:
            send_otp_through = SendOTPThrough.CALL
        otp_sender_to_user.send_otp(
            phone_number_dto=phone_number_dto, send_otp_through=send_otp_through)

    @staticmethod
    def verify_login_otp(
            phone_number: str, country_code: str, otp: str,
            device_id: str = None) -> UserAuthTokensDTO:
        from ib_users.utils.views.login_controllers_common import \
            get_login_interactor_with_phone_number_otp_and_dto_given_request_data
        from ib_users.utils.views.login_controllers_common import \
            validate_inputs_and_get_auth_tokens

        request_data = {
            "phone_number": phone_number,
            "country_code": country_code,
            "otp": otp
        }
        login_interactor, phone_number_login_dto = \
            get_login_interactor_with_phone_number_otp_and_dto_given_request_data(
                request_data
            )

        auth_tokens = validate_inputs_and_get_auth_tokens(
            login_interactor, phone_number_login_dto, device_id=device_id
        )
        return UserAuthTokensDTO(**auth_tokens)

    @staticmethod
    def get_user_id_give_phone_number_and_country_code(
            phone_number: str, country_code: str) -> str:
        from ib_users.interactors.user_account_interactor import \
            UserAccountInteractor
        from ib_users.interactors.storages.user_social_accounts_storage \
            import UserSocialAccountsStorage

        account_storage = UserAccountsSQLStorage()
        social_account_storage = UserSocialAccountsStorage()
        interactor = UserAccountInteractor(
            account_storage=account_storage,
            social_account_storage=social_account_storage
        )
        return interactor.get_user_id_given_phone_number(
            phone_number=phone_number,
            country_code=country_code
        )

    @staticmethod
    def get_user_id_give_email(email: str) -> str:
        from ib_users.interactors.user_account_interactor import \
            UserAccountInteractor
        from ib_users.interactors.storages.user_social_accounts_storage \
            import UserSocialAccountsStorage

        account_storage = UserAccountsSQLStorage()
        social_account_storage = UserSocialAccountsStorage()
        interactor = UserAccountInteractor(
            account_storage=account_storage,
            social_account_storage=social_account_storage
        )
        return interactor.get_user_id_given_email(email=email)

    @staticmethod
    def get_user_profile(user_id: str) -> GetUserProfileDTO:
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()
        user_profile_interactor = UserProfileInteractor(
            storage=storage, presenter=presenter)
        user_profile = user_profile_interactor.get_user_profile(
            user_id=user_id)
        return GetUserProfileDTO(**user_profile)

    @staticmethod
    def get_user_profile_bulk(user_ids: List[str]) -> List[GetUserProfileDTO]:
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()
        user_profile_interactor = UserProfileInteractor(
            storage=storage, presenter=presenter)
        user_profiles = user_profile_interactor.get_user_profiles(
            user_ids=user_ids)
        return [GetUserProfileDTO(**user_profile)
                for user_profile in user_profiles]

    @staticmethod
    def create_user_profile(user_id: str, user_profile: CreateUserProfileDTO):
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage

        if user_profile.dob:
            user_profile.dob = user_profile.dob.strftime('%Y-%m-%d')

        storage = UserProfileSQLStorage()
        interactor = UserProfileInteractor(storage=storage, presenter=None)
        accounts_storage = UserAccountsSQLStorage()

        return interactor.create_user_profile(
            user_id=user_id, create_profile_data=user_profile,
            accounts_storage=accounts_storage
        )

    @staticmethod
    def create_auth_tokens_for_user(
            user_id: str, expiry_in_seconds=None, device_id: str = None):
        from ib_users.interactors.login.generate_auth_tokens_interactor import \
            GenerateAuthTokensInteractor
        from ib_users.third_party.oauth_user_auth_tokens_service import \
            OAuthUserAuthTokensService

        oauth2_sql_storage = OAuth2SQLStorage()
        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_sql_storage)
        account_storage = UserAccountsSQLStorage()

        user_auth_token_interactor = GenerateAuthTokensInteractor(
            user_auth_tokens_generator=login_token_generator,
            user_account_storage=account_storage,
            user_login_device_details_storage=UserLoginDeviceDetailsSQLStorage())

        auth_token_dto = user_auth_token_interactor.generate_auth_tokens(
            user_id=user_id, device_id=device_id,
            expiry_in_seconds=expiry_in_seconds)
        return auth_token_dto

    @staticmethod
    def create_auth_tokens_for_user_client(
            user_id: str, client_id: str, device_id: str = None, expiry_in_seconds=None,
            should_expire_other_client_access_tokens: bool = False):
        from ib_users.interactors.login.generate_auth_tokens_interactor import \
            GenerateAuthTokensInteractor
        from ib_users.third_party.oauth_user_auth_tokens_service import \
            OAuthUserAuthTokensService

        oauth2_sql_storage = OAuth2SQLStorage()
        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_sql_storage)
        account_storage = UserAccountsSQLStorage()

        user_auth_token_interactor = GenerateAuthTokensInteractor(
            user_auth_tokens_generator=login_token_generator,
            user_account_storage=account_storage,
            user_login_device_details_storage=UserLoginDeviceDetailsSQLStorage())

        auth_token_dto = user_auth_token_interactor.generate_auth_tokens_for_client(
            user_id=user_id, device_id=device_id,
            expiry_in_seconds=expiry_in_seconds, client_id=client_id,
            should_expire_other_client_access_tokens=should_expire_other_client_access_tokens)
        return auth_token_dto

    @staticmethod
    def link_phone_number_to_user_profile_without_verification(
            user_id: str,
            phone_number_dto: PhoneNumberDTO
    ):
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        storage = UserProfileSQLStorage()
        accounts_storage = UserAccountsSQLStorage()
        interactor = UserProfileInteractor(storage=storage, presenter=None)
        interactor.link_user_phone_number_to_account(
            user_id=user_id,
            phone_number_dto=phone_number_dto,
            accounts_storage=accounts_storage
        )

    @staticmethod
    def link_email_to_user_account(user_id: str):
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        storage = UserProfileSQLStorage()
        accounts_storage = UserAccountsSQLStorage()
        interactor = UserProfileInteractor(storage=storage, presenter=None)
        interactor.link_user_email_to_account(
            user_id=user_id,
            accounts_storage=accounts_storage
        )

    @staticmethod
    def update_password(user_id: str, new_password: str,
                        current_password: str):
        from ib_users.interactors.user_credentials. \
            update_user_password_interactor import UpdateUserPasswordInteractor

        storage = UserAccountsSQLStorage()
        interactor = UpdateUserPasswordInteractor(storage=storage)

        interactor.update_user_password(
            user_id=user_id,
            current_password=current_password,
            new_password=new_password
        )

    @staticmethod
    def send_reset_password_otp_to_email(email: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials.send_otp_email_interactor \
            import SendOTPEmailInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        interactor = SendOTPEmailInteractor(storage=storage,
                                            otp_service=otp_service)

        interactor.send_otp_to_email(email=email)

    @staticmethod
    def send_reset_password_otp_to_phone_number(country_code: str,
                                                phone_number: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials. \
            send_otp_phone_number_interactor import \
            SendOTPPhoneNumberInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        phone_number_dto = PhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code)

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)

        interactor = SendOTPPhoneNumberInteractor(
            storage=storage, otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_numbers_validator=PhoneNumberValidatorImpl())

        interactor.send_otp_to_phone_number(
            phone_number_dto=phone_number_dto
        )

    @staticmethod
    def verify_reset_password_otp_to_email(email: str, otp: str,
                                           new_password: str):
        from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos \
            import ResetPasswordWithOTPEmailDTO
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials. \
            reset_password_with_otp_email_interactor import \
            ResetPasswordWithOTPEmailInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        reset_password_dto = ResetPasswordWithOTPEmailDTO(
            email=email, otp=otp, new_password=new_password)

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        interactor = ResetPasswordWithOTPEmailInteractor(
            storage=storage, otp_service=otp_service
        )

        interactor.reset_password_with_otp_email(
            reset_password_dto=reset_password_dto
        )

    @staticmethod
    def verify_reset_password_otp_to_phone_number(
            phone_number: str, country_code: str, otp: str, new_password: str):

        from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos \
            import ResetPasswordWithOTPPhoneNumberDTO
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials. \
            reset_password_with_otp_phone_number_interactor import \
            ResetPasswordWithOTPPhoneNumberInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        reset_password_dto = ResetPasswordWithOTPPhoneNumberDTO(
            phone_number=phone_number, country_code=country_code,
            otp=otp, new_password=new_password)

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        phone_number_validator = PhoneNumberValidatorImpl()
        interactor = ResetPasswordWithOTPPhoneNumberInteractor(
            storage=storage,
            otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_number_validator=phone_number_validator)

        interactor.reset_password_with_otp_phone_number(
            reset_password_dto=reset_password_dto)

    @staticmethod
    def login_with_device_details(login_type: str, device_id: str, **kwargs):
        from ib_users.utils.views.login_controllers_common import \
            get_login_interactor_and_login_dto_for_login_type

        login_interactor, login_dto = \
            get_login_interactor_and_login_dto_for_login_type(
                login_type=login_type,
                request_data=kwargs
            )

        from ib_users.utils.views.login_controllers_common import \
            login_user_to_device
        return login_user_to_device(
            login_interactor=login_interactor,
            login_dto=login_dto,
            device_id=device_id
        )

    @staticmethod
    def refresh_auth_tokens(access_token, refresh_token):
        from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
        from ib_users.third_party.oauth_user_auth_tokens_service import \
            OAuthUserAuthTokensService
        from ib_users.interactors import RefreshAuthTokens
        from ib_users.presenters import UserLoginJSONPresenter
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage

        oauth2_sql_storage = OAuth2SQLStorage()

        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_sql_storage)
        accounts_storage = UserAccountsSQLStorage()

        login_interactor = RefreshAuthTokens(
            login_token_generator=login_token_generator,
            presenter=UserLoginJSONPresenter(),
            storage=UserLoginDeviceDetailsSQLStorage(),
            accounts_storage=accounts_storage
        )

        success_response_json = login_interactor.refresh_tokens(
            refresh_token=refresh_token,
            access_token=access_token)
        return UserAuthTokensDTO(**success_response_json)

    @staticmethod
    def send_login_otp_to_phone_number(
            phone_number: str, country_code: str,
            send_otp_through=SendOTPThrough.SMS.value):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                          country_code=country_code)

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.LOGIN_WITH_OTP)
        otp_sender_to_user = SendOTPToUserGivenPhoneNumber(
            storage=UserAccountsSQLStorage(),
            otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_number_validator=PhoneNumberValidatorImpl())
        if send_otp_through == SendOTPThrough.SMS.value:
            send_otp_through = SendOTPThrough.SMS
        elif send_otp_through == SendOTPThrough.CALL.value:
            send_otp_through = SendOTPThrough.CALL
        otp_sender_to_user.send_otp(
            phone_number_dto=phone_number_dto, send_otp_through=send_otp_through)

    @staticmethod
    def get_user_otp_by_phone_number(
            phone_number: str, country_code: str,
            verification_type: VerificationType
    ) -> GetOTPDetailsDTO:
        from ib_users.interactors.user_otp_interactor import UserOTPInteractor
        from ib_users.storages.otp_verification_sql_storage import \
            OTPVerificationSQLStorage

        interactor = UserOTPInteractor(storage=OTPVerificationSQLStorage())
        return interactor.get_otp_details_for_phone_number(
            phone_number=phone_number,
            country_code=country_code,
            verification_type=verification_type
        )

    @staticmethod
    def deactivate_user(user_id):
        from ib_users.interactors.deactivate_user_interactor import \
            DeactivateUserInteractor

        account_storage = UserAccountsSQLStorage()
        oauth2_storage = OAuth2SQLStorage()

        auth_service = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_storage
        )

        interactor = DeactivateUserInteractor(
            auth_service=auth_service,
            storage=account_storage
        )
        return interactor.deactivate(user_id=user_id)

    @staticmethod
    def get_user_auth_tokens_for_login_with_email_and_password(
            email: str, password: str, device_id: str = None) -> UserAuthTokensDTO:
        storage = UserAccountsSQLStorage()
        from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage

        user_login_device_details_storage = UserLoginDeviceDetailsSQLStorage()
        oauth2_sql_storage = OAuth2SQLStorage()

        from ib_users.interactors import LoginWithEmail
        interactor = LoginWithEmail(
            storage=storage,
            user_login_device_details_storage=user_login_device_details_storage)
        email_login_dto = EmailAndPasswordDTO(email, password)
        return interactor.get_auth_tokens_given_login_data(
            email_login_dto=email_login_dto,
            oauth2_sql_storage=oauth2_sql_storage,
            device_id=device_id)

    @staticmethod
    def get_reset_password_token_for_reset_password(
            email: str, token_expiry_in_seconds: int) -> str:
        accounts_storage = UserAccountsSQLStorage()
        token_storage = UserPasswordResetTokenStorageImpl()
        token_generator = TokenGeneratorImpl()
        from ib_users.interactors.user_credentials.get_token_for_rest_password import \
            GetTokenForResetPassword
        interactor = GetTokenForResetPassword(
            accounts_storage, token_storage, token_generator)
        return interactor.get_reset_password_token_for_reset_password(
            email=email, token_expiry_in_seconds=token_expiry_in_seconds)

    @staticmethod
    def reset_password_for_given_user_password_reset_token(
            token: str, new_password: str):
        token_storage = UserPasswordResetTokenStorageImpl()
        accounts_storage = UserAccountsSQLStorage()
        from ib_users.interactors.user_credentials.set_password_given_user_token_interactor import \
            SetPasswordGivenUserTokenInteractor
        interactor = SetPasswordGivenUserTokenInteractor(
            token_storage=token_storage, accounts_storage=accounts_storage)
        return interactor.set_password_given_user_password_reset_token(
            reset_password_token=token,
            new_password=new_password)

    @staticmethod
    def logout_in_all_devices(user_id: str) -> List[str]:
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage
        user_accounts_sql_storage = UserLoginDeviceDetailsSQLStorage()
        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=OAuth2SQLStorage())
        from ib_users.interactors import LogoutInDevicesImpl
        interactor = LogoutInDevicesImpl(
            storage=user_accounts_sql_storage,
            login_token_generator=login_token_generator)
        return interactor.logout_in_all_devices(user_id=user_id)

    @staticmethod
    def logout_in_devices_except_of_given_access_tokens(
            user_id: str, access_tokens: List[str]):
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage
        user_accounts_sql_storage = UserLoginDeviceDetailsSQLStorage()
        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=OAuth2SQLStorage())

        from ib_users.interactors import LogoutInDevicesImpl
        interactor = LogoutInDevicesImpl(
            storage=user_accounts_sql_storage,
            login_token_generator=login_token_generator)

        return interactor.logout_in_devices_except_of_given_access_tokens(
            user_id=user_id, access_tokens=access_tokens)

    @staticmethod
    def logout_user_from_client(user_id: str, client_id: str):
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage
        user_accounts_sql_storage = UserLoginDeviceDetailsSQLStorage()
        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=OAuth2SQLStorage())

        from ib_users.interactors import LogoutInDevicesImpl
        interactor = LogoutInDevicesImpl(
            storage=user_accounts_sql_storage,
            login_token_generator=login_token_generator)

        interactor.logout_user_from_client(user_id=user_id, client_id=client_id)

    @staticmethod
    def validate_phone_number_and_country_code(phone_number: str,
                                               country_code: str):
        from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl
        phone_number_dto = PhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code
        )
        validator = PhoneNumberValidatorImpl()
        validator.validate(phone_number_DTO=phone_number_dto)

    @staticmethod
    def validate_email(email: str):
        from ib_users.validators.email_validator import EmailValidator
        validator = EmailValidator()
        validator.validate(value=email)

    @staticmethod
    def get_all_user_account_dtos() -> List[UserAccountDTO]:
        from ib_users.interactors.user_accounts \
            .get_all_users_accounts_interactor import \
            GetAllUsersAccountsInteractor
        from ib_users.storages.user_accounts_sql_storage import \
            UserAccountsSQLStorage
        storage = UserAccountsSQLStorage()
        interactor = GetAllUsersAccountsInteractor(storage=storage)
        user_accounts_dtos = interactor.get_all_users_accounts_wrapper()
        return user_accounts_dtos

    @staticmethod
    def validate_is_emails_already_related_to_other_users(emails: List[str]):
        from ib_users.interactors.user_accounts. \
            check_is_emails_linked_interactor import \
            CheckEmailsAlreadyLinkedInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        storage = UserProfileSQLStorage()
        interactor = CheckEmailsAlreadyLinkedInteractor(storage=storage)
        interactor.check_is_emails_already_linked_wrapper(email_ids=emails)

    @staticmethod
    def validate_is_user_ids_already_exists(user_ids: List[str]):
        from ib_users.storages.user_accounts_sql_storage import \
            UserAccountsSQLStorage
        from ib_users.interactors.user_accounts. \
            check_is_user_ids_exists_interactor import \
            CheckIsUserIdsExistsInteractor
        storage = UserAccountsSQLStorage()
        interactor = CheckIsUserIdsExistsInteractor(storage=storage)
        interactor.check_is_user_ids_already_exists_wrapper(user_ids=user_ids)

    def create_user_account_and_user_profile(
            self, user_profile_dto: CreateUserProfileDTO):
        user_id = self.create_user_account_with_phone_number(
            phone_number=user_profile_dto.phone_number,
            country_code=user_profile_dto.country_code
        )

        self.create_user_profile(
            user_id=user_id,
            user_profile=user_profile_dto
        )

    @staticmethod
    def get_or_create_referral_code(user_id: str) -> str:
        from ib_users.interactors.referrals_interactor import \
            ReferralsInteractor
        from ib_users.storages.referrals_storage_impl import \
            ReferralsSQLStorage
        from ib_users.presenters.referrals_presenter_impl import \
            ReferralsPresenterJSON

        storage = ReferralsSQLStorage()
        presenter = ReferralsPresenterJSON()
        interactor = ReferralsInteractor(
            storage=storage,
            presenter=presenter
        )

        referral_code = interactor.get_or_create_referral_code(
            user_id=user_id
        )
        return referral_code

    @staticmethod
    def login_with_username_and_password(
            username: str, password: str, device_id: str = None):
        from ib_users.interactors import LoginWithUsername
        from ib_users.utils.views.login_controllers_common \
            import validate_inputs_and_get_auth_tokens
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage
        user_login_device_details_storage = UserLoginDeviceDetailsSQLStorage()
        login_dto = UserNameAndPasswordDTO(username, password)
        storage = UserAccountsSQLStorage()
        login_interactor = LoginWithUsername(
            storage=storage,
            user_login_device_details_storage=user_login_device_details_storage)

        auth_tokens = validate_inputs_and_get_auth_tokens(
            login_interactor=login_interactor,
            login_dto=login_dto, device_id=device_id)
        storage.set_user_last_login(user_id=auth_tokens['user_id'])
        return auth_tokens

    @staticmethod
    def get_user_id_give_username(username: str):
        from ib_users.interactors.user_accounts.get_user_id_by_username \
            import GetUserIdByUsernameInteractor
        from ib_users.storages.user_accounts_sql_storage import \
            UserAccountsSQLStorage
        storage = UserAccountsSQLStorage()
        interactor = GetUserIdByUsernameInteractor(storage=storage)
        return interactor.get_user_id_by_username_wrapper(
            username=username
        )

    @staticmethod
    def send_reset_password_otp_to_recovery_phone_number(
            phone_number: str, country_code: str, user_id: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.constants.otp_constants import OTPMessageFormatConstants

        phone_number_dto = PhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code)

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)

        otp_service = OTPServiceImpl(verify_otp_interactor)

        otp_service.send_otp_to_user_recovery_phone_number(
            phone_number=phone_number_dto,
            template=OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD,
            user_id=user_id
        )

    @staticmethod
    def send_reset_password_otp_to_recovery_email(email: str, user_id: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.constants.otp_constants import OTPMessageFormatConstants

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        otp_service.send_otp_to_user_recovery_email(
            email=email,
            template=OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD,
            subject=OTPMessageFormatConstants.OTP_SUBJECT_TO_RESET_PASSWORD,
            user_id=user_id
        )

    @staticmethod
    def verify_reset_password_otp_to_recovery_phone_number(
            reset_password_dto: UserResetPasswordOtpPhoneNumberDTO):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_accounts. \
            verify_reset_password_otp_to_phone_number_interactor import \
            VerifyResetPasswordOTPToPhoneNumberInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)

        interactor = VerifyResetPasswordOTPToPhoneNumberInteractor(
            storage=storage,
            otp_service=OTPServiceImpl(verify_otp_interactor))

        interactor.reset_password_with_otp_phone_number(
            reset_password_dto=reset_password_dto)

    @staticmethod
    def verify_reset_password_otp_to_recovery_email(
            reset_password_dto: UserResetPasswordOtpEmailDTO):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_accounts. \
            verify_reset_password_otp_to_email_interactor import \
            VerifyResetPasswordOTPToEmailInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        interactor = VerifyResetPasswordOTPToEmailInteractor(
            storage=storage, otp_service=otp_service
        )

        interactor.reset_password_with_otp_email(
            reset_password_dto=reset_password_dto
        )

    @staticmethod
    def get_user_ids_by_name_or_email(search_value: str,
                                      offset: int,
                                      limit: int) -> UserIdsWithTotalDTO:
        from ib_users.interactors.user_accounts.get_user_ids_interactor import \
            GetUserIdsInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        profile_storage = UserProfileSQLStorage()
        interactor = GetUserIdsInteractor(
            profile_storage=profile_storage
        )
        user_ids_with_count_dto = interactor.get_user_ids_wrapper(
            search_value=search_value,
            offset=offset,
            limit=limit
        )
        return user_ids_with_count_dto

    @staticmethod
    def get_user_ids_by_email_ids(email_ids: List[str]) -> List[str]:
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.interactors.user_accounts \
            .get_user_ids_by_email_ids_interactor import \
            GetUserIdsByEmailIdsInteractor

        profile_storage = UserProfileSQLStorage()
        interactor = GetUserIdsByEmailIdsInteractor(
            profile_storage=profile_storage)

        user_ids = interactor.get_user_ids_by_email_ids_wrapper(
            email_ids=email_ids
        )
        return user_ids

    @staticmethod
    def create_user_account_with_google_details(google_token):
        presenter = RegistrationJSONPresenter()
        interactor = SocialRegistrationInteractor(
            accounts_storage=UserSocialAccountsSQLStorage(),
            presenter=presenter,
            social_sdk=GoogleAccount())

        return interactor.create_account_with_social_details(
            social_provider=SocialAccountProviderType.GOOGLE.value,
            access_token=google_token)

    @staticmethod
    def create_user_account_with_facebook_details(fb_token):
        presenter = RegistrationJSONPresenter()
        interactor = SocialRegistrationInteractor(
            accounts_storage=UserSocialAccountsSQLStorage(),
            presenter=presenter,
            social_sdk=FacebookAccount())

        return interactor.create_account_with_social_details(
            social_provider=SocialAccountProviderType.FACEBOOK.value,
            access_token=fb_token
        )

    @staticmethod
    def login_with_facebook(fb_token, device_id: str = None) -> UserAuthTokensDTO:

        from ib_users.interactors import LoginWithFB
        from ib_users.utils.views.login_controllers_common import \
            validate_inputs_and_get_auth_tokens_dto
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage
        user_login_device_details_storage = UserLoginDeviceDetailsSQLStorage()

        login_interactor = LoginWithFB(
            storage=UserSocialAccountsSQLStorage(), fb_service=FacebookAccount(),
            user_login_device_details_storage=user_login_device_details_storage)
        auth_tokens_dto = validate_inputs_and_get_auth_tokens_dto(
            login_interactor, fb_token, device_id=device_id)
        return auth_tokens_dto

    @staticmethod
    def create_profile_with_facebook_details(user_id, fb_token):

        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter
        from ib_users.storages.user_accounts_sql_storage import \
            UserAccountsSQLStorage
        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        interactor = UserProfileInteractor(
            storage=storage,
            presenter=presenter
        )

        interactor.create_user_profile_from_social_account(
            user_id=user_id,
            social_sdk=FacebookAccount(),
            accounts_storage=UserAccountsSQLStorage(),
            access_token=fb_token
        )

    @staticmethod
    def send_login_otp_to_email(email: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors import SendOTPToUserGivenEmail
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.LOGIN_WITH_OTP)

        otp_sender_to_user = SendOTPToUserGivenEmail(
            storage=UserAccountsSQLStorage(),
            otp_service=OTPServiceImpl(verify_otp_interactor)
        )
        otp_sender_to_user.send_otp(email=email)

    @staticmethod
    def login_with_email_and_otp(email: str, otp: str, device_id: str = None) -> str:
        from ib_users.interactors import LoginWithEmailAndOTP
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage
        user_login_device_details_storage = UserLoginDeviceDetailsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.LOGIN_WITH_OTP)
        email_login_dto = EmailAndOTPDTO(
            email=email,
            otp=otp)
        interactor = LoginWithEmailAndOTP(
            storage=UserAccountsSQLStorage(),
            otp_service=OTPServiceImpl(verify_otp_interactor),
            user_login_device_details_storage=user_login_device_details_storage)

        user_id = interactor.get_user_id_for_given_login_data(
            email_login_dto=email_login_dto, device_id=device_id)

        return user_id

    @staticmethod
    def get_user_ids_for_given_phone_numbers(
            phone_number_dtos: typing.List[PhoneNumberDTO]
            ) -> typing.List[UserIdWithPhoneNumberDTO]:
        from ib_users.interactors.user_accounts.get_user_ids_for_given_phone_numbers_interactor \
            import GetUserIdsForGivenPhoneNumbersInteractor
        from ib_users.storages.user_accounts_sql_storage import UserAccountsSQLStorage

        account_storage = UserAccountsSQLStorage()
        interactor = GetUserIdsForGivenPhoneNumbersInteractor(
            account_storage=account_storage)

        return interactor.get_user_ids_for_given_phone_numbers(
            phone_number_with_country_code_dtos=phone_number_dtos)

    @staticmethod
    def _get_user_profile_storage():
        from ib_users.storages.user_profile_sql_storage \
            import UserProfileSQLStorage

        return UserProfileSQLStorage()

    @staticmethod
    def _get_user_account_storage():
        from ib_users.storages import UserAccountsSQLStorage

        return UserAccountsSQLStorage()

    def create_or_update_user_education_details(
            self, user_education_details: interface_dtos.UpdateUserEducationDetailsDTO):
        from ib_users.interactors.user_profile. \
            create_or_update_user_education_details_interactor import \
            CreateOrUpdateUserEducationDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = CreateOrUpdateUserEducationDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        interactor.create_or_update_user_education_details(
            user_education_details=user_education_details)

    def create_or_update_user_profile_details(
            self, user_profile_details: interface_dtos.UpdateUserProfileDetailsDTO):
        from ib_users.interactors.user_profile. \
            create_or_update_user_profile_details_interactor import \
            CreateOrUpdateUserProfileDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = CreateOrUpdateUserProfileDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)

    def create_or_update_user_professional_details(
            self, user_professional_details: interface_dtos.UpdateUserProfessionalDetailsDTO):
        from ib_users.interactors.user_profile. \
            create_or_update_user_professional_details_interactor import \
            CreateOrUpdateUserProfessionalDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = CreateOrUpdateUserProfessionalDetailsInteractor(
            account_storage=user_account_storage,
            profile_storage=user_profile_storage)
        interactor.create_or_update_user_professional_details(
            update_user_professional_details_dto=user_professional_details)

    def create_or_update_user_address_details(
            self, user_id: str, address_details: typing.List[interface_dtos.UpdateAddressDetailsDTO]):
        from ib_users.interactors.user_profile. \
            create_or_update_user_address_details_interactor import \
            CreateOrUpdateUserAddressDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = CreateOrUpdateUserAddressDetailsInteractor(
            account_storage=user_account_storage,
            profile_storage=user_profile_storage)
        interactor.create_or_update_user_address_details(
            user_id=user_id, address_details=address_details)

    def get_user_profile_complete_details(
            self, user_id: str) -> interface_dtos.UserCompleteProfileDetailsDTO:
        from ib_users.interactors.user_profile.\
            get_user_complete_profile_details_interactor import \
            GetUserProfileCompleteDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = GetUserProfileCompleteDetailsInteractor(
            user_profile_storage=user_profile_storage,
            user_account_storage=user_account_storage)
        user_profile_details = interactor.get_user_profile_complete_details(
            user_id=user_id)

        return user_profile_details

    def create_or_update_user_guardian_details(
            self, user_guardian_details: interface_dtos.UserGuardianDetailsDTO):
        from ib_users.interactors.user_profile. \
            create_or_update_user_guardian_details_interactor import \
            CreateOrUpdateUserGuardianDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = CreateOrUpdateUserGuardianDetailsInteractor(
            user_profile_storage=user_profile_storage,
            user_account_storage=user_account_storage)
        interactor.create_or_update_user_guardian_details(
            user_guardian_details=user_guardian_details)

    def get_user_address_details(
            self, user_id: str) -> typing.List[interface_dtos.AddressDetailsDTO]:
        from ib_users.interactors.user_profile.get_user_address_details_interactor import \
            GetUserAddressDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = GetUserAddressDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        return interactor.get_user_address_details(user_id=user_id)

    def get_user_education_details(
            self, user_id: str) -> interface_dtos.UserEducationDetailsDTO:
        from ib_users.interactors.user_profile.get_user_education_details_interactor import \
            GetUserEducationDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = GetUserEducationDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        return interactor.get_user_education_details(user_id=user_id)

    def get_user_guardian_details(
            self, user_id: str) -> interface_dtos.UserGuardianDetailsDTO:
        from ib_users.interactors.user_profile.get_user_guardian_details_interactor import \
            GetUserGuardianDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = GetUserGuardianDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        return interactor.get_user_guardian_details(user_id=user_id)

    def get_user_professional_details(
            self, user_id: str) -> interface_dtos.UserProfessionalDetailsDTO:
        from ib_users.interactors.user_profile.get_user_professional_details_interactor import \
            GetUserProfessionalDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = GetUserProfessionalDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        return interactor.get_user_professional_details(user_id=user_id)

    def get_user_profiles_with_contact_details(
            self, user_ids: typing.List[str]) -> typing.List[interface_dtos.ProfileDetailsDTO]:
        from ib_users.interactors.user_profile.get_user_profiles_with_contact_details_interactor import \
            GetUserProfilesWithContactDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = GetUserProfilesWithContactDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        return interactor.get_user_profiles_with_contact_details(
            user_ids=user_ids)

    def create_or_update_user_social_profile_details(
            self, user_id: str, social_provider: typing.Optional[interface_enums.SocialProvider],
            profile_link: typing.Optional[str]):
        from ib_users.interactors.user_profile.\
            create_or_update_user_social_profile_details_interactor import \
            CreateOrUpdateUserSocialProfileDetailsInteractor

        user_profile_storage = self._get_user_profile_storage()
        user_account_storage = self._get_user_account_storage()

        interactor = CreateOrUpdateUserSocialProfileDetailsInteractor(
            user_account_storage=user_account_storage,
            user_profile_storage=user_profile_storage)
        return interactor.create_or_update_user_social_profile_details(
            user_id=user_id, social_provider=social_provider, profile_link=profile_link)

    @staticmethod
    def update_user_account_phone_number(
            update_user_account_phone_number_dto:
            UpdateUserAccountPhoneNumberDTO):

        from ib_users.interactors\
            .update_user_account_phone_number_interactor \
            import UpdateUserAccountPhoneNumberInteractor
        from ib_users.storages.user_accounts_sql_storage \
            import UserAccountsSQLStorage

        interactor = UpdateUserAccountPhoneNumberInteractor(
            UserAccountsSQLStorage())

        send_otp_through = None
        if update_user_account_phone_number_dto.send_otp_through == SendOTPThrough.SMS.value:
            send_otp_through = SendOTPThrough.SMS
        elif update_user_account_phone_number_dto.send_otp_through == SendOTPThrough.CALL.value:
            send_otp_through = SendOTPThrough.CALL

        update_user_account_phone_number_dto.send_otp_through = send_otp_through
        interactor.update_user_account_phone_number(
            update_user_account_phone_number_dto)

    @staticmethod
    def send_otp_to_user_updated_phone_number(
            user_id: str, send_otp_through: SendOTPThrough):
        from ib_users.interactors.login\
            .send_otp_to_user_updated_phone_number_interactor \
            import SendOTPToUserUpdatedPhoneNumber
        from ib_users.storages.user_accounts_sql_storage \
            import UserAccountsSQLStorage

        interactor = SendOTPToUserUpdatedPhoneNumber(
            UserAccountsSQLStorage())

        if send_otp_through == SendOTPThrough.SMS.value:
            send_otp_through = SendOTPThrough.SMS
        elif send_otp_through == SendOTPThrough.CALL.value:
            send_otp_through = SendOTPThrough.CALL

        interactor.send_otp_to_user_updated_phone_number(
            user_id, send_otp_through)

    @staticmethod
    def verify_update_phone_number_otp(user_id: str, otp: str):

        from ib_users.interactors.verify_update_phone_number_otp_interactor \
            import VerifyUpdatePhoneNumberOTPInteractor
        from ib_users.storages.user_accounts_sql_storage \
            import UserAccountsSQLStorage
        from ib_users.storages.user_profile_sql_storage \
            import UserProfileSQLStorage

        interactor = VerifyUpdatePhoneNumberOTPInteractor(
            user_accounts_storage=UserAccountsSQLStorage(),
            user_profile_storage=UserProfileSQLStorage()
        )

        interactor.verify_update_phone_number_otp(user_id, otp)

    @staticmethod
    def send_login_otp_to_email_v2(
            email: str, should_send_otp_to_phone_number: bool = False
    ) -> typing.Tuple[str, PhoneNumberDTO]:
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors import SendLoginOTPToEmailInteractor
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.storages.otp_verification_sql_storage import OTPVerificationSQLStorage
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.LOGIN_WITH_OTP)

        otp_sender_to_user = SendLoginOTPToEmailInteractor(
            storage=UserAccountsSQLStorage(),
            otp_service=OTPServiceImpl(verify_otp_interactor),
            otp_verification_storage=OTPVerificationSQLStorage(),
            user_profile_storage=UserProfileSQLStorage()
        )
        email, phone_number_dto = otp_sender_to_user.send_login_otp_to_email(
            email=email, should_send_otp_to_phone_number=should_send_otp_to_phone_number)

        return email, phone_number_dto

    def update_user_account_verified_email(self, user_id: str, email: str):
        from ib_users.interactors.update_user_account_email_interactor import \
            UpdateUserAccountEmailInteractorInteractor

        interactor = UpdateUserAccountEmailInteractorInteractor(
            user_account_storage=self._get_user_account_storage(),
            user_profile_storage=self._get_user_profile_storage(),
        )

        interactor.update_user_account_email(
            user_id=user_id, updated_email=email)

    @staticmethod
    def activate_user(user_id: str):
        from ib_users.interactors.user_account_interactor import \
            UserAccountInteractor
        from ib_users.interactors.storages.user_social_accounts_storage \
            import UserSocialAccountsStorage

        account_storage = UserAccountsSQLStorage()
        social_account_storage = UserSocialAccountsStorage()
        interactor = UserAccountInteractor(
            account_storage=account_storage,
            social_account_storage=social_account_storage
        )
        interactor.activate_user(user_id=user_id)

    def get_user_ids_for_phone_number_from_user_profile(
            self, phone_number: str, country_code: str) -> List[str]:
        from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO

        phone_number_dto = PhoneNumberDTO(
            country_code=country_code, phone_number=phone_number
        )
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        from ib_users.interactors.user_profile.get_users_for_phone_number import\
            GetUserIdForPhoneNumberInteractor

        interactor = GetUserIdForPhoneNumberInteractor(
            user_profile_storage=self._get_user_profile_storage(),
            phone_number_validator=PhoneNumberValidatorImpl()
        )

        return interactor.get_user_ids_for_phone_number(
            phone_number_dto=phone_number_dto)

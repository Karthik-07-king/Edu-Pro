from typing import List

import typing

from ib_users.constants.user_profile import enums
from ib_users.interactors.DTOs.common_dtos import UserIdsWithTotalDTO, \
    UserIdWithEmailIdDTO, PhoneNumberDTO
from ib_users.models import UserProfile
from ib_users.interactors.storages.user_profile_storage import \
    UserProfileStorage
from ib_users.interactors.user_profile_interactor import GetUserProfileDTO, \
    UserProfileDTO, CreateUserProfileDTO
from ib_users.interactors.storages import dtos as storage_dtos
from ib_users import models
from ib_users.exceptions import user_profile_exceptions
from ib_users.interfaces import dtos as interface_dtos
from ib_users.interactors import dtos as interactor_dtos


class UserProfileSQLStorage(UserProfileStorage):
    def create_user_profile(self, user_profile: CreateUserProfileDTO,
                            account_id: str) -> int:
        user_profile_object = UserProfile(
            name=user_profile.name,
            gender=user_profile.gender,
            dob=user_profile.dob,
            is_phone_number_verified=user_profile.is_phone_number_verified,
            is_email_verified=user_profile.is_email_verified,
            profile_pic_url=user_profile.profile_pic_url,
            phone_number=user_profile.phone_number,
            country_code=user_profile.country_code,
            email=user_profile.email,
            language_preference=user_profile.language_preference,
            account_id=account_id,
            iso_country_code=user_profile.iso_country_code,
            cover_page_url=user_profile.cover_page_url,
            last_name=user_profile.last_name
        )
        user_profile_object.save()
        return user_profile_object.id

    @staticmethod
    def _get_user_profile_dto_from_model(user_profile: UserProfile) \
            -> GetUserProfileDTO:

        return GetUserProfileDTO(
            user_id=str(user_profile.account.user_id),
            name=user_profile.name,
            gender=user_profile.gender,
            dob=user_profile.dob,
            profile_pic_url=user_profile.profile_pic_url,
            phone_number=user_profile.phone_number,
            country_code=user_profile.country_code,
            email=user_profile.email,
            is_email_verified=user_profile.is_email_verified,
            is_phone_number_verified=user_profile.is_phone_number_verified,
            language_preference=user_profile.language_preference,
            iso_country_code=user_profile.iso_country_code,
            last_name=user_profile.last_name,
            cover_page_url=user_profile.cover_page_url,
            is_active=user_profile.account.is_active,
        )

    def get_user_profile(self, user_id: int) -> GetUserProfileDTO:
        user_profile = UserProfile.objects.select_related('account').get(
            account__user_id=user_id)
        return self._get_user_profile_dto_from_model(user_profile=user_profile)

    def get_user_profiles(self, user_ids: List[int]) -> \
            List[GetUserProfileDTO]:
        user_profiles = UserProfile.objects.filter(
            account__user_id__in=user_ids
        ).select_related('account')
        return [
            self._get_user_profile_dto_from_model(user_profile=user_profile)
            for user_profile in user_profiles
        ]

    def update_user_profile(
            self, user_id: int, update_profile_data: UserProfileDTO) \
            -> GetUserProfileDTO:

        user_profile_object = UserProfile.objects.get(account__user_id=user_id)
        if update_profile_data.name is not None:
            user_profile_object.name = update_profile_data.name

        if update_profile_data.gender is not None:
            user_profile_object.gender = update_profile_data.gender

        if update_profile_data.dob is not None:
            user_profile_object.dob = update_profile_data.dob

        if update_profile_data.profile_pic_url is not None:
            user_profile_object.profile_pic_url \
                = update_profile_data.profile_pic_url

        if update_profile_data.phone_number is not None:
            user_profile_object.phone_number = update_profile_data.phone_number

        if update_profile_data.country_code is not None:
            user_profile_object.country_code \
                = update_profile_data.country_code

        if update_profile_data.email is not None:
            user_profile_object.email = update_profile_data.email

        if update_profile_data.language_preference is not None:
            user_profile_object.language_preference \
                = update_profile_data.language_preference

        if update_profile_data.is_phone_number_verified is not None:
            user_profile_object.is_phone_number_verified = \
                update_profile_data.is_phone_number_verified

        if update_profile_data.is_email_verified is not None:
            user_profile_object.is_email_verified = \
                update_profile_data.is_email_verified

        if update_profile_data.last_name is not None:
            user_profile_object.last_name = update_profile_data.last_name

        if update_profile_data.cover_page_url is not None:
            user_profile_object.cover_page_url = update_profile_data.cover_page_url

        if update_profile_data.iso_country_code is not None:
            user_profile_object.iso_country_code = update_profile_data.iso_country_code

        user_profile_object.save()

        return self._get_user_profile_dto_from_model(
            user_profile=user_profile_object)

    def update_user_phone_number_verified(self, user_id: str):
        UserProfile.objects.filter(account__user_id=user_id). \
            update(is_phone_number_verified=True)

    def get_user_country_code_and_phone_number(self, user_id: str):
        user = UserProfile.objects.get(account__user_id=user_id)
        return user.country_code, user.phone_number

    def update_user_email_verified(self, user_id: str):
        UserProfile.objects.filter(account__user_id=user_id). \
            update(is_email_verified=True)

    def get_user_email(self, user_id: str):
        user = UserProfile.objects.get(account__user_id=user_id)
        return user.email

    def does_user_exists(self, user_id: str):
        return UserProfile.objects.filter(account__user_id=user_id).exists()

    def is_any_user_id_invalid(self, user_ids: List[str]) -> bool:
        user_ids = list(set(user_ids))

        user_profiles_count = \
            UserProfile.objects.filter(account__user_id__in=user_ids).count()

        user_ids_count = len(user_ids)

        return user_profiles_count != user_ids_count

    def check_is_emails_already_linked(self, email_ids: List[str]):
        user_profile_objs = UserProfile.objects.filter(email__in=email_ids)
        if user_profile_objs:
            emails = []
            for user_account_obj in user_profile_objs:
                emails.append(user_account_obj.email)
            from ib_users.exceptions.user_account_exceptions import \
                EmailsAlreadyLinkedException
            raise EmailsAlreadyLinkedException(emails)

    def get_user_ids_by_name_or_email(self, offset: int, limit: int,
                                      search_value: str) -> UserIdsWithTotalDTO:
        from django.db.models import Q
        user_ids = list(UserProfile.objects.filter(
            Q(name__icontains=search_value) |
            Q(email__icontains=search_value)
        ).values_list('account_id', flat=True))[offset: offset + limit]

        total_count = UserProfile.objects.filter(
            Q(name__icontains=search_value) | Q(email__icontains=search_value)
        ).count()

        user_ids_list = [str(user_id) for user_id in user_ids]

        return UserIdsWithTotalDTO(
            user_ids=user_ids_list, total_count=total_count
        )

    def get_user_ids_by_email_ids(
            self, email_ids: List[str]
    ) -> List[UserIdWithEmailIdDTO]:

        from django.db.models import F
        user_profile_objects = UserProfile.objects.filter(email__in=email_ids, is_email_verified=True) \
            .values(user_id=F('account_id'), email_id=F('email'))

        return [
            UserIdWithEmailIdDTO(
                user_id=str(user_profile_object['user_id']),
                email_id=user_profile_object['email_id']
            )
            for user_profile_object in user_profile_objects
        ]

    def get_user_ssc_details(self, user_id: str) -> storage_dtos.SSCDetailsDTO:
        try:
            user_ssc_details = models.UserSSCDetails.objects.get(
                user_account_id=user_id)
        except models.UserSSCDetails.DoesNotExist:
            raise user_profile_exceptions.UserSSCDetailsDoesNotExistException()

        return storage_dtos.SSCDetailsDTO(
            board_name_enum=user_ssc_details.board_name_enum,
            institute_id=user_ssc_details.institute_id,
            institute_name=user_ssc_details.institute_name,
            other_institute_name=user_ssc_details.other_institute_name,
            completion_status=user_ssc_details.completion_status,
            score_type=user_ssc_details.score_type,
            score=user_ssc_details.score,
            year_of_completion=user_ssc_details.year_of_completion)

    def get_user_intermediate_details(
            self, user_id: str) -> storage_dtos.IntermediateDetailsDTO:
        try:
            user_intermediate_details = models.UserIntermediateDetails.objects.get(
                user_account_id=user_id)
        except models.UserIntermediateDetails.DoesNotExist:
            raise user_profile_exceptions.UserIntermediateDetailsDoesNotExistException()

        return storage_dtos.IntermediateDetailsDTO(
            intermediate_course_id=user_intermediate_details.intermediate_course_id,
            course_name=user_intermediate_details.intermediate_course_name,
            other_intermediate_course=user_intermediate_details.other_intermediate_course_name,
            completion_status=user_intermediate_details.completion_status,
            institute_id=user_intermediate_details.institute_id,
            institute_name=user_intermediate_details.institute_name,
            other_institute_name=user_intermediate_details.other_institute_name,
            score_type=user_intermediate_details.score_type,
            score=user_intermediate_details.score,
            year_of_completion=user_intermediate_details.year_of_completion)

    def get_user_work_experience_details(
            self, user_id) -> storage_dtos.WorkExperienceDetailsDTO:
        try:
            user_work_experience_details = models.UserWorkExperienceDetails.objects.\
                get(user_account_id=user_id)
        except models.UserWorkExperienceDetails.DoesNotExist:
            raise user_profile_exceptions.UserWorkExperienceDetailsDoesNotExistException()

        return storage_dtos.WorkExperienceDetailsDTO(
            no_of_years_experience_in_it_sector=user_work_experience_details.no_of_years_experience_in_it_sector,
            no_of_years_experience_in_non_it_sector=user_work_experience_details.no_of_years_experience_in_non_it_sector)

    def get_user_social_profile_details(self, user_id: str) -> typing.List[storage_dtos.SocialProfileDetailsDTO]:
        user_social_profile_details = models.UserSocialProfileDetails.objects.filter(
            user_account_id=user_id).order_by("creation_datetime")

        return [
            storage_dtos.SocialProfileDetailsDTO(
                id=str(each.id),
                social_provider=each.social_provider,
                profile_link=each.profile_link)
            for each in user_social_profile_details
        ]

    def get_user_degree_details(
            self, user_id: str) -> List[storage_dtos.UserDegreeDetailsDTO]:
        user_social_profile_details = models.UserDegreeDetails.objects.filter(
            user_account_id=user_id).order_by("creation_datetime")

        return [
            storage_dtos.UserDegreeDetailsDTO(
                id=str(each.id), type=each.degree_type,
                course_id=each.course_id,
                course_name=each.course_name,
                other_course_name=each.other_course_name,
                completion_status=each.completion_status,
                department_id=each.department_id,
                department_name=each.department_name,
                score_type=each.score_type,
                score=each.score,
                start_year=each.start_year,
                end_year=each.end_year,
                no_of_backlogs=each.no_of_backlogs,
                institute_id=each.institute_id,
                institute_name=each.institute_name,
                other_institute_name=each.other_institute_name,
                institute_pin_code=each.institute_pin_code,
                institute_city_id=each.institute_city_id,
                institute_city_name=each.institute_city_name,
                expected_date_to_clear_backlogs=each.expected_date_to_clear_backlogs,
                user_id=user_id,
                institute_state_id=each.institute_state_id,
                institute_state_name=each.institute_state_name,
                institute_district_id=each.institute_district_id,
                institute_district_name=each.institute_district_name,
                other_institute_city_name=each.other_institute_city_name,
                other_department_name=each.other_department_name,
                institute_country_id=each.institute_country_id,
                institute_country_name=each.institute_country_name
            )
            for each in user_social_profile_details
        ]

    def get_user_address_details(self, user_id: str) \
            -> typing.List[storage_dtos.AddressDetailsDTO]:
        user_address_details_objs = models.UserAddressDetails.objects.filter(
            user_account_id=user_id).order_by("creation_datetime")

        return [
            storage_dtos.AddressDetailsDTO(
                address_type=user_address_details.address_type,
                address_1=user_address_details.address_1,
                address_2=user_address_details.address_2,
                pin_code=user_address_details.pin_code,
                city_id=user_address_details.city_id,
                city_name=user_address_details.city_name,
                district_id=user_address_details.district_id,
                district_name=user_address_details.district_name,
                state_id=user_address_details.state_id,
                state_name=user_address_details.state_name,
                country_id=user_address_details.country_id,
                country_name=user_address_details.country_name,
                other_city_name=user_address_details.other_city_name
            )
            for user_address_details in user_address_details_objs
        ]

    def get_user_company_details(
            self, user_id: str) -> typing.List[storage_dtos.CompanyDetailsDTO]:
        user_company_details_objs = models.UserCompanyDetails.objects.filter(
            user_account_id=user_id).order_by("creation_datetime")

        return [
            storage_dtos.CompanyDetailsDTO(
                id=str(user_company_details.id),
                company_id=user_company_details.company_id,
                company_name=user_company_details.company_name,
                other_company_name=user_company_details.other_company_name,
                company_city_id=user_company_details.company_city_id,
                company_city_name=user_company_details.company_city_name,
                job_role_id=user_company_details.job_role_id,
                job_role_name=user_company_details.job_role_name,
                other_job_role_name=user_company_details.other_job_role_name,
                is_currently_working_in_this_company=user_company_details.is_currently_working_in_this_company,
                start_date=user_company_details.start_date,
                end_date=user_company_details.end_date,
                ctc=user_company_details.ctc,
                no_of_months_for_notice_period=user_company_details.no_of_months_for_notice_period,
                other_company_city_name=user_company_details.other_company_city_name
            )
            for user_company_details in user_company_details_objs
        ]

    def get_user_current_professional_details(
            self, user_id: str) -> storage_dtos.CurrentProfessionalDetailsDTO:
        try:
            user_current_professional_details = models.UserCurrentProfessionalDetails.\
                objects.get(user_account_id=user_id)
        except models.UserCurrentProfessionalDetails.DoesNotExist:
            raise user_profile_exceptions.UserCurrentProfessionalDetailsDoesNotExistException()

        return storage_dtos.CurrentProfessionalDetailsDTO(
            job_role_id=user_current_professional_details.job_role_id,
            job_role_name=user_current_professional_details.job_role_name,
            other_job_role_name=user_current_professional_details.other_job_role_name,
            higher_education_course_type=user_current_professional_details.higher_education_course_type,
            have_work_experience=user_current_professional_details.have_work_experience)

    def get_user_profile_details(self, user_id: str) -> storage_dtos.ProfileDetailsDTO:
        try:
            user_profile_details = models.UserProfile.objects.get(
                account__user_id=user_id)
        except models.UserProfile.DoesNotExist:
            raise user_profile_exceptions.UserProfileDetailsDoesNotExistException()

        return storage_dtos.ProfileDetailsDTO(
            first_name=user_profile_details.name,
            last_name=user_profile_details.last_name,
            phone_number=user_profile_details.phone_number,
            country_code=user_profile_details.country_code,
            email=user_profile_details.email,
            date_of_birth=user_profile_details.dob,
            gender=user_profile_details.gender,
            profile_pic_url=user_profile_details.profile_pic_url,
            cover_page_url=user_profile_details.cover_page_url)

    def get_user_preferred_languages(self, user_id: str) \
            -> typing.Optional[typing.List[storage_dtos.UserPreferredLanguagesDTO]]:
        user_preferred_language_objs = models.UserPreferredLanguages.objects.filter(
            user_account_id=user_id).order_by("creation_datetime")
        return [
            storage_dtos.UserPreferredLanguagesDTO(
                user_id=str(each_preferred_language.user_account_id),
                language=each_preferred_language.language)
            for each_preferred_language in user_preferred_language_objs
        ]

    def get_user_contact_details(
            self, user_id: str) -> storage_dtos.UserContactDetailsDTO:
        try:
            user_contact_details = models.UserContactDetails.objects.get(
                user_account_id=user_id)
        except models.UserContactDetails.DoesNotExist:
            raise user_profile_exceptions.UserContactDetailsDoesNotExistException()

        return storage_dtos.UserContactDetailsDTO(
            user_id=str(user_contact_details.user_account_id),
            whatsapp_mobile_number=user_contact_details.whatsapp_mobile_number,
            whatsapp_mobile_country_code=user_contact_details.whatsapp_mobile_country_code,
            i_want_to_receive_updates_in_whatsapp=\
            user_contact_details.i_want_to_receive_updates_directly_on_whatsapp,
            have_whatsapp=user_contact_details.have_whatsapp)

    def get_user_professional_skills_details(
            self, user_id: str) -> typing.List[storage_dtos.UserProfessionalSkillsDTO]:
        user_professional_skills_objs = models.UserProfessionalSkills.objects.filter(
            user_account_id=user_id).order_by("creation_datetime")

        return [
            storage_dtos.UserProfessionalSkillsDTO(
                user_id=user_id, id=str(each.id),
                skill_id=each.skill_id, skill_name=each.skill_name,
                other_skill_name=each.other_skill_name
            )
            for each in user_professional_skills_objs
        ]

    def remove_user_professional_skills(self, user_professional_skills_ids: typing.List[str]):
        models.UserProfessionalSkills.objects.filter(
            id__in=user_professional_skills_ids).delete()

    def remove_user_company_details(self, user_company_detail_ids: typing.List[str]):
        models.UserCompanyDetails.objects.filter(
            id__in=user_company_detail_ids).delete()

    def update_social_profile_details(
            self, social_profile_details: typing.List[interface_dtos.SocialProfileDetailsDTO]):
        user_social_profile_details_to_update = [
            models.UserSocialProfileDetails(
                id=each_social_profile_details.id,
                social_provider=each_social_profile_details.social_provider,
                profile_link=each_social_profile_details.profile_link)
            for each_social_profile_details in social_profile_details
        ]

        models.UserSocialProfileDetails.objects.bulk_update(
            objs=user_social_profile_details_to_update, fields=["social_provider", "profile_link"])

    def update_is_email_verified(self, user_id: str, is_email_verified: bool):
        try:
            user_profile_details = models.UserProfile.objects.get(
                account__user_id=user_id)
        except models.UserProfile.DoesNotExist:
            raise user_profile_exceptions.UserProfileDetailsDoesNotExistException()

        user_profile_details.is_email_verified = is_email_verified
        user_profile_details.save()

    def update_user_preferred_languages(
            self, user_id: str, preferred_languages: typing.List[enums.Language]):
        models.UserPreferredLanguages.objects.filter(
            user_account_id=user_id).delete()
        user_preferred_languages_objs = [
            models.UserPreferredLanguages(
                user_account_id=user_id, language=preferred_language)
            for preferred_language in preferred_languages]

        models.UserPreferredLanguages.objects.bulk_create(
            user_preferred_languages_objs)

    def update_user_professional_skills_details(
            self,
            user_professional_skills: typing.List[interface_dtos.SkillDetailsDTO]):
        user_professional_skills_to_update = [
            models.UserProfessionalSkills(
                id=each_user_professional_skill.id,
                skill_id=each_user_professional_skill.skill_id,
                skill_name=each_user_professional_skill.skill_name,
                other_skill_name=each_user_professional_skill.other_skill_name)
            for each_user_professional_skill in user_professional_skills
        ]

        models.UserProfessionalSkills.objects.bulk_update(
            objs=user_professional_skills_to_update,
            fields=["skill_id", "skill_name", "other_skill_name"])

    def update_user_degree_details(
            self, degree_details: List[interface_dtos.UpdateDegreeDetailsDTO]):
        user_degree_details_id_wise_details = {
            each.id: each for each in degree_details}
        user_degree_details_ids = list(
            user_degree_details_id_wise_details.keys())

        user_degree_details_objs = models.UserDegreeDetails.objects.filter(
            id__in=user_degree_details_ids)
        for each in user_degree_details_objs:
            user_degree_details_dto = user_degree_details_id_wise_details[
                str(each.id)]
            each.degree_type = user_degree_details_dto.type
            each.course_id = user_degree_details_dto.course_id
            each.course_name = user_degree_details_dto.course_name
            each.other_course_name = user_degree_details_dto.other_course_name
            each.completion_status = user_degree_details_dto.completion_status
            each.department_id = user_degree_details_dto.department_id
            each.department_name = user_degree_details_dto.department_name
            each.score_type = user_degree_details_dto.score_type
            each.score = user_degree_details_dto.score
            each.start_year = user_degree_details_dto.start_year
            each.end_year = user_degree_details_dto.end_year
            each.no_of_backlogs = user_degree_details_dto.no_of_backlogs
            each.institute_id = user_degree_details_dto.institute_id
            each.institute_name = user_degree_details_dto.institute_name
            each.other_institute_name = user_degree_details_dto.other_institute_name
            each.institute_pin_code = user_degree_details_dto.institute_pin_code
            each.institute_city_id = user_degree_details_dto.institute_city_id
            each.institute_city_name = user_degree_details_dto.institute_city_name
            each.expected_date_to_clear_backlogs = user_degree_details_dto.expected_date_to_clear_backlogs
            each.institute_district_id = user_degree_details_dto.institute_district_id
            each.institute_district_name = user_degree_details_dto.institute_district_name
            each.institute_state_id = user_degree_details_dto.institute_state_id
            each.institute_state_name = user_degree_details_dto.institute_state_name
            each.other_institute_city_name = user_degree_details_dto.other_institute_city_name
            each.other_department_name = user_degree_details_dto.other_department_name
            each.institute_country_id = user_degree_details_dto.institute_country_id
            each.institute_country_name = user_degree_details_dto.institute_country_name
            each.save()

    def update_user_company_details(
            self, user_company_details: typing.List[interface_dtos.UpdateUserCompanyDetailsDTO]):
        user_company_details_id_wise_details = {
            each.id: each for each in user_company_details}
        user_company_details_ids = list(
            user_company_details_id_wise_details.keys())

        user_company_details_objs = models.UserCompanyDetails.objects.filter(
            id__in=user_company_details_ids)
        for each in user_company_details_objs:
            user_company_details_dto = user_company_details_id_wise_details[
                str(each.id)]
            each.company_id = user_company_details_dto.company_id
            each.company_name = user_company_details_dto.company_name
            each.other_company_name = user_company_details_dto.other_company_name
            each.company_city_id = user_company_details_dto.company_city_id
            each.company_city_name = user_company_details_dto.company_city_name
            each.job_role_id = user_company_details_dto.job_role_id
            each.job_role_name = user_company_details_dto.job_role_name
            each.other_job_role_name = user_company_details_dto.other_job_role_name
            each.is_currently_working_in_this_company =\
                user_company_details_dto.is_currently_working_in_this_company
            each.start_date = user_company_details_dto.start_date
            each.end_date = user_company_details_dto.end_date
            each.ctc = user_company_details_dto.ctc
            each.no_of_months_for_notice_period = user_company_details_dto.no_of_months_for_notice_period
            each.other_company_city_name = user_company_details_dto.other_company_city_name
            each.save()

    def delete_user_social_profile_details(self, social_profile_details_ids: typing.List[str]):
        models.UserSocialProfileDetails.objects.filter(
            id__in=social_profile_details_ids).delete()

    def create_user_degree_details(
            self, user_id: str, degree_details: List[interface_dtos.UpdateDegreeDetailsDTO]):
        user_degree_details_objs = [
            models.UserDegreeDetails(
                user_account_id=user_id,
                degree_type=each.type,
                course_id=each.course_id,
                course_name=each.course_name,
                other_course_name=each.other_course_name,
                completion_status=each.completion_status,
                department_id=each.department_id,
                department_name=each.department_name,
                score_type=each.score_type,
                score=each.score,
                start_year=each.start_year,
                end_year=each.end_year,
                no_of_backlogs=each.no_of_backlogs,
                institute_id=each.institute_id,
                institute_name=each.institute_name,
                other_institute_name=each.other_institute_name,
                institute_pin_code=each.institute_pin_code,
                institute_city_id=each.institute_city_id,
                institute_city_name=each.institute_city_name,
                expected_date_to_clear_backlogs=each.expected_date_to_clear_backlogs,
                institute_district_id=each.institute_district_id,
                institute_district_name=each.institute_district_name,
                institute_state_id=each.institute_state_id,
                institute_state_name=each.institute_state_name,
                other_institute_city_name=each.other_institute_city_name,
                other_department_name=each.other_department_name,
                institute_country_id=each.institute_country_id,
                institute_country_name=each.institute_country_name
            )
            for each in degree_details
        ]
        models.UserDegreeDetails.objects.bulk_create(
            objs=user_degree_details_objs)

    def delete_user_degree_details(self, degree_details_ids: List[str]):
        models.UserDegreeDetails.objects.filter(
            id__in=degree_details_ids).delete()

    def create_user_professional_skills_details(
            self, user_professional_skills: typing.List[storage_dtos.UserProfessionalSkillsDTO]):
        user_professional_skills_objs = [
            models.UserProfessionalSkills(
                id=each.id, user_account_id=each.user_id,
                skill_id=each.skill_id, skill_name=each.skill_name,
                other_skill_name=each.other_skill_name
            )
            for each in user_professional_skills
        ]
        models.UserProfessionalSkills.objects.bulk_create(
            objs=user_professional_skills_objs)

    def create_user_company_details(
            self, user_id: str, user_company_details: typing.List[interface_dtos.UpdateUserCompanyDetailsDTO]):
        user_company_details_objs = [
            models.UserCompanyDetails(
                user_account_id=user_id,
                company_id=each.company_id,
                company_name=each.company_name,
                other_company_name=each.other_company_name,
                company_city_id=each.company_city_id,
                company_city_name=each.company_city_name,
                job_role_id=each.job_role_id,
                job_role_name=each.job_role_name,
                other_job_role_name=each.other_job_role_name,
                is_currently_working_in_this_company=
                each.is_currently_working_in_this_company,
                start_date=each.start_date,
                end_date=each.end_date,
                ctc=each.ctc,
                no_of_months_for_notice_period=each.no_of_months_for_notice_period,
                other_company_city_name=each.other_company_city_name
            )
            for each in user_company_details
        ]

        models.UserCompanyDetails.objects.bulk_create(
            objs=user_company_details_objs)

    def create_user_social_profile_details(
            self, user_id: str, social_profile_details: typing.List[interface_dtos.SocialProfileDetailsDTO]):
        user_social_profile_details_objs = [
            models.UserSocialProfileDetails(
                social_provider=each.social_provider,
                profile_link=each.profile_link,
                user_account_id=user_id
            )
            for each in social_profile_details
        ]
        models.UserSocialProfileDetails.objects.bulk_create(
            objs=user_social_profile_details_objs)

    def create_or_update_user_profile_details(
            self, user_id: str, profile_details: interface_dtos.UpdateProfileDetailsDTO):
        UserProfile.objects.update_or_create(
            account_id=user_id,
            defaults={
                'name': profile_details.first_name,
                'gender': profile_details.gender,
                "dob": profile_details.date_of_birth,
                "email": profile_details.email,
                "profile_pic_url": profile_details.profile_pic_url,
                "last_name": profile_details.last_name,
                "cover_page_url": profile_details.cover_page_url
            }
        )

    def create_or_update_user_contact_details(
            self, user_id: str, contact_details: interface_dtos.ContactDetailsDTO):
        models.UserContactDetails.objects.update_or_create(
            user_account_id=user_id,
            defaults={
                'whatsapp_mobile_number': contact_details.whatsapp_mobile_number,
                'whatsapp_mobile_country_code': contact_details.whatsapp_mobile_country_code,
                "i_want_to_receive_updates_directly_on_whatsapp": \
                contact_details.i_want_to_receive_updates_in_whatsapp,
                "have_whatsapp": contact_details.have_whatsapp
            }
        )

    def create_or_update_user_ssc_details(
            self, user_id: str, ssc_details: interface_dtos.UpdateSSCDetailsDTO):
        models.UserSSCDetails.objects.update_or_create(
            user_account_id=user_id,
            defaults={
                'board_name_enum': ssc_details.board_name_enum,
                'institute_id': ssc_details.institute_id,
                'institute_name': ssc_details.institute_name,
                'other_institute_name': ssc_details.other_institute_name,
                'completion_status': ssc_details.completion_status,
                'score_type': ssc_details.score_type,
                'score': ssc_details.score,
                'year_of_completion': ssc_details.year_of_completion
            }
        )

    def create_or_update_user_intermediate_details(
            self, user_id: str, intermediate_details: interface_dtos.UpdateIntermediateDetailsDTO):
        models.UserIntermediateDetails.objects.update_or_create(
            user_account_id=user_id,
            defaults={
                'intermediate_course_id': intermediate_details.course_id,
                'intermediate_course_name': intermediate_details.course_name,
                'other_intermediate_course_name': intermediate_details.other_course_name,
                'completion_status': intermediate_details.completion_status,
                'institute_id': intermediate_details.institute_id,
                'institute_name': intermediate_details.institute_name,
                'other_institute_name': intermediate_details.other_institute_name,
                'score_type': intermediate_details.score_type,
                'score': intermediate_details.score,
                'year_of_completion': intermediate_details.year_of_completion
            }
        )

    def create_or_update_user_address_details(
            self, user_id: str, address_details: typing.List[interface_dtos.UpdateAddressDetailsDTO]):
        for each in address_details:
            models.UserAddressDetails.objects.update_or_create(
                user_account_id=user_id, address_type=each.address_type,
                defaults={
                    'address_1': each.address_1,
                    'address_2': each.address_2,
                    'pin_code': each.pin_code,
                    'city_id': each.city_id,
                    'city_name': each.city_name,
                    'other_city_name': each.other_city_name,
                    'district_id': each.district_id,
                    'district_name': each.district_name,
                    'state_id': each.state_id,
                    'state_name': each.state_name,
                    'country_id': each.country_id,
                    'country_name': each.country_name
                }
            )

    def create_or_update_user_current_professional_details(
            self, current_professional_details: interactor_dtos.CurrentProfessionalDetailsDTO,
            user_id: str):
        models.UserCurrentProfessionalDetails.objects.update_or_create(
            user_account_id=user_id,
            defaults={
                'job_role_id': current_professional_details.job_role_id,
                'job_role_name': current_professional_details.job_role_name,
                'other_job_role_name': current_professional_details.other_job_role_name,
                'higher_education_course_type': current_professional_details.higher_education_course_type,
                'have_work_experience': current_professional_details.have_work_experience
            }
        )

    def create_or_update_user_work_experience_details(
            self, user_id: str, work_experience_details: interface_dtos.WorkExperienceDetailsDTO):
        models.UserWorkExperienceDetails.objects.update_or_create(
            user_account_id=user_id,
            defaults={
                'no_of_years_experience_in_it_sector':
                    work_experience_details.no_of_years_experience_in_it_sector,
                'no_of_years_experience_in_non_it_sector':
                    work_experience_details.no_of_years_experience_in_non_it_sector
            }
        )

    def create_or_update_user_guardian_details(
            self, user_guardian_details: interface_dtos.UserGuardianDetailsDTO):
        models.UserGuardianDetails.objects.update_or_create(
            user_account_id=user_guardian_details.user_id,
            defaults={
                'first_name': user_guardian_details.first_name,
                'last_name': user_guardian_details.last_name,
                'relation': user_guardian_details.relation,
                'job_role_id': user_guardian_details.job_role_id,
                'job_role_name': user_guardian_details.job_role_name,
                'other_job_role_name': user_guardian_details.other_job_role_name,
                'email': user_guardian_details.email,
                'phone_number': user_guardian_details.phone_number,
                'country_code': user_guardian_details.country_code,
                'have_whatsapp': user_guardian_details.have_whatsapp,
                'whatsapp_mobile_number': user_guardian_details.whatsapp_mobile_number,
                'whatsapp_mobile_country_code': user_guardian_details.whatsapp_mobile_country_code,
                'other_relation': user_guardian_details.other_relation,
                'i_want_to_receive_updates_directly_on_whatsapp': user_guardian_details.
                i_want_to_receive_updates_in_whatsapp
            }
        )

    def get_user_guardian_details(self, user_id: str) -> storage_dtos.UserGuardianDetailsDTO:
        try:
            user_guardian_details = models.UserGuardianDetails.objects.get(
                user_account_id=user_id)
        except models.UserGuardianDetails.DoesNotExist:
            raise user_profile_exceptions.UserGuardianDetailsDoesNotExistsException()

        return storage_dtos.UserGuardianDetailsDTO(
            user_id=str(user_guardian_details.user_account_id),
            first_name=user_guardian_details.first_name,
            last_name=user_guardian_details.last_name,
            relation=user_guardian_details.relation,
            other_relation=user_guardian_details.other_relation,
            job_role_id=user_guardian_details.job_role_id,
            job_role_name=user_guardian_details.job_role_name,
            other_job_role_name=user_guardian_details.other_job_role_name,
            email=user_guardian_details.email,
            country_code=user_guardian_details.country_code,
            phone_number=user_guardian_details.phone_number,
            have_whatsapp=user_guardian_details.have_whatsapp,
            whatsapp_mobile_country_code=user_guardian_details.whatsapp_mobile_country_code,
            whatsapp_mobile_number=user_guardian_details.whatsapp_mobile_number,
            i_want_to_receive_updates_in_whatsapp=user_guardian_details.
            i_want_to_receive_updates_directly_on_whatsapp)

    def get_users_preferred_languages(self, user_ids: typing.List[str]) \
            -> typing.Optional[typing.List[storage_dtos.UserPreferredLanguagesDTO]]:
        users_preferred_languages = models.UserPreferredLanguages.objects.filter(
            user_account_id__in=user_ids)
        return [
            storage_dtos.UserPreferredLanguagesDTO(
                user_id=str(user_preferred_languages.user_account_id),
                language=user_preferred_languages.language)
            for user_preferred_languages in users_preferred_languages
        ]

    def get_users_contact_details(
            self, user_ids: typing.List[str]) -> typing.List[storage_dtos.UserContactDetailsDTO]:
        users_contact_details = models.UserContactDetails.objects.filter(
            user_account_id__in=user_ids)

        return [
            storage_dtos.UserContactDetailsDTO(
                user_id=str(user_contact_details.user_account_id),
                whatsapp_mobile_number=user_contact_details.whatsapp_mobile_number,
                whatsapp_mobile_country_code=user_contact_details.whatsapp_mobile_country_code,
                i_want_to_receive_updates_in_whatsapp= \
                    user_contact_details.i_want_to_receive_updates_directly_on_whatsapp,
                have_whatsapp=user_contact_details.have_whatsapp)
            for user_contact_details in users_contact_details
        ]

    def create_or_update_user_social_profile_details(
            self, user_id: str, social_provider: typing.Optional[enums.SocialProvider],
            profile_link: typing.Optional[str]):
        models.UserSocialProfileDetails.objects.update_or_create(
            user_account_id=user_id,
            social_provider=social_provider,
            defaults={
                'profile_link': profile_link
            }
        )

    def get_user_ids_for_phone_number(
            self, phone_number_dto: PhoneNumberDTO) -> typing.List[str]:
        user_ids = list(
            models.UserProfile.objects.filter(
                phone_number=phone_number_dto.phone_number,
                country_code=phone_number_dto.country_code
            ).values_list("account_id", flat=True))

        return list(map(str, user_ids))
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.utils.views.login_controllers_common import \
    get_login_interactor_with_phone_number_and_dto_given_request_data, \
    validate_inputs_and_get_auth_tokens
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):

    from django_swagger_utils.drf_server.exceptions import BadRequest
    from ib_users.presenters.login_with_phone_number_v1_json_presenter import \
        LoginWithPhoneNumberV1JSONPresenter

    request_data = kwargs['request_data']
    device_id = request_data.get("device_id", None)
    login_interactor, phone_number_login_dto = \
        get_login_interactor_with_phone_number_and_dto_given_request_data(request_data)

    presenter = LoginWithPhoneNumberV1JSONPresenter()

    try:
        response_dict = validate_inputs_and_get_auth_tokens(
            login_interactor, phone_number_login_dto, device_id=device_id)

        response_object = presenter.get_success_response(response_dict)

    except BadRequest as err:
        response_object = presenter.get_error_response(err.message, err.res_status)

    return response_object

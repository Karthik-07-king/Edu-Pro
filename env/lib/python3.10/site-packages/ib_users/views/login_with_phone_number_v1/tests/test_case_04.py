"""
# Success Cae
"""
from django.test import override_settings
from django_swagger_utils.utils.test import CustomAPITestCase
import mock
from ib_users.utils.custom_test_utils import CustomTestUtils
from . import APP_NAME, OPERATION_NAME, REQUEST_METHOD, URL_SUFFIX

REQUEST_BODY = """
{
    "phone_number": "9884683900",
    "country_code": "91",
    "password": "Qwerty123!",
    "device_id": "Device1"
}
"""

TEST_CASE = {
    "request": {
        "path_params": {},
        "query_params": {},
        "header_params": {},
        "securities": {},
        "body": REQUEST_BODY,
    },
}


def create_refresh_token_mock(*args, **kwargs):
    from ib_users.interactors.storages.oauth2_storage import \
        RefreshTokenDTO
    from datetime import datetime
    return RefreshTokenDTO(
        token="token",
        access_token=1,
        user_id="user_id_1",
        revoked=datetime(year=2199, month=1, day=2)
    )


def create_access_token_mock(*args, **kwargs):
    from ib_users.interactors.storages.oauth2_storage import \
        AccessTokenDTO
    from datetime import datetime

    return AccessTokenDTO(
        access_token_id=1,
        token="access_token_token",
        expires=datetime(year=2199, month=1, day=2),
        user_id="user_id_1"
    )


class TestCase04LoginWithPhoneNumberV1APITestCase(CustomTestUtils):
    app_name = APP_NAME
    operation_name = OPERATION_NAME
    request_method = REQUEST_METHOD
    url_suffix = URL_SUFFIX
    test_case_dict = TEST_CASE

    def setUp(self):
        from ib_users.models import UserAccount
        UserAccount.objects.create_user(
            user_id='63989f8a-e973-4419-9931-1563abe249d8',
            username="username003", password="Qwerty123!",
            phone_number="9884683900", country_code="91",)
        self.populate_user_social_account()

    @override_settings(ENABLE_USER_DEVICES_INFORMATION=True)
    @override_settings(RESTRICT_USER_TO_SINGLE_LOGIN_SESSION="TRUE")
    def test_case(self):
        self.default_test_case()
        from ib_users.models import UserUniqueLoginDevice
        user_unique_login_devices = UserUniqueLoginDevice.objects.all()

        user_unique_login_devices_data = [
            {
                "user_id": str(each.user_account_id),
                "device_id": each.device_id,
            }
            for each in user_unique_login_devices
        ]

        self.assert_match_snapshot(
            user_unique_login_devices_data, "user_unique_login_devices_data")

import requests
from ib_users.constants.user_account_constants import \
    SocialAccountProviderType

from ib_users.exceptions.custom_exception_constants import ExceptionMessages
from ib_users.exceptions.social_service_exceptions import \
    InvalidSocialAccessToken
from ib_users.exceptions.user_account_exceptions import InvalidAction
from ib_users.interactors.third_party.social_account import SocialAccount


class FacebookAccount(SocialAccount):

    GRAPH_API_URL = "https://graph.facebook.com/v12.0/me"

    def check_and_throw_exception_if_given_string_is_empty(self, string: str):
        if not string:
            raise InvalidAction(ExceptionMessages.SOCIAL_ACCESS_TOKEN_IS_EMPTY.
                                format(SocialAccountProviderType.FACEBOOK.value))

    def get_social_account_type(self) -> str:
        return SocialAccountProviderType.FACEBOOK.value

    def get_user_data(self, access_token, fields):
        try:
            response = requests.get(
                self.GRAPH_API_URL,
                params={
                    'access_token': access_token,
                    'fields': fields
                }
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException:
            raise InvalidSocialAccessToken.get_for_invalid_fb_token_exception()

    def get_social_id(self, **kwargs):
        user_data = self.get_user_data(kwargs['access_token'], 'id')
        return user_data['id']

    def get_user_name_from_social_account(self, **kwargs):
        user_data = self.get_user_data(kwargs['access_token'], 'name')
        return user_data['name']

    def get_email_from_social_account(self, **kwargs):
        user_data = self.get_user_data(kwargs['access_token'], 'email')
        return user_data.get('email')



import typing

from ib_users.constants.otp_verification_constants import SendOTPThrough
from ib_users.interactors.storages.user_accounts_storage import PhoneNumberDTO
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.verify_through_otp_interface import \
    VerifyThroughOTPInterface


class OTPServiceImpl(OTPService):
    def __init__(self, verify_otp_interactor: VerifyThroughOTPInterface):
        super().__init__(verify_otp_interactor)

    def validate_otp_send_to_phone_number(self,
                                          phone_number_dto: PhoneNumberDTO,
                                          otp: str):
        self.verify_otp_interactor.validate_otp(
            phone_number_dto=phone_number_dto,
            otp_to_be_verified=otp)

    def validate_otp_send_to_email(self,
                                   email: str,
                                   otp: str):
        self.verify_otp_interactor.validate_otp(email=email,
                                                otp_to_be_verified=otp)

    def send_otp_to_user(self, email: str,
                         phone_number: PhoneNumberDTO, template: str,
                         subject: str):

        print("At send_otp_to_user: ", email, phone_number, template, subject)
        self.send_otp_to_user_email(email=email, template=template,
                                    subject=subject)
        self.send_otp_to_user_phone_number(phone_number=phone_number,
                                           template=template,
                                           send_otp_through=SendOTPThrough.SMS,
                                           call_template=None)

    def send_otp_to_user_email(self, email: str, template: str, subject: str):
        self.verify_otp_interactor.verify_through_otp(
            email=email,
            email_body_template=template,
            subject=subject
        )

    def send_otp_to_user_phone_number(self,
                                      phone_number: PhoneNumberDTO,
                                      template: str,
                                      call_template: typing.Optional[str],
                                      send_otp_through: SendOTPThrough):
        from django.conf import settings
        from ib_users.constants.sms_constants import INDIA_COUNTRY_CODE, ServiceProvider
        
        sms_service_provider = settings.SMS_SERVICE_PROVIDER
        if phone_number.country_code != INDIA_COUNTRY_CODE:
            if settings.USE_TWILIO_FOR_INTERNATIONAL_NUMBERS:
                sms_service_provider = ServiceProvider.TWILIO.value
                
        self.verify_otp_interactor.verify_through_otp(
            phone_number_dto=phone_number,
            send_otp_through=send_otp_through,
            sms_service_provider=sms_service_provider,
            sms_template=template,
            call_template=call_template
        )

    def send_otp_to_user_recovery_email(self, email: str, template: str,
                                        subject: str, user_id: str):
        self.verify_otp_interactor.verify_through_otp(
            email=email,
            email_body_template=template,
            subject=subject,
            user_id=user_id
        )

    def send_otp_to_user_recovery_phone_number(self,
                                               user_id: str,
                                               phone_number: PhoneNumberDTO,
                                               template: str):
        from django.conf import settings
        from ib_users.constants.sms_constants import INDIA_COUNTRY_CODE, ServiceProvider
        
        sms_service_provider = settings.SMS_SERVICE_PROVIDER
        if phone_number.country_code != INDIA_COUNTRY_CODE:
            if settings.USE_TWILIO_FOR_INTERNATIONAL_NUMBERS:
                sms_service_provider = ServiceProvider.TWILIO.value
                
        self.verify_otp_interactor.verify_through_otp(
            phone_number_dto=phone_number,
            send_otp_through=SendOTPThrough.SMS,
            sms_service_provider=sms_service_provider,
            sms_template=template,
            user_id=user_id
        )

    def validate_otp_send_to_recovery_phone_number(self,
                                                   phone_number_dto: PhoneNumberDTO,
                                                   otp: str,
                                                   user_id: str):
        self.verify_otp_interactor.validate_otp(
            phone_number_dto=phone_number_dto,
            otp_to_be_verified=otp,
            user_id=user_id
        )

    def validate_otp_send_to_recovery_email(self,
                                            email: str,
                                            otp: str,
                                            user_id: str):
        self.verify_otp_interactor.validate_otp(email=email,
                                                otp_to_be_verified=otp,
                                                user_id=user_id)

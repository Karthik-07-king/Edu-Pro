from django.contrib.auth.models import AbstractUser
from ib_users.constants.user_account_constants import UserAccountConstants
from django.core import exceptions as django_exceptions
from ib_common import models as ib_common_models
from django.db import models
from ib_users.exceptions.custom_exception_constants import ExceptionConstants

from ib_users.constants import otp_verification_constants
from ib_users.utils.generate_uuid import generate_uuid


class UserAccount(AbstractUser):
    from uuid import uuid4

    user_id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    username = models.CharField(
        max_length=UserAccountConstants.MAX_USER_NAME_LENGTH, null=True,
        unique=True)
    phone_number = models.CharField(max_length=20, null=True)
    country_code = models.CharField(max_length=10, null=True)
    iso_country_code = models.CharField(max_length=10, null=True, blank=True)
    email = models.EmailField(null=True, unique=True)
    is_password_reset = models.BooleanField(default=True)

    class Meta:
        unique_together = ['phone_number', 'country_code']

    def __str__(self):
        return str(self.user_id)


def validate_verification_status(value):
    if value not in \
            otp_verification_constants.VerificationStatus.get_list_of_values():
        raise django_exceptions.ValidationError(
            ExceptionConstants.INVALID_VERIFICATION_STATUS.format(value))


class UpdateUserAccountPhoneNumberLog(ib_common_models.AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.ForeignKey('UserAccount', on_delete=models.CASCADE)
    old_phone_number = models.CharField(max_length=20)
    old_country_code = models.CharField(max_length=10)
    new_phone_number = models.CharField(max_length=20)
    new_country_code = models.CharField(max_length=10)
    change_reason = models.TextField(null=True, blank=True)
    verification_status = models.CharField(
        max_length=64, validators=[validate_verification_status]
    )
    failure_remarks = models.TextField(null=True, blank=True)
    verified_datetime = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return '<UpdateUserAccountPhoneNumberLog - {user_id}' \
            ' - {verification_status}'.format(
                user_id=self.user_account_id,
                verification_status=self.verification_status
            )

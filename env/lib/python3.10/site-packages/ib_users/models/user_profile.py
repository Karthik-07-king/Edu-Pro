from django.db import models
from django.core.exceptions import ValidationError
from ib_common.models import AbstractDateTimeModel

from ib_users.constants.user_profile import enums
from ib_users.models.user_account import UserAccount
from ib_users.constants.user_profile.model_validators import \
    GENDER_MAX_LENGTH, \
    PHONE_NUMBER_MAX_LENGTH, COUNTRY_CODE_MAX_LENGTH, EMAIL_MAX_LENGTH, \
    LANGUAGE_PREFERENCE_MAX_LENGTH
from ib_users.utils.generate_uuid import generate_uuid
from simple_history.models import HistoricalRecords


def validate_gender(gender):
    from ib_users.constants.user_profile.enums import \
        Gender
    if gender not in Gender.get_list_of_values():
        from ib_users.constants.user_profile.error_messages import \
            INVALID_GENDER
        raise ValidationError(INVALID_GENDER)


def validate_language(language):
    from ib_users.constants.user_profile.enums import \
        Language
    if language not in Language.get_list_of_values():
        from ib_users.constants.user_profile.error_messages import \
            INVALID_LANGUAGE
        raise ValidationError(INVALID_LANGUAGE)


class UserProfile(AbstractDateTimeModel):
    name = models.TextField(null=True, blank=True, default='')
    last_name = models.TextField(null=True, blank=True)
    cover_page_url = models.TextField(null=True, blank=True)
    gender = models.CharField(max_length=GENDER_MAX_LENGTH,
                              validators=[validate_gender], null=True,
                              blank=True)
    dob = models.DateField(null=True, blank=True)
    profile_pic_url = models.TextField(null=True, blank=True)
    phone_number = models.CharField(max_length=PHONE_NUMBER_MAX_LENGTH, null=True,
                                    blank=True)
    is_phone_number_verified = models.BooleanField(null=True, blank=True)
    country_code = models.CharField(max_length=COUNTRY_CODE_MAX_LENGTH,
                                    null=True, blank=True)
    email = models.EmailField(max_length=EMAIL_MAX_LENGTH, null=True,
                              blank=True)
    is_email_verified = models.BooleanField(null=True, blank=True)
    language_preference = models.CharField(
        max_length=LANGUAGE_PREFERENCE_MAX_LENGTH, validators=[
            validate_language], null=True, blank=True)
    account = models.OneToOneField(
        UserAccount, on_delete=models.CASCADE, related_name="profile"
    )
    iso_country_code = models.CharField(max_length=10, null=True, blank=True)

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserProfile: {id}-{name}>".format(id=self.id, name=self.name)


class UserSocialProfileDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    profile_link = models.TextField(null=True, blank=True)
    social_provider = models.CharField(
        max_length=50, choices=enums.SocialProvider.get_list_of_tuples(),
        null=True, blank=True)
    user_account = models.ForeignKey(
        'ib_users.UserAccount', on_delete=models.CASCADE)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'
        unique_together = ["user_account", "social_provider"]

    def __str__(self):
        return "<UserSocialProfileDetails: {user_account}-{social_provider}>".format(
            user_account=str(self.user_account), social_provider=self.social_provider)


class UserContactDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.OneToOneField(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    have_whatsapp = models.BooleanField(null=True, blank=True)
    whatsapp_mobile_number = models.CharField(
        max_length=20, null=True, blank=True)
    whatsapp_mobile_country_code = models.CharField(
        max_length=10, null=True, blank=True)
    i_want_to_receive_updates_directly_on_whatsapp = models.BooleanField(
        null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserContactDetails: {user_account}-{whatsapp_mobile_number}>".format(
            user_account=str(self.user_account),
            whatsapp_mobile_number=self.whatsapp_mobile_number)


class UserAddressDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.ForeignKey(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    address_type = models.CharField(
        max_length=50, choices=enums.AddressType.get_list_of_tuples())
    address_1 = models.TextField(null=True, blank=True)
    address_2 = models.TextField(null=True, blank=True)
    pin_code = models.CharField(max_length=16, null=True, blank=True)
    city_id = models.CharField(max_length=64, null=True, blank=True)
    city_name = models.CharField(max_length=256, null=True, blank=True)
    other_city_name = models.CharField(max_length=256, null=True, blank=True)
    district_id = models.CharField(max_length=64, null=True, blank=True)
    district_name = models.CharField(max_length=256, null=True, blank=True)
    state_id = models.CharField(max_length=64, null=True, blank=True)
    state_name = models.CharField(max_length=256, null=True, blank=True)
    country_id = models.CharField(max_length=64, null=True, blank=True)
    country_name = models.CharField(max_length=256, null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'
        unique_together = ["user_account", "address_type"]

    def __str__(self):
        return "<UserAddressDetails: {user_account}-{address_type}>".format(
            user_account=str(self.user_account),
            address_type=self.address_type)


class UserCurrentProfessionalDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.OneToOneField(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    job_role_id = models.CharField(max_length=64, null=True, blank=True)
    job_role_name = models.CharField(max_length=256, null=True, blank=True)
    other_job_role_name = models.CharField(max_length=256, null=True, blank=True)
    higher_education_course_type = models.CharField(
        max_length=128, choices=enums.CourseType.get_list_of_tuples(),
        null=True, blank=True)
    have_work_experience = models.BooleanField(null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserCurrentProfessionalDetails: {id}-{user_account}>".format(
            user_account=str(self.user_account), id=str(self.id))


class UserProfessionalSkills(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.ForeignKey(
        'ib_users.UserAccount', on_delete=models.CASCADE, db_index=True)
    skill_id = models.CharField(max_length=64, null=True, blank=True)
    skill_name = models.CharField(max_length=256, null=True, blank=True)
    other_skill_name = models.CharField(max_length=256, null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserProfessionalSkills: {id}-{user_account}>".format(
            user_account=str(self.user_account), id=str(self.id))


class UserSSCDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.OneToOneField(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    board_name_enum = models.CharField(
        max_length=256, choices=enums.SSCBoardName.get_list_of_tuples(),
        null=True, blank=True)
    institute_id = models.CharField(max_length=64, null=True, blank=True)
    institute_name = models.CharField(max_length=256, null=True, blank=True)
    other_institute_name = models.CharField(max_length=256, null=True, blank=True)
    completion_status = models.CharField(
        max_length=50, choices=enums.CourseCompletionStatus.get_list_of_tuples(),
        null=True, blank=True)
    score_type = models.CharField(
        max_length=50, choices=enums.ScoreType.get_list_of_tuples(),
        null=True, blank=True)
    score = models.FloatField(null=True, blank=True)
    year_of_completion = models.PositiveIntegerField(null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserSSCDetails: {id}-{user_account}>".format(
            user_account=str(self.user_account), id=str(self.id))


class UserIntermediateDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.OneToOneField(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    intermediate_course_id = models.CharField(max_length=64, null=True, blank=True)
    intermediate_course_name = models.CharField(max_length=256, null=True, blank=True)
    other_intermediate_course_name = models.CharField(max_length=256, null=True, blank=True)
    completion_status = models.CharField(
        max_length=50, choices=enums.CourseCompletionStatus.get_list_of_tuples(),
        null=True, blank=True)
    institute_id = models.CharField(max_length=64, null=True, blank=True)
    institute_name = models.CharField(max_length=256, null=True, blank=True)
    other_institute_name = models.CharField(max_length=256, null=True, blank=True)
    score_type = models.CharField(
        max_length=50, choices=enums.ScoreType.get_list_of_tuples(),
        null=True, blank=True)
    score = models.FloatField(null=True, blank=True)
    year_of_completion = models.PositiveIntegerField(null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserIntermediateDetails: {id}-{user_account}>".format(
            user_account=str(self.user_account), id=str(self.id))


class UserDegreeDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.ForeignKey(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    degree_type = models.CharField(
        max_length=50, choices=enums.DegreeType.get_list_of_tuples(),
        null=True, blank=True)
    course_id = models.CharField(max_length=64, null=True, blank=True)
    course_name = models.CharField(max_length=256, null=True, blank=True)
    other_course_name = models.CharField(max_length=256, null=True, blank=True)
    completion_status = models.CharField(
        max_length=50, choices=enums.CourseCompletionStatus.get_list_of_tuples(),
        null=True, blank=True)
    department_id = models.CharField(max_length=64, null=True, blank=True)
    department_name = models.CharField(max_length=256, null=True, blank=True)
    other_department_name = models.CharField(max_length=256, null=True, blank=True)
    score_type = models.CharField(
        max_length=50, choices=enums.ScoreType.get_list_of_tuples(),
        null=True, blank=True)
    score = models.FloatField(null=True, blank=True)
    start_year = models.PositiveIntegerField(null=True, blank=True)
    end_year = models.PositiveIntegerField(null=True, blank=True)
    no_of_backlogs = models.PositiveIntegerField(null=True, blank=True)
    institute_id = models.CharField(max_length=64, null=True, blank=True)
    institute_name = models.CharField(max_length=256, null=True, blank=True)
    other_institute_name = models.CharField(max_length=256, null=True, blank=True)
    institute_pin_code = models.CharField(max_length=50, null=True, blank=True)
    institute_city_id = models.CharField(max_length=64, null=True, blank=True)
    institute_city_name = models.CharField(max_length=256, null=True, blank=True)
    other_institute_city_name = models.CharField(max_length=256, null=True, blank=True)
    expected_date_to_clear_backlogs = models.DateField(null=True, blank=True)
    institute_district_id = models.CharField(max_length=64, null=True, blank=True)
    institute_district_name = models.CharField(max_length=256, null=True, blank=True)
    institute_state_id = models.CharField(max_length=64, null=True, blank=True)
    institute_state_name = models.CharField(max_length=256, null=True, blank=True)
    institute_country_id = models.CharField(max_length=64, null=True, blank=True)
    institute_country_name = models.CharField(max_length=256, null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserDegreeDetails: {id}-{user_account}>".format(
            user_account=str(self.user_account), id=str(self.id))


class UserWorkExperienceDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.OneToOneField(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    no_of_years_experience_in_it_sector = models.FloatField(null=True, blank=True)
    no_of_years_experience_in_non_it_sector = models.FloatField(null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserWorkExperienceDetails: {id}-{user_account}>".format(
            user_account=str(self.user_account), id=str(self.id))


class UserCompanyDetails(AbstractDateTimeModel):
    id = models.UUIDField(default=generate_uuid, primary_key=True)
    user_account = models.ForeignKey(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    company_id = models.CharField(max_length=64, null=True, blank=True)
    company_name = models.CharField(max_length=256, null=True, blank=True)
    other_company_name = models.CharField(max_length=256, null=True, blank=True)
    company_city_id = models.CharField(max_length=64, null=True, blank=True)
    company_city_name = models.CharField(max_length=256, null=True, blank=True)
    other_company_city_name = models.CharField(max_length=256, null=True, blank=True)
    job_role_id = models.CharField(max_length=64, null=True, blank=True)
    job_role_name = models.CharField(max_length=256, null=True, blank=True)
    other_job_role_name = models.CharField(max_length=256, null=True, blank=True)
    is_currently_working_in_this_company = models.BooleanField(null=True, blank=True)
    start_date = models.DateField(null=True, blank=True)
    end_date = models.DateField(null=True, blank=True)
    ctc = models.CharField(
        max_length=256, choices=enums.CTC.get_list_of_tuples(),
        null=True, blank=True)
    no_of_months_for_notice_period = models.FloatField(null=True, blank=True)

    history = HistoricalRecords()

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserCompanyDetails: {id}-{user_account}>".format(
            user_account=str(self.user_account), id=str(self.id))


class UserPreferredLanguages(AbstractDateTimeModel):
    id = models.UUIDField(primary_key=True, default=generate_uuid)
    user_account = models.ForeignKey(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    language = models.CharField(
        max_length=128, choices=enums.Language.get_list_of_tuples(),
        null=True, blank=True)

    history = HistoricalRecords()

    class Meta(object):
        app_label = 'ib_users'
        unique_together = ["user_account", "language"]

    def __str__(self):
        return "<UserPreferredLanguages: {user_account}-{language}>".format(
            user_account=str(self.user_account), language=self.language)


class UserGuardianDetails(AbstractDateTimeModel):
    id = models.UUIDField(primary_key=True, default=generate_uuid)
    user_account = models.OneToOneField(
        'ib_users.UserAccount', on_delete=models.CASCADE)
    first_name = models.TextField(null=True, blank=True)
    last_name = models.TextField(null=True, blank=True)
    relation = models.CharField(
        max_length=50, choices=enums.GuardianRelation.get_list_of_tuples(),
        null=True, blank=True)
    other_relation = models.CharField(max_length=256, null=True, blank=True)
    job_role_id = models.CharField(max_length=64, null=True, blank=True)
    job_role_name = models.CharField(max_length=256, null=True, blank=True)
    other_job_role_name = models.CharField(max_length=256, null=True, blank=True)
    email = models.EmailField(max_length=150, null=True, blank=True)
    phone_number = models.CharField(max_length=20, null=True, blank=True)
    country_code = models.CharField(max_length=10, null=True, blank=True)
    have_whatsapp = models.BooleanField(null=True, blank=True)
    whatsapp_mobile_number = models.CharField(
        max_length=20, null=True, blank=True)
    whatsapp_mobile_country_code = models.CharField(
        max_length=10, null=True, blank=True)
    i_want_to_receive_updates_directly_on_whatsapp = models.BooleanField(
        null=True, blank=True)

    history = HistoricalRecords()

    class Meta(object):
        app_label = 'ib_users'

    def __str__(self):
        return "<UserGuardianDetails: {user_account}-{id}>".format(
            user_account=str(self.user_account), id=str(self.id))

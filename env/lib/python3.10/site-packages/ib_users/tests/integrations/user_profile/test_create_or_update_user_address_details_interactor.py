import pytest

from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, models

pytestmark = pytest.mark.django_db


class TestCreateOrUpdateUserAddressDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.interactors.user_profile. \
            create_or_update_user_address_details_interactor import \
            CreateOrUpdateUserAddressDetailsInteractor
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage

        return CreateOrUpdateUserAddressDetailsInteractor(
            profile_storage=UserProfileSQLStorage(),
            account_storage=UserAccountsSQLStorage())

    def test_given_user_address_details_already_exists_then_update_address_details(
            self, interactor):
        # Arrange
        models.UserAddressDetailsFactory.reset_sequence()
        models.UserAccountFactory.reset_sequence()

        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserAddressDetailsFactory(
            user_account=user_account, address_1="address_1",
            address_2="address_2", pin_code="pin_code",
            city_id="city_id", city_name="city_name",
            other_city_name="other_city_name", district_id="district_id",
            district_name="district_name", state_id="state_id",
            state_name="state_name", country_id="country_id",
            country_name="country_name",
            address_type=enums.AddressType.PERMANENT.value)

        address_details = interface_dtos.UpdateAddressDetailsDTOFactory(
            address_type=enums.AddressType.PERMANENT.value,
            address_1="address_1",
            address_2="address_2", pin_code="pin_code",
            city_id="city_id", city_name="city_name",
            other_city_name="other_city_name", district_id="district_id",
            district_name="district_name", state_id="state_id",
            state_name="state_name", country_id="country_id",
            country_name="country_name")

        # Act
        interactor.create_or_update_user_address_details(
            user_id=user_id, address_details=[address_details])

        # Assert
        from ib_users.models import UserAddressDetails
        obj = UserAddressDetails.objects.get(
            user_account__user_id=user_id)
        assert obj.address_type == address_details.address_type
        assert obj.address_1 == address_details.address_1
        assert obj.address_2 == address_details.address_2
        assert obj.pin_code == address_details.pin_code
        assert obj.city_id == address_details.city_id
        assert obj.city_name == address_details.city_name
        assert obj.other_city_name == address_details.other_city_name
        assert obj.district_id == address_details.district_id
        assert obj.district_name == address_details.district_name
        assert obj.state_id == address_details.state_id
        assert obj.state_name == address_details.state_name
        assert obj.country_id == address_details.country_id
        assert obj.country_name == address_details.country_name

    def test_given_user_have_no_address_details_then_create_address_details(
            self, interactor):
        # Arrange
        models.UserAddressDetailsFactory.reset_sequence()
        models.UserAccountFactory.reset_sequence()

        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        address_details = interface_dtos.UpdateAddressDetailsDTOFactory(
            address_type=enums.AddressType.CURRENT.value,
            address_1="address_12", address_2="address_22", pin_code="pin_code2",
            city_id="city_id2", city_name="city_name2",
            other_city_name="other_city_name2", district_id="district_id2",
            district_name="district_name2", state_id="state_id2",
            state_name="state_name2", country_id="country_id2",
            country_name="country_name2")

        # Act
        interactor.create_or_update_user_address_details(
            user_id=user_id, address_details=[address_details])

        # Assert
        from ib_users.models import UserAddressDetails
        obj = UserAddressDetails.objects.get(
            user_account__user_id=user_id)
        assert obj.address_type == address_details.address_type
        assert obj.address_1 == address_details.address_1
        assert obj.address_2 == address_details.address_2
        assert obj.pin_code == address_details.pin_code
        assert obj.city_id == address_details.city_id
        assert obj.city_name == address_details.city_name
        assert obj.other_city_name == address_details.other_city_name
        assert obj.district_id == address_details.district_id
        assert obj.district_name == address_details.district_name
        assert obj.state_id == address_details.state_id
        assert obj.state_name == address_details.state_name
        assert obj.country_id == address_details.country_id
        assert obj.country_name == address_details.country_name

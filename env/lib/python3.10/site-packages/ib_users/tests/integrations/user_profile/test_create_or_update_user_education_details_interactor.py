from unittest import mock

import pytest

from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, models
from freezegun import freeze_time

pytestmark = pytest.mark.django_db


class TestCreateOrUpdateUserEducationDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.interactors.user_profile.\
            create_or_update_user_education_details_interactor import \
            CreateOrUpdateUserEducationDetailsInteractor

        return CreateOrUpdateUserEducationDetailsInteractor(
            user_profile_storage=UserProfileSQLStorage(),
            user_account_storage=UserAccountsSQLStorage())

    @pytest.fixture()
    def user_education_details(self):
        from ib_users.tests.factories import interface_dtos

        return interface_dtos.UpdateUserEducationDetailsDTOFactory(
            user_id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81",
            ssc_details=interface_dtos.UpdateSSCDetailsDTOFactory(
                board_name_enum=enums.SSCBoardName.CBSE.value,
                institute_id="institute_id", institute_name='institute_name-1',
                other_institute_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                score_type=enums.ScoreType.CGPA.value,
                score=10, year_of_completion=2014),
            intermediate_details=interface_dtos.UpdateIntermediateDetailsDTOFactory(
                course_id="MBIPC", other_institute_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                score_type=enums.ScoreType.CGPA.value,
                score=10, year_of_completion=2016, institute_id="RGUKT",
                other_course_name=None),
            degree_details=[
                interface_dtos.UpdateDegreeDetailsDTOFactory(
                    id=None,
                    course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                    other_course_name=None, course_name="course_name-1",
                    completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                    department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                    score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                    institute_id="RGUKT", other_institute_name=None,
                    institute_city_id="VEMPALLI", department_name="COMPUTERS",
                    expected_date_to_clear_backlogs=None,
                    institute_city_name="VEMCITY",
                    institute_pin_code="515671",
                    institute_district_id="institute_district_id",
                    institute_district_name="institute_district_name",
                    institute_state_id="institute_state_id",
                    institute_state_name="institute_state_name",
                    other_institute_city_name="other_institute_city_name",
                    other_department_name="other_department_name",
                    institute_country_name="institute_country_name",
                    institute_country_id="institute_country_id"
                )
            ]
        )

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_user_have_no_education_details_then_create_education_details(
            self, uuid_mock, interactor, user_education_details, snapshot):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319')
        ]
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        # Act
        interactor.create_or_update_user_education_details(
            user_education_details=user_education_details)

        # Assert
        from ib_users.models import UserSSCDetails, UserIntermediateDetails, \
            UserDegreeDetails

        user_ssc_details = UserSSCDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_ssc_details), "UserSSCDetails")

        user_intermediate_details = UserIntermediateDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_intermediate_details), "UserIntermediateDetails")

        user_degree_details = UserDegreeDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_degree_details), "UserDegreeDetails")

    @staticmethod
    def _convert_list_of_obj_dicts_to_proper_format(obj_dicts):
        import datetime
        import uuid

        for each in obj_dicts:
            for key, value in each.items():
                if type(value) in [datetime.datetime, uuid.UUID]:
                    each[key] = str(value)
        return list(obj_dicts)
import datetime
import pytest

from unittest import mock
from ib_users.tests.factories import interface_dtos, models
from freezegun import freeze_time
from ib_users.interfaces import enums as interface_enums

pytestmark = pytest.mark.django_db


class TestGetUserProfessionalDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.interactors.user_profile.\
            get_user_professional_details_interactor import \
            GetUserProfessionalDetailsInteractor

        return GetUserProfessionalDetailsInteractor(
            user_profile_storage=UserProfileSQLStorage(),
            user_account_storage=UserAccountsSQLStorage())

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_valid_user_id_return_user_professional_details(
            self, uuid_mock, interactor):
        # Arrange
        from uuid import UUID

        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942318'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942321'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942322'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942323'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942326'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942327'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942329'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942338'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942331'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942332'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942333'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942336'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942337'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339')
        ]
        models.UserCurrentProfessionalDetailsFactory.reset_sequence()
        models.UserProfessionalSkillsFactory.reset_sequence()
        models.UserCompanyDetailsFactory.reset_sequence()
        models.UserWorkExperienceDetailsFactory.reset_sequence()

        models.UserCurrentProfessionalDetailsFactory(
            user_account=user_account, job_role_id="job_role_id",
            job_role_name="job_role_name", other_job_role_name=None,
            higher_education_course_type=interface_enums.CourseType.BACHELORS.value,
            have_work_experience=False)
        models.UserProfessionalSkillsFactory(
            user_account=user_account, skill_id="skill_id",
            skill_name="skill_name", other_skill_name=None)
        models.UserCompanyDetailsFactory(
            user_account=user_account,
            company_id="company_id2", company_name="company_name11",
            other_company_name="other_company_nam1e1",
            company_city_id="company_city_id11",
            company_city_name="company_city_name11",
            job_role_id="job_role_id11", job_role_name="job_role_name1",
            other_job_role_name=None,
            is_currently_working_in_this_company=True,
            start_date=datetime.date.today(), end_date=datetime.date.today(),
            ctc=interface_enums.CTC.SIX_TO_NINE_LPA.value, no_of_months_for_notice_period=110,
            other_company_city_name="other_company_city_name")
        models.UserWorkExperienceDetailsFactory(
            user_account=user_account,
            no_of_years_experience_in_it_sector=10,
            no_of_years_experience_in_non_it_sector=11)

        expected_response = interface_dtos.UserProfessionalDetailsDTOFactory(
            user_id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
            work_experience_details=interface_dtos.WorkExperienceDetailsDTOFactory(
                no_of_years_experience_in_it_sector=10.0,
                no_of_years_experience_in_non_it_sector=11.0),
            company_details=[
                interface_dtos.CompanyDetailsDTOFactory(
                    id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                    company_details=interface_dtos.CompanyIdAndNameDTOFactory(
                        company_id='company_id2',
                        company_name='company_name11'),
                    other_company_name='other_company_nam1e1',
                    company_city_details=interface_dtos.CityDetailsDTOFactory(
                        city_id='company_city_id11',
                        city_name='company_city_name11'),
                    job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                        job_role_id='job_role_id11',
                        job_role_name='job_role_name1'),
                    other_job_role_name=None,
                    is_currently_working_in_this_company=True,
                    start_date=datetime.date(2020, 10, 10),
                    end_date=datetime.date(2020, 10, 10),
                    ctc=interface_enums.CTC.SIX_TO_NINE_LPA.value,
                    no_of_months_for_notice_period=110.0,
                    other_company_city_name="other_company_city_name")
            ],
            current_professional_details=interface_dtos.CurrentProfessionalDetailsDTOFactory(
                job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                    job_role_id='job_role_id',
                    job_role_name='job_role_name'),
                other_job_role_name=None,
                higher_education_course_type=interface_enums.CourseType.BACHELORS.value,
                have_work_experience=False,
                skill_details=[
                    interface_dtos.SkillDetailsDTOFactory(
                        id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                        skill_id='skill_id',
                        skill_name='skill_name', other_skill_name=None)
                ]))
        # Act
        actual_response = interactor.get_user_professional_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response

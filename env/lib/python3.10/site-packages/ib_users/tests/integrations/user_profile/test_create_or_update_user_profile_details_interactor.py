import datetime
import pytest

from unittest import mock

from ib_users.constants.user_profile.constants import NOT_GIVEN_DTO_VALUE
from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, models
from freezegun import freeze_time

pytestmark = pytest.mark.django_db


class TestCreateOrUpdateUserProfileDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.interactors.user_profile.\
            create_or_update_user_profile_details_interactor import \
            CreateOrUpdateUserProfileDetailsInteractor

        return CreateOrUpdateUserProfileDetailsInteractor(
            user_profile_storage=UserProfileSQLStorage(),
            user_account_storage=UserAccountsSQLStorage())

    @freeze_time("2020-10-10")
    @pytest.fixture()
    def user_profile_details(self):
        interface_dtos.UpdateUserProfileDetailsDTOFactory.reset_sequence()
        interface_dtos.UpdateProfileDetailsDTOFactory.reset_sequence()
        return interface_dtos.UpdateUserProfileDetailsDTOFactory(
            user_id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81",
            profile_details=interface_dtos.UpdateProfileDetailsDTOFactory(
                email="lakshmi@gmail.com", gender=enums.Gender.FEMALE.value,
                preferred_languages=[enums.Language.TELUGU.value],
                date_of_birth=str(datetime.date(2020, 10, 10))
            ),
            contact_details=interface_dtos.ContactDetailsDTOFactory(
                whatsapp_mobile_number="9988776655",
                whatsapp_mobile_country_code="91",
                i_want_to_receive_updates_in_whatsapp=True,
                have_whatsapp=True),
            social_profile_details=[
                interface_dtos.SocialProfileDetailsDTOFactory(
                    id=None, social_provider=enums.SocialProvider.LINKEDIN.value,
                    profile_link="https://www.linkedin.com/in/durgarao-uppalapati/"
                )
            ]
        )

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_user_have_no_professional_details_then_create_details(
            self, uuid_mock, interactor, user_profile_details,
            snapshot):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319')
        ]
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        # Act
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)

        # Assert
        from ib_users.models import UserProfile,\
            UserContactDetails, UserSocialProfileDetails, \
            UserPreferredLanguages

        user_profile_details = UserProfile.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_profile_details), "UserProfile")

        user_contact_details = UserContactDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_contact_details), "UserContactDetails")

        user_social_profiles = UserSocialProfileDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_social_profiles), "UserSocialProfileDetails")

        user_preferred_languages = UserPreferredLanguages.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_preferred_languages), "UserPreferredLanguages")

    @staticmethod
    def _convert_list_of_obj_dicts_to_proper_format(obj_dicts):
        import datetime
        import uuid

        for each in obj_dicts:
            for key, value in each.items():
                if type(value) in [datetime.datetime, uuid.UUID, datetime.date]:
                    each[key] = str(value)
        return list(obj_dicts)

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_valid_details_to_create_user_profile_details(
            self, uuid_mock, interactor, user_profile_details,
            snapshot):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319')
        ]
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)
        user_profile_details.profile_details.gender = NOT_GIVEN_DTO_VALUE
        user_profile_details.profile_details.date_of_birth = NOT_GIVEN_DTO_VALUE
        # Act
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)

        # Assert
        from ib_users.models import UserProfile,\
            UserContactDetails, UserSocialProfileDetails, \
            UserPreferredLanguages

        user_profile_details = UserProfile.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_profile_details), "UserProfile")

        user_contact_details = UserContactDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_contact_details), "UserContactDetails")

        user_social_profiles = UserSocialProfileDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_social_profiles), "UserSocialProfileDetails")

        user_preferred_languages = UserPreferredLanguages.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_preferred_languages), "UserPreferredLanguages")

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_valid_details_to_update_user_profile_details(
            self, uuid_mock, interactor, user_profile_details,
            snapshot):
        # Arrange
        models.UserProfileFactory.reset_sequence()
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319')
        ]
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        account = models.UserAccountFactory(user_id=user_id)
        models.UserProfileFactory(
            account=account, name="John", last_name="Doe",
            email="example1@gmail.com")
        user_profile_details.profile_details.first_name = NOT_GIVEN_DTO_VALUE
        user_profile_details.profile_details.last_name = NOT_GIVEN_DTO_VALUE

        # Act
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)

        # Assert
        from ib_users.models import UserProfile,\
            UserContactDetails, UserSocialProfileDetails, \
            UserPreferredLanguages

        user_profile_details = UserProfile.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_profile_details), "UserProfile")

        user_contact_details = UserContactDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_contact_details), "UserContactDetails")

        user_social_profiles = UserSocialProfileDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_social_profiles), "UserSocialProfileDetails")

        user_preferred_languages = UserPreferredLanguages.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_preferred_languages), "UserPreferredLanguages")

import datetime
import pytest

from unittest import mock
from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, models
from freezegun import freeze_time

pytestmark = pytest.mark.django_db


class TestGetUserProfileCompleteDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.interactors.user_profile. \
            get_user_complete_profile_details_interactor import \
            GetUserProfileCompleteDetailsInteractor

        return GetUserProfileCompleteDetailsInteractor(
            user_profile_storage=UserProfileSQLStorage(),
            user_account_storage=UserAccountsSQLStorage())

    @pytest.fixture()
    def reset_sequence(self):
        models.UserSSCDetailsFactory.reset_sequence()
        models.UserPreferredLanguagesFactory.reset_sequence()
        models.UserAccountFactory.reset_sequence()
        models.UserProfileFactory.reset_sequence()
        models.UserSocialProfileDetailsFactory.reset_sequence()
        models.UserContactDetailsFactory.reset_sequence()
        models.UserAddressDetailsFactory.reset_sequence()
        models.UserCurrentProfessionalDetailsFactory.reset_sequence()
        models.UserProfessionalSkillsFactory.reset_sequence()
        models.UserSSCDetailsFactory.reset_sequence()
        models.UserIntermediateDetailsFactory.reset_sequence()
        models.UserDegreeDetailsFactory.reset_sequence()
        models.UserWorkExperienceDetailsFactory.reset_sequence()
        models.UserCompanyDetailsFactory.reset_sequence()
        models.UserPreferredLanguagesFactory.reset_sequence()
        models.UserGuardianDetailsFactory.reset_sequence()

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_valid_user_id_then_return_user_profile_complete_details(
            self, uuid_mock, interactor, reset_sequence):
        # Arrange
        from uuid import UUID

        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942318'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942321'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942322'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942323'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942326'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942327'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942329'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942338'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942331'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942332'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942333'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942336'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942337'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339')
        ]

        # User Profile Data
        models.UserProfileFactory(
            account=user_account, email="john@gmail.com",
            name="John", gender=enums.Gender.MALE.value, dob=datetime.date.today(),
            profile_pic_url="profile_pic_url", cover_page_url="cover_page_url",
            is_phone_number_verified=True, is_email_verified=True)
        models.UserPreferredLanguagesFactory(
            user_account=user_account, language=enums.Language.TELUGU.value),
        models.UserPreferredLanguagesFactory(
            user_account=user_account, language=enums.Language.ENGLISH.value)
        models.UserContactDetailsFactory(
            user_account=user_account, whatsapp_mobile_number="9988776655",
            whatsapp_mobile_country_code="91",
            i_want_to_receive_updates_directly_on_whatsapp=True,
            have_whatsapp=True)

        # User Address Details.
        models.UserAddressDetailsFactory(
            user_account=user_account, address_1="address_1",
            address_2="address_2", pin_code="pin_code",
            city_id="city_id", city_name="city_name",
            other_city_name="other_city_name", district_id="district_id",
            district_name="district_name", state_id="state_id",
            state_name="state_name", country_id="country_id",
            country_name="country_name")

        # User Education Details.
        models.UserSSCDetailsFactory(
            user_account=user_account,
            board_name_enum=enums.SSCBoardName.CBSE.value,
            institute_id="institute_id",
            institute_name="institute_name",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)
        models.UserIntermediateDetailsFactory(
            user_account=user_account,
            intermediate_course_id="intermediate_course_id",
            intermediate_course_name="intermediate_course_name",
            institute_name="institute_name",
            other_intermediate_course_name=None,
            institute_id="institute_id",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)
        models.UserDegreeDetailsFactory(
            user_account=user_account, course_id="course_id-1",
            degree_type=enums.DegreeType.MASTERS.value,
            id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81",
            course_name="course_name-1", other_course_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            department_id="department_id-1",
            department_name="department_name-1",
            score_type=enums.ScoreType.CGPA.value,
            score=10, start_year=2020, end_year=2024,
            no_of_backlogs=0,
            institute_id="institute_id-1",
            institute_name="institute_name-1",
            other_institute_name=None,
            institute_pin_code="515671",
            institute_city_id="institute_city_id-1",
            institute_city_name="institute_city_name",
            expected_date_to_clear_backlogs=None,
            institute_district_id="institute_district_id",
            institute_district_name="institute_district_name",
            institute_state_id="institute_state_id",
            institute_state_name="institute_state_name",
            other_institute_city_name="other_institute_city_name",
            other_department_name="other_department_name",
            institute_country_name="institute_country_name",
            institute_country_id="institute_country_id")

        # User Professional Details.
        models.UserCurrentProfessionalDetailsFactory(
            user_account=user_account, job_role_id="job_role_id",
            job_role_name="job_role_name", other_job_role_name=None,
            higher_education_course_type=enums.CourseType.BACHELORS.value)
        models.UserProfessionalSkillsFactory(
            user_account=user_account, skill_id="skill_id",
            skill_name="skill_name", other_skill_name=None)
        models.UserCompanyDetailsFactory(
            user_account=user_account,
            company_id="company_id2", company_name="company_name11",
            other_company_name="other_company_nam1e1",
            company_city_id="company_city_id11",
            company_city_name="company_city_name11",
            job_role_id="job_role_id11", job_role_name="job_role_name1",
            other_job_role_name=None,
            is_currently_working_in_this_company=True,
            start_date=datetime.date.today(), end_date=datetime.date.today(),
            ctc=enums.CTC.SIX_TO_NINE_LPA.value, no_of_months_for_notice_period=110,
            other_company_city_name="other_company_city_name")
        models.UserWorkExperienceDetailsFactory(
            user_account=user_account,
            no_of_years_experience_in_it_sector=10,
            no_of_years_experience_in_non_it_sector=11)

        # User Social Profile Details.
        models.UserSocialProfileDetailsFactory(
            user_account=user_account, profile_link="profile_link-1",
            social_provider=enums.SocialProvider.LINKEDIN.value,
            id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81")

        user_guardian_details = models.UserGuardianDetailsFactory(
            user_account=user_account, email="durga@gmail.co")

        expected_response = \
            interface_dtos.UserCompleteProfileDetailsDTOFactory(
                user_id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                profile_details=interface_dtos.ProfileDetailsDTOFactory(
                    user_id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                    first_name='John',
                    last_name='last_name-1',
                    phone_number='9998877771',
                    country_code='91',
                    whatsapp_mobile_number='9988776655',
                    whatsapp_mobile_country_code='91',
                    i_want_to_receive_updates_in_whatsapp=True,
                    email='john@gmail.com',
                    date_of_birth=datetime.date(2020, 10, 10),
                    gender='MALE',
                    preferred_languages=[
                        'TELUGU',
                        'ENGLISH'
                    ],
                    profile_pic_url='profile_pic_url',
                    cover_page_url='cover_page_url',
                    have_whatsapp=True,
                    is_phone_number_verified=True,
                    is_email_verified=True),
                address_details=[
                    interface_dtos.AddressDetailsDTOFactory(
                        address_type='CURRENT',
                        address_1='address_1',
                        address_2='address_2',
                        pin_code='pin_code',
                        city_details=interface_dtos.CityDetailsDTOFactory(
                            city_id='city_id', city_name='city_name'),
                        other_city_name='other_city_name',
                        district_details=interface_dtos.DistrictDetailsDTOFactory(
                            district_id='district_id',
                            district_name='district_name'),
                        state_details=interface_dtos.StateDetailsDTOFactory(
                            state_id='state_id', state_name='state_name'),
                        country_details=interface_dtos.CountryDetailsDTOFactory(
                            country_id='country_id', country_name='country_name'))
                ],
                education_details=interface_dtos.UserEducationDetailsDTOFactory(
                    user_id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                    ssc_details=interface_dtos.SSCDetailsDTOFactory(
                        board_details=interface_dtos.BoardDetailsDTOFactory(
                            board_name='Central Board of Secondary Education',
                            board_name_enum='CBSE'),
                        institute_details=interface_dtos.InstituteDetailsDTOFactory(
                            institute_id='institute_id',
                            institute_name='institute_name'),
                        other_institute_name=None,
                        completion_status='COMPLETED',
                        score_type='CGPA',
                        score=10.0,
                        year_of_completion=2014),
                    intermediate_details=interface_dtos.IntermediateDetailsDTOFactory(
                        course_details=interface_dtos.CourseDetailsDTOFactory(
                            course_id='intermediate_course_id',
                            course_name='intermediate_course_name'),
                        other_course_name=None,
                        institute_details=interface_dtos.InstituteDetailsDTOFactory(
                            institute_id='institute_id',
                            institute_name='institute_name'),
                        other_institute_name=None,
                        completion_status='COMPLETED',
                        score_type='CGPA',
                        score=10.0,
                        year_of_completion=2014),
                    degree_details=[
                        interface_dtos.DegreeDetailsDTOFactory(
                            id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                            type='MASTERS',
                            course_details=interface_dtos.CourseDetailsDTOFactory(
                                course_id='course_id-1',
                                course_name='course_name-1'),
                            other_course_name=None,
                            completion_status='COMPLETED',
                            department_details=interface_dtos.DepartmentDetailsDTOFactory(
                                department_id='department_id-1',
                                department_name='department_name-1'),
                            score_type='CGPA',
                            score=10.0,
                            start_year=2020,
                            end_year=2024,
                            no_of_backlogs=0,
                            institute_details=interface_dtos.InstituteDetailsDTOFactory(
                                institute_id='institute_id-1',
                                institute_name='institute_name-1'),
                            other_institute_name=None,
                            institute_pin_code='515671',
                            institute_city_details=interface_dtos.CityDetailsDTOFactory(
                                city_id='institute_city_id-1',
                                city_name='institute_city_name'),
                            expected_date_to_clear_backlogs=None,
                            institute_district_details=interface_dtos.DistrictDetailsDTOFactory(
                                district_id="institute_district_id",
                                district_name="institute_district_name"),
                            institute_state_details=interface_dtos.StateDetailsDTOFactory(
                                state_id="institute_state_id",
                                state_name="institute_state_name"),
                            other_institute_city_name="other_institute_city_name",
                            other_department_name="other_department_name",
                            institute_country_details=interface_dtos.CountryDetailsDTOFactory(
                                country_id="institute_country_id",
                                country_name="institute_country_name")
                        )
                    ]),
                professional_details=interface_dtos.UserProfessionalDetailsDTOFactory(
                    user_id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                    work_experience_details=interface_dtos.WorkExperienceDetailsDTOFactory(
                        no_of_years_experience_in_it_sector=10.0,
                        no_of_years_experience_in_non_it_sector=11.0),
                    company_details=[
                        interface_dtos.CompanyDetailsDTOFactory(
                            id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                            company_details=interface_dtos.CompanyIdAndNameDTOFactory(
                                company_id='company_id2',
                                company_name='company_name11'),
                            other_company_name='other_company_nam1e1',
                            company_city_details=interface_dtos.CityDetailsDTOFactory(
                                city_id='company_city_id11',
                                city_name='company_city_name11'),
                            job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                                job_role_id='job_role_id11',
                                job_role_name='job_role_name1'),
                            other_job_role_name=None,
                            is_currently_working_in_this_company=True,
                            start_date=datetime.date(2020, 10, 10),
                            end_date=datetime.date(2020, 10, 10),
                            ctc=enums.CTC.SIX_TO_NINE_LPA.value,
                            no_of_months_for_notice_period=110.0,
                            other_company_city_name="other_company_city_name")
                    ],
                    current_professional_details=interface_dtos.CurrentProfessionalDetailsDTOFactory(
                        job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                            job_role_id='job_role_id',
                            job_role_name='job_role_name'),
                        other_job_role_name=None,
                        higher_education_course_type=enums.CourseType.BACHELORS.value,
                        skill_details=[
                            interface_dtos.SkillDetailsDTOFactory(
                                id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                                skill_id='skill_id',
                                skill_name='skill_name',
                                other_skill_name=None)
                        ])),
                social_profile_details=[
                    interface_dtos.SocialProfileDetailsDTOFactory(
                        id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                        social_provider='LINKEDIN',
                        profile_link='profile_link-1')
                ],
                guardian_details=interface_dtos.UserGuardianDetailsDTOFactory(
                    user_id=user_id,
                    first_name=user_guardian_details.first_name,
                    last_name=user_guardian_details.last_name,
                    relation=user_guardian_details.relation,
                    other_relation=user_guardian_details.other_relation,
                    job_role_id=user_guardian_details.job_role_id,
                    job_role_name=user_guardian_details.job_role_name,
                    other_job_role_name=user_guardian_details.other_job_role_name,
                    email=user_guardian_details.email,
                    country_code=user_guardian_details.country_code,
                    phone_number=user_guardian_details.phone_number,
                    have_whatsapp=user_guardian_details.have_whatsapp,
                    whatsapp_mobile_country_code=user_guardian_details.whatsapp_mobile_country_code,
                    whatsapp_mobile_number=user_guardian_details.whatsapp_mobile_number,
                    i_want_to_receive_updates_in_whatsapp=user_guardian_details.i_want_to_receive_updates_directly_on_whatsapp)
            )

        # Act
        user_profile_details = interactor.get_user_profile_complete_details(
            user_id=user_id)

        # Assert
        assert user_profile_details == expected_response

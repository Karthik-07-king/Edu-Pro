import datetime
from unittest import mock

import pytest

from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, models
from freezegun import freeze_time

pytestmark = pytest.mark.django_db


class TestCreateOrUpdateUserProfessionalDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.interactors.user_profile.\
            create_or_update_user_professional_details_interactor import \
            CreateOrUpdateUserProfessionalDetailsInteractor

        return CreateOrUpdateUserProfessionalDetailsInteractor(
            profile_storage=UserProfileSQLStorage(),
            account_storage=UserAccountsSQLStorage())

    @pytest.fixture()
    def update_user_professional_details_dto(self):
        return interface_dtos.UpdateUserProfessionalDetailsDTOFactory(
            user_id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81",
            work_experience_details=interface_dtos.WorkExperienceDetailsDTOFactory(
                no_of_years_experience_in_it_sector=10,
                no_of_years_experience_in_non_it_sector=10),
            company_details=[
                interface_dtos.UpdateUserCompanyDetailsDTOFactory(
                    id=None, company_id="company_id", company_name="company_name1",
                    other_company_name="other_company_name1",
                    company_city_id="company_city_id1",
                    company_city_name="company_city_name1",
                    job_role_id="job_role_id1", job_role_name="job_role_name",
                    other_job_role_name=None,
                    is_currently_working_in_this_company=True,
                    start_date=datetime.date(2020, 10, 10), end_date=datetime.date(2021, 10, 10),
                    ctc=enums.CTC.SIX_TO_NINE_LPA.value, no_of_months_for_notice_period=10,
                    other_company_city_name="other_company_city_name"
                )
            ],
            current_professional_details=interface_dtos.UpdateCurrentProfessionalDetailsDTOFactory(
                job_role_id="job_role_id", job_role_name="job_role_name",
                other_job_role_name="other_job_role_name",
                higher_education_course_type=enums.CourseType.BACHELORS.value,
                have_work_experience=False,
                skills=[
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id="skill_id", skill_name="skill_name",
                        id=None, other_skill_name=None
                    )
                ]
            )
        )

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_user_have_no_professional_details_then_create_details(
            self, uuid_mock, interactor, update_user_professional_details_dto,
            snapshot):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319')
        ]
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        # Act
        interactor.create_or_update_user_professional_details(
            update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        from ib_users.models import UserWorkExperienceDetails,\
            UserCompanyDetails, UserCurrentProfessionalDetails, \
            UserProfessionalSkills

        user_work_experience_details = UserWorkExperienceDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_work_experience_details), "UserWorkExperienceDetails")

        user_company_details = UserCompanyDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_company_details), "UserCompanyDetails")

        user_current_professional_details = UserCurrentProfessionalDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_current_professional_details), "UserCurrentProfessionalDetails")

        user_professional_skills = UserProfessionalSkills.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_professional_skills), "UserProfessionalSkills")

    @freeze_time("2020-10-10")
    @mock.patch('uuid.uuid4')
    def test_given_user_have_professional_details_then_update_details(
            self, uuid_mock, interactor, update_user_professional_details_dto,
            snapshot):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319')
        ]
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        update_user_professional_details_dto.company_details[0].id = \
            "5fd64953-7c9a-4e34-9f46-d9ad554dfe82"
        update_user_professional_details_dto.current_professional_details.skills[0].id = \
            "5fd64953-7c9a-4e34-9f46-d9ad554dfe82"

        models.UserWorkExperienceDetailsFactory(
            user_account=user_account,
            no_of_years_experience_in_it_sector=10,
            no_of_years_experience_in_non_it_sector=11)
        models.UserCurrentProfessionalDetailsFactory(
            user_account=user_account, job_role_id="Old Job")
        models.UserCompanyDetailsFactory(
            user_account=user_account, company_id="company_id",
            id="5fd64953-7c9a-4e34-9f46-d9ad554dfe82")
        models.UserProfessionalSkillsFactory(
            user_account=user_account,
            id="5fd64953-7c9a-4e34-9f46-d9ad554dfe82")

        # Act
        interactor.create_or_update_user_professional_details(
            update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        from ib_users.models import UserWorkExperienceDetails, \
            UserCompanyDetails, UserCurrentProfessionalDetails, \
            UserProfessionalSkills

        user_work_experience_details = UserWorkExperienceDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_work_experience_details), "UserWorkExperienceDetails")

        user_company_details = UserCompanyDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_company_details), "UserCompanyDetails")

        user_current_professional_details = UserCurrentProfessionalDetails.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_current_professional_details),
            "UserCurrentProfessionalDetails")

        user_professional_skills = UserProfessionalSkills.objects.values()
        snapshot.assert_match(self._convert_list_of_obj_dicts_to_proper_format(
            obj_dicts=user_professional_skills), "UserProfessionalSkills")

    @staticmethod
    def _convert_list_of_obj_dicts_to_proper_format(obj_dicts):
        import datetime
        import uuid

        for each in obj_dicts:
            for key, value in each.items():
                if type(value) in [datetime.datetime, uuid.UUID, datetime.date]:
                    each[key] = str(value)
        return list(obj_dicts)

import pytest

from unittest import mock
from ib_users.tests.factories import interface_dtos, models

pytestmark = pytest.mark.django_db


class TestGetUserAddressDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.interactors.user_profile.get_user_address_details_interactor\
            import GetUserAddressDetailsInteractor

        return GetUserAddressDetailsInteractor(
            user_profile_storage=UserProfileSQLStorage(),
            user_account_storage=UserAccountsSQLStorage())

    @mock.patch('uuid.uuid4')
    def test_given_valid_user_id_return_user_address_details(
            self, uuid_mock, interactor):
        # Arrange
        from uuid import UUID

        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942318'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942321'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942322'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942323'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942326'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942327'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942329'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942338'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942331'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942332'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942333'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942336'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942337'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339')
        ]

        models.UserAddressDetailsFactory(
            user_account=user_account, address_1="address_1",
            address_2="address_2", pin_code="pin_code",
            city_id="city_id", city_name="city_name",
            other_city_name="other_city_name", district_id="district_id",
            district_name="district_name", state_id="state_id",
            state_name="state_name", country_id="country_id",
            country_name="country_name")

        expected_response = [
            interface_dtos.AddressDetailsDTOFactory(
                address_type='CURRENT',
                address_1='address_1',
                address_2='address_2',
                pin_code='pin_code',
                city_details=interface_dtos.CityDetailsDTOFactory(
                    city_id='city_id', city_name='city_name'),
                other_city_name='other_city_name',
                district_details=interface_dtos.DistrictDetailsDTOFactory(
                    district_id='district_id',
                    district_name='district_name'),
                state_details=interface_dtos.StateDetailsDTOFactory(
                    state_id='state_id', state_name='state_name'),
                country_details=interface_dtos.CountryDetailsDTOFactory(
                    country_id='country_id', country_name='country_name'))
        ]

        # Act
        actual_response = interactor.get_user_address_details(user_id=user_id)

        # Assert
        assert expected_response == actual_response


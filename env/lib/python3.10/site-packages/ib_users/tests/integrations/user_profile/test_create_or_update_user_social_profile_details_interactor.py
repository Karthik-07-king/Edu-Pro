import pytest

from ib_users.tests.factories import models


@pytest.mark.django_db
class TestCreateOrUpdateUserSocialProfileDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage

        return UserProfileSQLStorage()

    @pytest.fixture()
    def user_account_storage(self):
        from ib_users.storages.user_accounts_sql_storage import UserAccountsSQLStorage

        return UserAccountsSQLStorage()

    @pytest.fixture()
    def interactor(self, user_profile_storage, user_account_storage):
        from ib_users.interactors.user_profile.\
            create_or_update_user_social_profile_details_interactor import \
            CreateOrUpdateUserSocialProfileDetailsInteractor
        return CreateOrUpdateUserSocialProfileDetailsInteractor(
            user_profile_storage=user_profile_storage,
            user_account_storage=user_account_storage)

    def test_given_invalid_user_raises_exception(
            self, interactor):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_id = "16fd2706-8baf-433b-82eb-8c7fada847da"
        social_provider = "TWITTER"
        profile_link = "https://twitter.com/user_1"

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.create_or_update_user_social_profile_details(
                user_id=user_id, social_provider=social_provider,
                profile_link=profile_link)

    def test_given_valid_details_create_or_update_social_profile_details(
            self, interactor):
        # Arrange
        models.UserAccountFactory.reset_sequence()

        user_account = models.UserAccountFactory.create()
        user_id = str(user_account.user_id)
        social_provider = "LINKEDIN"
        profile_link = "https://www.linkedin.com/in/durgarao-uppalapati/"

        # Act
        interactor.create_or_update_user_social_profile_details(
            user_id=user_id, social_provider=social_provider,
            profile_link=profile_link)

        # Assert
        from ib_users.models import UserSocialProfileDetails

        user_social_profile_details = UserSocialProfileDetails.objects.get(
            user_account_id=user_id)
        assert user_social_profile_details.social_provider == social_provider
        assert user_social_profile_details.profile_link == profile_link

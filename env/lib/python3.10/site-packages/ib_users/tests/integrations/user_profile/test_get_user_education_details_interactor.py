import pytest

from unittest import mock
from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, models

pytestmark = pytest.mark.django_db


class TestGetUserEducationDetailsInteractor:

    @pytest.fixture()
    def interactor(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.interactors.user_profile.get_user_education_details_interactor import \
            GetUserEducationDetailsInteractor

        return GetUserEducationDetailsInteractor(
            user_profile_storage=UserProfileSQLStorage(),
            user_account_storage=UserAccountsSQLStorage())

    @mock.patch('uuid.uuid4')
    def test_given_valid_user_id_return_user_education_details(
            self, uuid_mock, interactor):
        # Arrange
        from uuid import UUID

        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942316'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942319'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942318'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942321'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942322'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942323'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942326'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942327'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942329'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339'),
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942338'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942331'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942332'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942333'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942336'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942337'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942339')
        ]

        models.UserSSCDetailsFactory(
            user_account=user_account,
            board_name_enum=enums.SSCBoardName.CBSE.value,
            institute_id="institute_id",
            institute_name="institute_name",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)
        models.UserIntermediateDetailsFactory(
            user_account=user_account,
            intermediate_course_id="intermediate_course_id",
            intermediate_course_name="intermediate_course_name",
            institute_name="institute_name",
            other_intermediate_course_name=None,
            institute_id="institute_id",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)
        models.UserDegreeDetailsFactory(
            user_account=user_account, course_id="course_id-1",
            degree_type=enums.DegreeType.MASTERS.value,
            id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81",
            course_name="course_name-1", other_course_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            department_id="department_id-1",
            department_name="department_name-1",
            score_type=enums.ScoreType.CGPA.value,
            score=10, start_year=2020, end_year=2024,
            no_of_backlogs=0,
            institute_id="institute_id-1",
            institute_name="institute_name-1",
            other_institute_name=None,
            institute_pin_code="515671",
            institute_city_id="institute_city_id-1",
            institute_city_name="institute_city_name",
            expected_date_to_clear_backlogs=None,
            institute_district_id="institute_district_id",
            institute_district_name="institute_district_name",
            institute_state_id="institute_state_id",
            institute_state_name="institute_state_name",
            other_institute_city_name="other_institute_city_name",
            other_department_name="other_department_name",
            institute_country_name="institute_country_name",
            institute_country_id="institute_country_id")

        expected_response = interface_dtos.UserEducationDetailsDTOFactory(
            user_id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
            ssc_details=interface_dtos.SSCDetailsDTOFactory(
                board_details=interface_dtos.BoardDetailsDTOFactory(
                    board_name='Central Board of Secondary Education',
                    board_name_enum='CBSE'),
                institute_details=interface_dtos.InstituteDetailsDTOFactory(
                    institute_id='institute_id',
                    institute_name='institute_name'),
                other_institute_name=None,
                completion_status='COMPLETED',
                score_type='CGPA',
                score=10.0,
                year_of_completion=2014),
            intermediate_details=interface_dtos.IntermediateDetailsDTOFactory(
                course_details=interface_dtos.CourseDetailsDTOFactory(
                    course_id='intermediate_course_id',
                    course_name='intermediate_course_name'),
                other_course_name=None,
                institute_details=interface_dtos.InstituteDetailsDTOFactory(
                    institute_id='institute_id',
                    institute_name='institute_name'),
                other_institute_name=None,
                completion_status='COMPLETED',
                score_type='CGPA',
                score=10.0,
                year_of_completion=2014),
            degree_details=[
                interface_dtos.DegreeDetailsDTOFactory(
                    id='5fd64953-7c9a-4e34-9f46-d9ad554dfe81',
                    type='MASTERS',
                    course_details=interface_dtos.CourseDetailsDTOFactory(
                        course_id='course_id-1',
                        course_name='course_name-1'),
                    other_course_name=None,
                    completion_status='COMPLETED',
                    department_details=interface_dtos.DepartmentDetailsDTOFactory(
                        department_id='department_id-1',
                        department_name='department_name-1'),
                    score_type='CGPA',
                    score=10.0,
                    start_year=2020,
                    end_year=2024,
                    no_of_backlogs=0,
                    institute_details=interface_dtos.InstituteDetailsDTOFactory(
                        institute_id='institute_id-1',
                        institute_name='institute_name-1'),
                    other_institute_name=None,
                    institute_pin_code='515671',
                    institute_city_details=interface_dtos.CityDetailsDTOFactory(
                        city_id='institute_city_id-1',
                        city_name='institute_city_name'),
                    expected_date_to_clear_backlogs=None,
                    institute_district_details=interface_dtos.DistrictDetailsDTOFactory(
                        district_id="institute_district_id",
                        district_name="institute_district_name"),
                    institute_state_details=interface_dtos.StateDetailsDTOFactory(
                        state_id="institute_state_id",
                        state_name="institute_state_name"),
                    other_institute_city_name="other_institute_city_name",
                    other_department_name="other_department_name",
                    institute_country_details=interface_dtos.CountryDetailsDTOFactory(
                        country_id="institute_country_id",
                        country_name="institute_country_name")
                )
            ])

        # Act
        actual_response = interactor.get_user_education_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response


import uuid

import pytest

from django.test import override_settings
from ib_users import models
from ib_users.constants import otp_verification_constants
from ib_users.tests.common_fixtures.interactors import \
    get_validate_otp_send_to_phone_number_mock
from ib_users.interactors.DTOs import common_dtos as interactor_common_dtos
from ib_users.tests.factories import models as model_factories


@pytest.mark.django_db
class TestVerifyUpdatePhoneNumberOTPInteractor:

    @pytest.fixture
    def common_setup(self):
        from ib_users.storages.user_accounts_sql_storage \
            import UserAccountsSQLStorage
        from ib_users.storages.user_profile_sql_storage \
            import UserProfileSQLStorage
        from ib_users.interactors.\
            verify_update_phone_number_otp_interactor import \
            VerifyUpdatePhoneNumberOTPInteractor

        interactor = VerifyUpdatePhoneNumberOTPInteractor(
            user_accounts_storage=UserAccountsSQLStorage(),
            user_profile_storage=UserProfileSQLStorage())

        return interactor

    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus
                             .VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value
    ])
    def test_when_verify_otp_failed(
            self, verification_status, common_setup, mocker):
        interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        existing_phone_number = '9988776655'
        user_account = model_factories.UserAccountFactory(
            user_id=user_id, phone_number=existing_phone_number)
        user_profile = model_factories.UserProfileFactory(
            account=user_account, phone_number=existing_phone_number,
            email='email@email.com')
        update_phone_number_log = \
            model_factories.UpdateUserAccountPhoneNumberLogFactory(
                user_account=user_account,
                verification_status=verification_status,
                new_phone_number='6655443322',
                failure_remarks=None)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log.new_phone_number,
            country_code=update_phone_number_log.new_country_code
        )

        validate_otp_send_to_phone_number_mock = \
            get_validate_otp_send_to_phone_number_mock(mocker)
        validate_otp_send_to_phone_number_mock.side_effect = ValueError()

        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=existing_phone_number).\
            exists() is True
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=existing_phone_number). \
            exists() is True

        with pytest.raises(ValueError):
            interactor.verify_update_phone_number_otp(user_id, otp)

        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=existing_phone_number). \
            exists() is True
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=existing_phone_number). \
            exists() is True
        assert models.UpdateUserAccountPhoneNumberLog.objects.filter(
            id=str(update_phone_number_log.id),
            user_account_id=user_id, failure_remarks='ValueError',
            verification_status=otp_verification_constants
            .VerificationStatus.VERIFICATION_FAILED.value). \
            exists() is True

        validate_otp_send_to_phone_number_mock.assert_called_once_with(
            phone_number_dto=phone_number_dto, otp=otp)

    @override_settings(
        SWAP_PHONE_NUMBERS_WHILE_UPDATING=False)
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus.VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value
    ])
    def test_update_user_phone_number(
            self, verification_status, common_setup, mocker):
        interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        existing_phone_number = '9988776655'
        user_account = model_factories.UserAccountFactory(
            user_id=user_id, phone_number=existing_phone_number)
        user_profile = model_factories.UserProfileFactory(
            account=user_account, phone_number=existing_phone_number,
            email='email@email.com')
        update_phone_number_log = \
            model_factories.UpdateUserAccountPhoneNumberLogFactory(
                user_account=user_account,
                verification_status=verification_status,
                new_phone_number='6655443322',
                failure_remarks=None)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log.new_phone_number,
            country_code=update_phone_number_log.new_country_code
        )

        validate_otp_send_to_phone_number_mock = \
            get_validate_otp_send_to_phone_number_mock(mocker)

        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=existing_phone_number). \
            exists() is True
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=existing_phone_number). \
            exists() is True

        interactor.verify_update_phone_number_otp(user_id, otp)

        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=existing_phone_number). \
            exists() is False
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=existing_phone_number). \
            exists() is False
        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=phone_number_dto.phone_number). \
            exists() is True
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=phone_number_dto.phone_number). \
            exists() is True
        assert models.UpdateUserAccountPhoneNumberLog.objects.filter(
            id=str(update_phone_number_log.id),
            user_account_id=user_id, failure_remarks=None,
            verification_status=otp_verification_constants
            .VerificationStatus.VERIFIED.value). \
            exists() is True

        validate_otp_send_to_phone_number_mock.assert_called_once_with(
            phone_number_dto=phone_number_dto, otp=otp)

    @override_settings(SWAP_PHONE_NUMBERS_WHILE_UPDATING=True)
    def test_update_user_phone_number_to_swap_numbers(
            self, common_setup, mocker):
        interactor = common_setup
        user_id = str(uuid.uuid4())
        user_id_to_swap = str(uuid.uuid4())
        otp = "123456"

        old_phone_number = '9988776655'
        old_country_code = '+91'
        new_country_code = '+91'
        new_phone_number = '6655443322'
        user_account = model_factories.UserAccountFactory(
            user_id=user_id, phone_number=old_phone_number, country_code=old_country_code)
        model_factories.UserProfileFactory(
            account=user_account, phone_number=old_phone_number,
            email='email@email.com', country_code=old_country_code)
        user_account_to_swap = model_factories.UserAccountFactory(
            user_id=user_id_to_swap, phone_number=new_phone_number,
            country_code=new_country_code)
        model_factories.UserProfileFactory(
            account=user_account_to_swap, phone_number=new_phone_number,
            email='email1@email.com', country_code=new_country_code)
        verification_status = otp_verification_constants.VerificationStatus.VERIFICATION_IN_PROGRESS.value
        update_phone_number_log = \
            model_factories.UpdateUserAccountPhoneNumberLogFactory(
                user_account=user_account,
                verification_status=verification_status,
                new_phone_number=new_phone_number,
                failure_remarks=None,
                new_country_code=new_country_code,
                old_phone_number=old_phone_number,
                old_country_code=old_country_code)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log.new_phone_number,
            country_code=update_phone_number_log.new_country_code
        )

        validate_otp_send_to_phone_number_mock = \
            get_validate_otp_send_to_phone_number_mock(mocker)

        # Act
        interactor.verify_update_phone_number_otp(user_id, otp)

        # Assert
        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=new_phone_number,
            country_code=new_country_code).exists() is True
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=new_phone_number,
            country_code=new_country_code, is_phone_number_verified=True).exists() is True
        assert models.UserAccount.objects.filter(
            user_id=user_id_to_swap, phone_number=old_phone_number,
            country_code=old_country_code).exists() is True
        assert models.UserProfile.objects.filter(
            account_id=user_id_to_swap, phone_number=old_phone_number,
            country_code=old_country_code).exists() is True
        assert models.UpdateUserAccountPhoneNumberLog.objects.filter(
            id=str(update_phone_number_log.id),
            user_account_id=user_id, failure_remarks=None,
            verification_status=otp_verification_constants.VerificationStatus.VERIFIED.value).exists() is True

        validate_otp_send_to_phone_number_mock.assert_called_once_with(
            phone_number_dto=phone_number_dto, otp=otp)

    @override_settings(SWAP_PHONE_NUMBERS_WHILE_UPDATING=True)
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus.VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value
    ])
    def test_update_user_phone_number_when_user_account_does_not_exists(
            self, verification_status, common_setup, mocker):
        # Arrange
        interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        existing_phone_number = '9988776655'
        user_account = model_factories.UserAccountFactory(
            user_id=user_id, phone_number=existing_phone_number)
        user_profile = model_factories.UserProfileFactory(
            account=user_account, phone_number=existing_phone_number,
            email='email@email.com')
        update_phone_number_log = \
            model_factories.UpdateUserAccountPhoneNumberLogFactory(
                user_account=user_account,
                verification_status=verification_status,
                new_phone_number='6655443322',
                failure_remarks=None)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log.new_phone_number,
            country_code=update_phone_number_log.new_country_code
        )

        validate_otp_send_to_phone_number_mock = \
            get_validate_otp_send_to_phone_number_mock(mocker)

        # Act
        interactor.verify_update_phone_number_otp(user_id, otp)

        # Assert
        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=existing_phone_number). \
            exists() is False
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=existing_phone_number). \
            exists() is False
        assert models.UserAccount.objects.filter(
            user_id=user_id, phone_number=phone_number_dto.phone_number). \
            exists() is True
        assert models.UserProfile.objects.filter(
            account_id=user_id, phone_number=phone_number_dto.phone_number). \
            exists() is True
        assert models.UpdateUserAccountPhoneNumberLog.objects.filter(
            id=str(update_phone_number_log.id),
            user_account_id=user_id, failure_remarks=None,
            verification_status=otp_verification_constants
            .VerificationStatus.VERIFIED.value). \
            exists() is True

        validate_otp_send_to_phone_number_mock.assert_called_once_with(
            phone_number_dto=phone_number_dto, otp=otp)

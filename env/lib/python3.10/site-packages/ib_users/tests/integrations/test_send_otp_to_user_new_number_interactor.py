import uuid

import pytest
from django.conf import settings
from django.test import override_settings

from ib_users.constants import otp_verification_constants
from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.tests.common_fixtures.interactors import \
    get_send_otp_to_user_phone_number_mock
from ib_users.validators import base_validator
from ib_users.interactors.DTOs import common_dtos as interactor_common_dtos
from ib_users.tests.factories import models as model_factories


@pytest.mark.django_db
class TestSendOTPToUserNewNumberInteractor:

    @pytest.fixture
    def interactor(self):
        from ib_users.interactors.login\
            .send_otp_to_user_updated_phone_number_interactor \
            import SendOTPToUserUpdatedPhoneNumber
        from ib_users.storages.user_accounts_sql_storage \
            import UserAccountsSQLStorage

        return SendOTPToUserUpdatedPhoneNumber(
            UserAccountsSQLStorage())

    def test_when_user_update_phone_number_log_already_verified(
            self, interactor, mocker):

        user_id = str(uuid.uuid4())
        model_factories.UserAccountFactory(user_id=user_id)
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS.value

        send_otp_to_user_phone_number_mock = \
            get_send_otp_to_user_phone_number_mock(mocker)

        model_factories.UpdateUserAccountPhoneNumberLogFactory(
            user_account_id=user_id,
            verification_status=otp_verification_constants.
            VerificationStatus.VERIFIED.value)

        with pytest.raises(base_validator.CustomException):
            interactor.send_otp_to_user_updated_phone_number(
                user_id, send_otp_through)

        send_otp_to_user_phone_number_mock.assert_not_called()

    @override_settings(
        VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE='template',
    )
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus
                             .VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value
    ])
    def test_when_send_otp_to_user_new_number(
            self, verification_status, interactor, mocker):

        user_id = str(uuid.uuid4())
        model_factories.UserAccountFactory(user_id=user_id)
        sms_template = \
            OTPMessageFormatConstants.FORMAT_TO_VERIFY_UPDATE_PHONE_NUMBER
        call_template = settings.VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS.value

        update_phone_number_log = \
            model_factories.UpdateUserAccountPhoneNumberLogFactory(
                user_account_id=user_id,
                verification_status=verification_status)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log.new_phone_number,
            country_code=update_phone_number_log.new_country_code
        )

        send_otp_to_user_phone_number_mock = \
            get_send_otp_to_user_phone_number_mock(mocker)

        interactor.send_otp_to_user_updated_phone_number(
            user_id, send_otp_through)

        send_otp_to_user_phone_number_mock.assert_called_once_with(
            phone_number=phone_number_dto, template=sms_template,
            send_otp_through=send_otp_through, call_template=call_template
        )

from mock import create_autospec, call

from ib_users.conf.settings import SMS_SERVICE_PROVIDER
from ib_users.constants.otp_verification_constants import SendOTPThrough
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.verify_through_otp_interface import \
    VerifyThroughOTPInterface
from ib_users.third_party.otp_service_impl import OTPServiceImpl
from django.test import override_settings


class TestOTPServiceImpl:
    def test_validate_otp_send_to_phone_number(self):
        self._init_otp_service()
        phone_number_dto = PhoneNumberDTO("9087654321", "+91")
        otp = "4546"
        self.otp_service.validate_otp_send_to_phone_number(phone_number_dto,otp)
        self.verify_through_otp_interactor.validate_otp.assert_called_once_with(
            phone_number_dto=phone_number_dto,
            otp_to_be_verified=otp)

    def test_validate_otp_send_to_email(self):
        self._init_otp_service()
        email = "jim@gmail.com"
        otp = "4546"
        self.otp_service.validate_otp_send_to_email(email, otp)
        self.verify_through_otp_interactor.validate_otp. \
            assert_called_once_with(email=email,
                                    otp_to_be_verified=otp)

    def test_send_otp_to_user(self):
        self._init_otp_service()

        email = "jim@gmail.com"
        phone_number_dto = PhoneNumberDTO("9087654321", "+91")
        from ib_users.constants.otp_constants import OTPMessageFormatConstants
        template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
        subject = "sample subject"

        self.otp_service.send_otp_to_user(
            email=email,
            phone_number=phone_number_dto,
            template=template,
            subject=subject)
        assert self.verify_through_otp_interactor.verify_through_otp.call_count == 2

        call_args = [
            call(phone_number_dto=phone_number_dto,
                 send_otp_through=SendOTPThrough.SMS,
                 sms_service_provider=SMS_SERVICE_PROVIDER,
                 sms_template=template,
                 call_template=None),
            call(email=email,
                 email_body_template=template,
                 subject=subject)
        ]
        self.verify_through_otp_interactor.verify_through_otp.assert_has_calls(
            call_args, any_order=True
        )

    def send_otp_to_user_email(self):
        self._init_otp_service()
        email = "jim@gmail.com"
        otp = "4546"
        subject = "sample subject"
        from ib_users.constants.otp_constants import OTPMessageFormatConstants
        template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
        self.otp_service.send_otp_to_user_email(email,
                                                template,
                                                subject)
        self.verify_through_otp_interactor.verify_through_otp.assert_called_once_with(
            email,
            template,
            otp)

    def send_otp_to_user_phone_number(self):
        self._init_otp_service()
        phone_number_dto = PhoneNumberDTO("9087654321", "+91")
        from ib_users.constants.otp_constants import OTPMessageFormatConstants
        template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
        self.otp_service.send_otp_to_user_phone_number(phone_number_dto,
                                                template)
        self.verify_through_otp_interactor.verify_through_otp.assert_called_once_with(
            phone_number_dto,
            SendOTPThrough.SMS,
            SMS_SERVICE_PROVIDER,
            template)

    def _init_otp_service(self):
        self.verify_through_otp_interactor = create_autospec(VerifyThroughOTPInterface)
        self.otp_service = OTPServiceImpl(self.verify_through_otp_interactor)
    
    @override_settings(USE_TWILIO_FOR_INTERNATIONAL_NUMBERS="True")
    def test_send_otp_to_user_phone_number_given_international_country_code(self):
        # Arrange
        from ib_users.constants.otp_constants import OTPMessageFormatConstants
        from ib_users.constants.sms_constants import ServiceProvider
        from django.conf import settings
        
        self._init_otp_service()
        phone_number_dto = PhoneNumberDTO("9087654321", "+99")
        template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
        call_template = settings.LOGIN_OTP_CALL_TEMPLATE
        
        # Act
        self.otp_service.send_otp_to_user_phone_number(
            phone_number=phone_number_dto, template=template,
            send_otp_through=SendOTPThrough.SMS, call_template=call_template)
        
        # Assert
        self.verify_through_otp_interactor.verify_through_otp.assert_called_once_with(
            phone_number_dto=phone_number_dto,
            send_otp_through=SendOTPThrough.SMS,
            sms_service_provider=ServiceProvider.TWILIO.value,
            sms_template=template,
            call_template=call_template)
    
    @override_settings(USE_TWILIO_FOR_INTERNATIONAL_NUMBERS="True")
    def test_send_otp_to_user_recovery_phone_number_given_international_country_code(self):
        # Arrange
        from ib_users.constants.otp_constants import OTPMessageFormatConstants
        from ib_users.constants.sms_constants import ServiceProvider
        
        self._init_otp_service()
        phone_number_dto = PhoneNumberDTO("9087654321", "+99")
        user_id = "user_id1"
        template = OTPMessageFormatConstants.FORMAT_TO_LOGIN
        
        # Act
        self.otp_service.send_otp_to_user_recovery_phone_number(
            phone_number=phone_number_dto, template=template, user_id=user_id)
        
        # Assert
        self.verify_through_otp_interactor.verify_through_otp.assert_called_once_with(
            phone_number_dto=phone_number_dto,
            send_otp_through=SendOTPThrough.SMS,
            sms_service_provider=ServiceProvider.TWILIO.value,
            sms_template=template, user_id=user_id)

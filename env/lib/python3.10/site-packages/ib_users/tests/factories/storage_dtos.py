import datetime
import uuid

import factory

from ib_users.constants import otp_verification_constants
from ib_users.interactors.storages import dtos
from ib_users.constants.user_profile import enums
from ib_users.interactors.storages import user_accounts_storage as \
    user_account_storage_dtos


class UserDegreeDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserDegreeDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    type = enums.DegreeType.BACHELORS.value
    course_id = factory.Sequence(lambda n: "course_id-{0}".format(n + 1))
    other_course_name = factory.Sequence(
        lambda n: "other_course_name-{0}".format(n + 1))
    department_id = factory.Sequence(lambda n: "department_id-{0}".format(n + 1))
    other_institute_name = factory.Sequence(
        lambda n: "other_institute_name-{0}".format(n + 1))
    institute_id = factory.Sequence(lambda n: "institute_id-{0}".format(n + 1))
    institute_pin_code = factory.Sequence(
        lambda n: "institute_pin_code-{0}".format(n + 1))
    institute_city_id = factory.Sequence(
        lambda n: "institute_city_id-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    start_year = enums.ScoreType.CGPA.value
    end_year = factory.Sequence(lambda n: n + 1)
    no_of_backlogs = factory.Sequence(lambda n: n + 1)
    expected_date_to_clear_backlogs = datetime.date.today()
    department_name = factory.Sequence(lambda n: "department_name-{0}".format(n + 1))
    other_department_name = factory.Sequence(
        lambda n: "other_department_name-{0}".format(n + 1))
    institute_name = factory.Sequence(lambda n: "institute_name-{0}".format(n + 1))
    institute_city_name = factory.Sequence(lambda n: "city_name-{0}".format(n + 1))
    other_institute_city_name = factory.Sequence(lambda n: "other_institute_city_name-{0}".format(n + 1))
    course_name = factory.Sequence(lambda n: "course_name-{0}".format(n + 1))
    institute_district_id = factory.Sequence(
        lambda n: "institute_district_id-{0}".format(n + 1))
    institute_district_name = factory.Sequence(
        lambda n: "institute_district_name-{0}".format(n + 1))
    institute_state_id = factory.Sequence(
        lambda n: "institute_state_id-{0}".format(n + 1))
    institute_state_name = factory.Sequence(
        lambda n: "institute_state_name-{0}".format(n + 1))
    institute_country_id = factory.Sequence(
        lambda n: "institute_country_id-{0}".format(n + 1))
    institute_country_name = factory.Sequence(
        lambda n: "institute_country_name-{0}".format(n + 1))


class SocialProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.SocialProfileDetailsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    social_provider = factory.Sequence(lambda n: "social_provider-{0}".format(n + 1))
    profile_link = factory.Sequence(lambda n: "profile_link-{0}".format(n + 1))


class ProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.ProfileDetailsDTO

    first_name = factory.Sequence(lambda n: "first_name-{0}".format(n + 1))
    last_name = factory.Sequence(lambda n: "last_name-{0}".format(n + 1))
    phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    email = factory.Sequence(lambda n: "email-{0}".format(n + 1))
    date_of_birth = datetime.date.today()
    gender = factory.Sequence(lambda n: "gender-{0}".format(n + 1))
    profile_pic_url = factory.Sequence(lambda n: "profile_pic_url-{0}".format(n + 1))
    cover_page_url = factory.Sequence(lambda n: "cover_page_url-{0}".format(n + 1))


class AddressDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.AddressDetailsDTO

    address_type = enums.AddressType.CURRENT.value
    address_1 = factory.Sequence(lambda n: "address_1-{0}".format(n + 1))
    address_2 = factory.Sequence(lambda n: "address_2-{0}".format(n + 1))
    pin_code = factory.Sequence(lambda n: "pin_code-{0}".format(n + 1))
    city_id = factory.Sequence(lambda n: "city_id-{0}".format(n + 1))
    other_city_name = factory.Sequence(lambda n: "other_city_name-{0}".format(n + 1))
    district_id = factory.Sequence(lambda n: "district_id-{0}".format(n + 1))
    state_id = factory.Sequence(lambda n: "state_id-{0}".format(n + 1))
    country_id = factory.Sequence(lambda n: "country_id-{0}".format(n + 1))
    district_name = factory.Sequence(lambda n: "district_name-{0}".format(n + 1))
    city_name = factory.Sequence(lambda n: "city_name-{0}".format(n + 1))
    state_name = factory.Sequence(lambda n: "state_name-{0}".format(n + 1))
    country_name = factory.Sequence(lambda n: "country_name-{0}".format(n + 1))


class SSCDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.SSCDetailsDTO

    board_name_enum = enums.SSCBoardName.CBSE.value
    institute_id = factory.Sequence(lambda n: "institute_id-{0}".format(n + 1))
    other_institute_name = factory.Sequence(lambda n: "other_institute_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)
    institute_name = factory.Sequence(lambda n: "institute_name-{0}".format(n + 1))


class IntermediateDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.IntermediateDetailsDTO

    intermediate_course_id = factory.Sequence(
        lambda n: "intermediate_course_id-{0}".format(n + 1))
    other_intermediate_course = factory.Sequence(
        lambda n: "other_intermediate_course-{0}".format(n + 1))
    institute_id = factory.Sequence(
        lambda n: "institute_id-{0}".format(n + 1))
    other_institute_name = factory.Sequence(
        lambda n: "other_institute_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)
    course_name = factory.Sequence(
        lambda n: "course_name-{0}".format(n + 1))
    institute_name = factory.Sequence(
        lambda n: "institute_name-{0}".format(n + 1))


class WorkExperienceDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.WorkExperienceDetailsDTO

    no_of_years_experience_in_it_sector = factory.Sequence(lambda n: n + 1)
    no_of_years_experience_in_non_it_sector = factory.Sequence(lambda n: n + 1)


class CompanyDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CompanyDetailsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    company_id = factory.Sequence(
        lambda n: "company_id-{0}".format(n + 1))
    other_company_name = factory.Sequence(
        lambda n: "other_company_name-{0}".format(n + 1))
    company_city_id = factory.Sequence(
        lambda n: "company_city_id-{0}".format(n + 1))
    job_role_id = factory.Sequence(
        lambda n: "job_role_id-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(
        lambda n: "other_job_role_name-{0}".format(n + 1))
    is_currently_working_in_this_company = True
    start_date = datetime.date.today()
    end_date = datetime.date.today()
    ctc = factory.Sequence(lambda n: "ctc-{0}".format(n + 1))
    no_of_months_for_notice_period = factory.Sequence(lambda n: n + 1)
    company_name = factory.Sequence(lambda n: "company_name-{0}".format(n + 1))
    company_city_name = factory.Sequence(lambda n: "company_city_name-{0}".format(n + 1))
    other_company_city_name = factory.Sequence(lambda n: "company_city_name-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))


class CurrentProfessionalDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CurrentProfessionalDetailsDTO

    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    higher_education_course_type = enums.CourseType.BACHELORS.value
    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))
    have_work_experience = True


class UserCompanyDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserCompanyDetailsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    company_id = factory.Sequence(lambda n: "company_id-{0}".format(n + 1))
    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    other_company_name = factory.Sequence(
        lambda n: "other_company_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(
        lambda n: "other_job_role_name-{0}".format(n + 1))
    company_city_id = factory.Sequence(
        lambda n: "company_city_id-{0}".format(n + 1))
    is_currently_working_in_this_company = True
    start_date = datetime.date.today()
    end_date = datetime.date.today()
    ctc = factory.Sequence(lambda n: "ctc-{0}".format(n + 1))
    no_of_months_for_notice_period = factory.Sequence(lambda n: n + 1)


class UserProfessionalSkillsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserProfessionalSkillsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    skill_id = factory.Sequence(lambda n: "skill_id-{0}".format(n + 1))
    skill_name = factory.Sequence(lambda n: "skill_name-{0}".format(n + 1))
    other_skill_name = factory.Sequence(lambda n: "other_skill_name-{0}".format(n + 1))


class UserContactDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserContactDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    whatsapp_mobile_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    whatsapp_mobile_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    i_want_to_receive_updates_in_whatsapp = True
    have_whatsapp = True


class UserPreferredLanguagesDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserPreferredLanguagesDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    language = enums.Language.TELUGU.value


class UserGuardianDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserGuardianDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    first_name = factory.Sequence(lambda n: "first_name_{0}".format(n + 1))
    last_name = factory.Sequence(lambda n: "last_name_{0}".format(n + 1))
    relation = enums.GuardianRelation.FATHER.value
    other_relation = factory.Sequence(lambda n: "other_relation_{0}".format(n + 1))
    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    email = factory.Sequence(lambda n: "email_{0}@gmail.com".format(n + 1))
    country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    phone_number = factory.Sequence(lambda n: "123456789{0}".format(n + 1))
    have_whatsapp = True
    whatsapp_mobile_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    whatsapp_mobile_number = factory.Sequence(lambda n: "123456789{0}".format(n + 1))
    i_want_to_receive_updates_in_whatsapp = False


class UserAccountDTOFactory(factory.Factory):
    class Meta:
        model = user_account_storage_dtos.UserAccountDTO

    @factory.lazy_attribute
    def user_id(self):
        return str(uuid.uuid4())

    username = factory.Sequence(lambda n: f'username_{n+1}')
    email = None
    phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    country_code = '+91'


class UserAccountUpdatePhoneDetailsLogDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserAccountUpdatePhoneDetailsLogDTO

    @factory.lazy_attribute
    def user_id(self):
        return str(uuid.uuid4())

    old_phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    old_country_code = '+91'
    new_phone_number = factory.Sequence(lambda n: "118877665{0}".format(n + 1))
    new_country_code = '+91'
    change_reason = None
    verification_status = factory.Iterator(
        otp_verification_constants.VerificationStatus.get_list_of_values())
    failure_remarks = None
    verified_datetime = None


class UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
        UserAccountUpdatePhoneDetailsLogDTOFactory):
    class Meta:
        model = dtos.UserAccountUpdatePhoneLogWithCreationDetailsDTO

    @factory.lazy_attribute
    def id(self):
        return str(uuid.uuid4())

    creation_datetime = datetime.datetime(2022, 3, 1, 10)
    last_update_datetime = datetime.datetime(2022, 3, 1, 10)

import datetime
import uuid

import factory

from ib_users.interfaces import dtos
from ib_users.interfaces import enums


class UpdateSSCDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateSSCDetailsDTO

    board_name_enum = factory.Sequence(lambda n: "board_name_enum-{0}".format(n + 1))
    institute_id = factory.Sequence(lambda n: "institute_id-{0}".format(n + 1))
    other_institute_name = factory.Sequence(lambda n: "other_institute_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)
    institute_name = factory.Sequence(lambda n: "institute_name-{0}".format(n + 1))


class UpdateIntermediateDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateIntermediateDetailsDTO

    course_id = factory.Sequence(lambda n: "course_id-{0}".format(n + 1))
    institute_id = factory.Sequence(lambda n: "institute_id-{0}".format(n + 1))
    other_course_name = factory.Sequence(
        lambda n: "other_course_name-{0}".format(n + 1))
    other_institute_name = factory.Sequence(
        lambda n: "other_institute_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)
    course_name = factory.Sequence(
        lambda n: "course_name-{0}".format(n + 1))
    institute_name = factory.Sequence(
        lambda n: "institute_name-{0}".format(n + 1))


class UpdateDegreeDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateDegreeDetailsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    type = enums.DegreeType.BACHELORS.value
    course_id = factory.Sequence(lambda n: "course_id-{0}".format(n + 1))
    other_course_name = factory.Sequence(lambda n: "other_course_name-{0}".format(n + 1))
    department_id = factory.Sequence(lambda n: "department_id-{0}".format(n + 1))
    other_institute_name = factory.Sequence(lambda n: "other_institute_name-{0}".format(n + 1))
    institute_id = factory.Sequence(lambda n: "institute_id-{0}".format(n + 1))
    institute_pin_code = factory.Sequence(lambda n: "institute_pin_code-{0}".format(n + 1))
    institute_city_id = factory.Sequence(lambda n: "institute_city_id-{0}".format(n + 1))
    course_name = factory.Sequence(lambda n: "course_name-{0}".format(n + 1))
    department_name = factory.Sequence(
        lambda n: "department_name-{0}".format(n + 1))
    other_department_name = factory.Sequence(
        lambda n: "other_department_name-{0}".format(n + 1))
    institute_name = factory.Sequence(
        lambda n: "institute_name-{0}".format(n + 1))
    institute_city_name = factory.Sequence(
        lambda n: "institute_city_name-{0}".format(n + 1))
    other_institute_city_name = factory.Sequence(
        lambda n: "institute_city_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    start_year = enums.ScoreType.CGPA.value
    end_year = factory.Sequence(lambda n: n + 1)
    no_of_backlogs = factory.Sequence(lambda n: n + 1)
    expected_date_to_clear_backlogs = datetime.date.today()
    institute_district_id = factory.Sequence(
        lambda n: "institute_district_id-{0}".format(n + 1))
    institute_district_name = factory.Sequence(
        lambda n: "institute_district_name-{0}".format(n + 1))
    institute_state_id = factory.Sequence(
        lambda n: "institute_state_id-{0}".format(n + 1))
    institute_state_name = factory.Sequence(
        lambda n: "institute_state_name-{0}".format(n + 1))
    institute_country_id = factory.Sequence(
        lambda n: "institute_country_id-{0}".format(n + 1))
    institute_country_name = factory.Sequence(
        lambda n: "institute_country_name-{0}".format(n + 1))


class UpdateUserEducationDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateUserEducationDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    ssc_details = factory.SubFactory(UpdateSSCDetailsDTOFactory)
    intermediate_details = factory.SubFactory(UpdateIntermediateDetailsDTOFactory)
    degree_details = [UpdateDegreeDetailsDTOFactory.create()]


class UpdateProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateProfileDetailsDTO

    first_name = factory.Sequence(lambda n: "first_name-{0}".format(n + 1))
    last_name = factory.Sequence(lambda n: "last_name-{0}".format(n + 1))
    gender = enums.Gender.MALE.value
    preferred_languages = [enums.Language.TELUGU.value]
    date_of_birth = str(datetime.date.today())
    email = factory.Sequence(lambda n: "email-{0}".format(n + 1))
    profile_pic_url = factory.Sequence(lambda n: "profile_pic_url-{0}".format(n + 1))
    cover_page_url = factory.Sequence(lambda n: "cover_page_url-{0}".format(n + 1))


class ContactDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.ContactDetailsDTO

    whatsapp_mobile_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    whatsapp_mobile_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    i_want_to_receive_updates_in_whatsapp = True
    have_whatsapp = True


class SocialProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.SocialProfileDetailsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    social_provider = factory.Sequence(lambda n: "social_provider-{0}".format(n + 1))
    profile_link = factory.Sequence(lambda n: "profile_link-{0}".format(n + 1))


class UpdateUserProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateUserProfileDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    profile_details = factory.SubFactory(UpdateProfileDetailsDTOFactory)
    contact_details = factory.SubFactory(ContactDetailsDTOFactory)
    social_profile_details = [SocialProfileDetailsDTOFactory.create()]


class ProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.ProfileDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    first_name = factory.Sequence(lambda n: "first_name-{0}".format(n + 1))
    last_name = factory.Sequence(lambda n: "last_name-{0}".format(n + 1))
    phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    whatsapp_mobile_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    whatsapp_mobile_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    email = factory.Sequence(lambda n: "email-{0}".format(n + 1))
    date_of_birth = datetime.date.today()
    gender = enums.Gender.MALE.value
    profile_pic_url = factory.Sequence(lambda n: "profile_pic_url-{0}".format(n + 1))
    cover_page_url = factory.Sequence(lambda n: "cover_page_url-{0}".format(n + 1))
    preferred_languages = [enums.Language.TELUGU.value]
    i_want_to_receive_updates_in_whatsapp = True
    have_whatsapp = True
    is_phone_number_verified = True
    is_email_verified = True
    can_update_phone_number = True
    can_update_phone_number_after_datetime = None


class DistrictDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.DistrictDetailsDTO

    district_id = factory.Sequence(lambda n: "district_id-{0}".format(n + 1))
    district_name = factory.Sequence(lambda n: "district_name-{0}".format(n + 1))


class StateDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.StateDetailsDTO

    state_id = factory.Sequence(lambda n: "state_id-{0}".format(n + 1))
    state_name = factory.Sequence(lambda n: "state_name-{0}".format(n + 1))


class CityDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CityDetailsDTO

    city_id = factory.Sequence(lambda n: "city_id-{0}".format(n + 1))
    city_name = factory.Sequence(lambda n: "city_name-{0}".format(n + 1))


class CountryDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CountryDetailsDTO

    country_id = factory.Sequence(lambda n: "country_id-{0}".format(n + 1))
    country_name = factory.Sequence(lambda n: "country_name-{0}".format(n + 1))


class AddressDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.AddressDetailsDTO

    address_type = enums.AddressType.CURRENT.value
    address_1 = factory.Sequence(lambda n: "address_1-{0}".format(n + 1))
    address_2 = factory.Sequence(lambda n: "address_2-{0}".format(n + 1))
    pin_code = factory.Sequence(lambda n: "pin_code-{0}".format(n + 1))
    city_details = factory.SubFactory(CityDetailsDTOFactory)
    other_city_name = factory.Sequence(lambda n: "other_city_name-{0}".format(n + 1))
    district_details = factory.SubFactory(DistrictDetailsDTOFactory)
    state_details = factory.SubFactory(StateDetailsDTOFactory)
    country_details = factory.SubFactory(CountryDetailsDTOFactory)


class InstituteDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InstituteDetailsDTO

    institute_id = factory.Sequence(lambda n: "institute_id-{0}".format(n + 1))
    institute_name = factory.Sequence(lambda n: "institute_name-{0}".format(n + 1))


class BoardDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.BoardDetailsDTO

    board_name = factory.Sequence(lambda n: "board_name-{0}".format(n + 1))
    board_name_enum = factory.Sequence(lambda n: "board_name_enum-{0}".format(n + 1))


class SSCDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.SSCDetailsDTO

    board_details = factory.SubFactory(BoardDetailsDTOFactory)
    institute_details = factory.SubFactory(InstituteDetailsDTOFactory)
    other_institute_name = factory.Sequence(lambda n: "other_institute_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)


class CourseDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CourseDetailsDTO

    course_id = factory.Sequence(lambda n: "course_id-{0}".format(n + 1))
    course_name = factory.Sequence(lambda n: "course_name-{0}".format(n + 1))


class IntermediateDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.IntermediateDetailsDTO

    course_details = factory.SubFactory(CourseDetailsDTOFactory)
    institute_details = factory.SubFactory(InstituteDetailsDTOFactory)
    other_course_name = factory.Sequence(lambda n: "other_course_name-{0}".format(n + 1))
    other_institute_name = factory.Sequence(lambda n: "other_institute_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)


class DepartmentDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.DepartmentDetailsDTO

    department_id = factory.Sequence(lambda n: "department_id-{0}".format(n + 1))
    department_name = factory.Sequence(lambda n: "department_name-{0}".format(n + 1))


class DegreeDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.DegreeDetailsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    type = enums.DegreeType.BACHELORS.value
    course_details = factory.SubFactory(CourseDetailsDTOFactory)
    other_course_name = factory.Sequence(
        lambda n: "other_course_name-{0}".format(n + 1))
    department_details = factory.SubFactory(DepartmentDetailsDTOFactory)
    other_department_name = factory.Sequence(
        lambda n: "other_department_name-{0}".format(n + 1))
    other_institute_name = factory.Sequence(
        lambda n: "other_institute_name-{0}".format(n + 1))
    institute_details = factory.SubFactory(InstituteDetailsDTOFactory)
    institute_pin_code = factory.Sequence(
        lambda n: "institute_pin_code-{0}".format(n + 1))
    institute_city_details = factory.SubFactory(CityDetailsDTOFactory)
    other_institute_city_name = factory.Sequence(
        lambda n: "other_institute_city_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    start_year = enums.ScoreType.CGPA.value
    end_year = factory.Sequence(lambda n: n + 1)
    no_of_backlogs = factory.Sequence(lambda n: n + 1)
    expected_date_to_clear_backlogs = datetime.date.today()
    institute_district_details = factory.SubFactory(DistrictDetailsDTOFactory)
    institute_state_details = factory.SubFactory(StateDetailsDTOFactory)
    institute_country_details = factory.SubFactory(CountryDetailsDTOFactory)


class UserEducationDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserEducationDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    ssc_details = factory.SubFactory(SSCDetailsDTOFactory)
    intermediate_details = factory.SubFactory(IntermediateDetailsDTOFactory)
    degree_details = factory.SubFactory(DegreeDetailsDTOFactory)


class CompanyIdAndNameDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CompanyIdAndNameDTO

    company_id = factory.Sequence(lambda n: "company_id-{0}".format(n + 1))
    company_name = factory.Sequence(lambda n: "company_name-{0}".format(n + 1))


class JobRoleDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.JobRoleDetailsDTO

    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))


class CompanyDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CompanyDetailsDTO

    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    company_details = factory.SubFactory(CompanyIdAndNameDTOFactory)
    job_role_details = factory.SubFactory(JobRoleDetailsDTOFactory)
    other_company_name = factory.Sequence(lambda n: "other_company_name-{0}".format(n + 1))
    company_city_details = factory.SubFactory(CityDetailsDTOFactory)
    other_company_city_name = factory.Sequence(lambda n: "other_company_city_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    is_currently_working_in_this_company = True
    start_date = datetime.date.today()
    end_date = datetime.date.today()
    ctc = enums.CTC.SIX_TO_NINE_LPA.value
    no_of_months_for_notice_period = factory.Sequence(lambda n: n + 1)


class SkillDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.SkillDetailsDTO

    skill_id = factory.Sequence(lambda n: "skill_id-{0}".format(n + 1))
    skill_name = factory.Sequence(lambda n: "skill_name-{0}".format(n + 1))
    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    other_skill_name = factory.Sequence(lambda n: "other_skill_name_{0}".format(n + 1))


class CurrentProfessionalDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.CurrentProfessionalDetailsDTO

    job_role_details = factory.SubFactory(JobRoleDetailsDTOFactory)
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    higher_education_course_type = enums.CourseType.BACHELORS.value
    have_work_experience = True
    skill_details = factory.SubFactory(SkillDetailsDTOFactory)


class WorkExperienceDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.WorkExperienceDetailsDTO

    no_of_years_experience_in_it_sector = factory.Sequence(lambda n: n + 1)
    no_of_years_experience_in_non_it_sector = factory.Sequence(lambda n: n + 1)


class UserProfessionalDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserProfessionalDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    work_experience_details = factory.SubFactory(WorkExperienceDetailsDTOFactory)
    company_details = [CompanyDetailsDTOFactory.create()]
    current_professional_details = factory.SubFactory(CurrentProfessionalDetailsDTOFactory)


class UserCompleteProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserCompleteProfileDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    profile_details = factory.SubFactory(ProfileDetailsDTOFactory)
    address_details = [AddressDetailsDTOFactory.create()]
    education_details = factory.SubFactory(UserEducationDetailsDTOFactory)
    social_profile_details = [SocialProfileDetailsDTOFactory.create()]
    professional_details = factory.SubFactory(UserProfessionalDetailsDTOFactory)


class WorkExperienceDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.WorkExperienceDetailsDTO

    no_of_years_experience_in_it_sector = factory.Sequence(lambda n: n + 1)
    no_of_years_experience_in_non_it_sector = factory.Sequence(lambda n: n + 1)


class UpdateUserCompanyDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateUserCompanyDetailsDTO

    request_id = factory.Sequence(lambda n: "request_id-{0}".format(n + 1))
    id = factory.Sequence(lambda n: "id-{0}".format(n + 1))
    company_id = factory.Sequence(lambda n: "company_id-{0}".format(n + 1))
    company_name = factory.Sequence(lambda n: "company_name-{0}".format(n + 1))
    other_company_name = factory.Sequence(lambda n: "other_company_name-{0}".format(n + 1))
    company_city_id = factory.Sequence(lambda n: "company_city_id-{0}".format(n + 1))
    company_city_name = factory.Sequence(lambda n: "company_city_name-{0}".format(n + 1))
    other_company_city_name = factory.Sequence(lambda n: "company_city_name-{0}".format(n + 1))
    job_role_id = factory.Sequence(
        lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    is_currently_working_in_this_company = True
    start_date = datetime.date.today()
    end_date = datetime.date.today()
    ctc = enums.CTC.SIX_TO_NINE_LPA.value
    no_of_months_for_notice_period = factory.Sequence(lambda n: n + 1)


class UpdateCurrentProfessionalDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateCurrentProfessionalDetailsDTO

    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    higher_education_course_type = enums.CourseType.BACHELORS.value
    have_work_experience = True
    skills = factory.SubFactory(SkillDetailsDTOFactory)


class UpdateUserProfessionalDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateUserProfessionalDetailsDTO

    user_id = factory.Sequence(
        lambda n: "user_id-{0}".format(n + 1))
    work_experience_details = factory.SubFactory(WorkExperienceDetailsDTOFactory)
    company_details = [UpdateUserCompanyDetailsDTOFactory.create()]
    current_professional_details = factory.SubFactory(UpdateCurrentProfessionalDetailsDTOFactory)


class UpdateAddressDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateAddressDetailsDTO

    address_type = enums.AddressType.CURRENT.value
    address_1 = factory.Sequence(lambda n: "address_1-{0}".format(n + 1))
    address_2 = factory.Sequence(lambda n: "address_2-{0}".format(n + 1))
    pin_code = factory.Sequence(lambda n: "pin_code-{0}".format(n + 1))
    city_id = factory.Sequence(lambda n: "city_id-{0}".format(n + 1))
    city_name = factory.Sequence(lambda n: "city_name-{0}".format(n + 1))
    other_city_name = factory.Sequence(lambda n: "other_city_name-{0}".format(n + 1))
    district_id = factory.Sequence(lambda n: "district_id-{0}".format(n + 1))
    district_name = factory.Sequence(lambda n: "district_name-{0}".format(n + 1))
    state_id = factory.Sequence(lambda n: "state_id-{0}".format(n + 1))
    state_name = factory.Sequence(lambda n: "state_name-{0}".format(n + 1))
    country_id = factory.Sequence(lambda n: "country_id-{0}".format(n + 1))
    country_name = factory.Sequence(lambda n: "country_name-{0}".format(n + 1))


class UserGuardianDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UserGuardianDetailsDTO

    user_id = factory.Sequence(lambda n: "user_id-{0}".format(n + 1))
    first_name = factory.Sequence(lambda n: "first_name_{0}".format(n + 1))
    last_name = factory.Sequence(lambda n: "last_name_{0}".format(n + 1))
    relation = enums.GuardianRelation.FATHER.value
    other_relation = factory.Sequence(lambda n: "other_relation_{0}".format(n + 1))
    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    email = factory.Sequence(lambda n: "email_{0}@gmail.com".format(n + 1))
    country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    phone_number = factory.Sequence(lambda n: "123456789{0}".format(n + 1))
    have_whatsapp = True
    whatsapp_mobile_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    whatsapp_mobile_number = factory.Sequence(lambda n: "123456789{0}".format(n + 1))
    i_want_to_receive_updates_in_whatsapp = False


class InvalidValueDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidValueDetailsDTO

    value = factory.Sequence(lambda n: "value-{0}".format(n + 1))
    error_code = factory.Sequence(lambda n: "error_code-{0}".format(n + 1))
    error_message = factory.Sequence(lambda n: "error_message-{0}".format(n + 1))


class InvalidSSCDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidSSCDetailsDTO


class InvalidIntermediateDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidIntermediateDetailsDTO


class InvalidDegreeDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidDegreeDetailsDTO


class InvalidAddressDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidAddressDetailsDTO
    address_type = [InvalidValueDetailsDTOFactory()]


class InvalidProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidProfileDetailsDTO


class InvalidContactDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidContactDetailsDTO


class InvalidSocialProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidSocialProfileDetailsDTO


class InvalidUpdateUserProfileDetailsDTOFactory(factory.Factory):
    class Meta:
        model = dtos.InvalidUpdateUserProfileDetailsDTO


class UpdateUserAccountPhoneNumberDTOFactory(factory.Factory):
    class Meta:
        model = dtos.UpdateUserAccountPhoneNumberDTO

    @factory.lazy_attribute
    def user_id(self):
        return str(uuid.uuid4())

    phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    country_code = '+91'
    reason_to_change = None
    send_otp_through = None

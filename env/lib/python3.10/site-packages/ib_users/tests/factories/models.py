import datetime
import factory

from ib_users import models
from ib_users.constants import otp_verification_constants
from ib_users.constants.user_profile import enums


class UserAccountFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserAccount

    user_id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    username = factory.Sequence(lambda n: "username-{0}".format(n + 1))
    phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    iso_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    email = factory.Sequence(lambda n: "email-{0}".format(n + 1))
    is_password_reset = True


class UserProfileFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserProfile

    name = factory.Sequence(lambda n: f"name-{n + 1}")
    gender = enums.Gender.FEMALE.value
    dob = datetime.date.today()
    profile_pic_url = factory.Sequence(lambda n: "profile_pic_url-{0}".format(n + 1))
    phone_number = factory.Sequence(lambda n: "999887777{0}".format(n + 1))
    last_name = factory.Sequence(lambda n: "last_name-{0}".format(n + 1))
    cover_page_url = factory.Sequence(lambda n: "cover_page_url-{0}".format(n + 1))
    is_phone_number_verified = True
    country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    is_email_verified = True
    email = factory.Sequence(lambda n: "email-{0}".format(n + 1))
    language_preference = enums.Language.TELUGU.value
    account = factory.SubFactory(UserAccountFactory)
    iso_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))


class UserSocialProfileDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserSocialProfileDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    profile_link = factory.Sequence(lambda n: "profile_link-{0}".format(n + 1))
    user_account = factory.SubFactory(UserAccountFactory)
    social_provider = enums.SocialProvider.LINKEDIN.value


class UserContactDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserContactDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    have_whatsapp = True
    whatsapp_mobile_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    whatsapp_mobile_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    i_want_to_receive_updates_directly_on_whatsapp = True


class UserAddressDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserAddressDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    address_type = enums.AddressType.CURRENT.value
    address_1 = factory.Sequence(lambda n: "address-{0}".format(n + 1))
    address_2 = factory.Sequence(lambda n: "address_{0}".format(n + 1))
    pin_code = factory.Sequence(lambda n: "pin_code-{0}".format(n + 1))
    city_id = factory.Sequence(lambda n: "city_id-{0}".format(n + 1))
    city_name = factory.Sequence(lambda n: "city_name-{0}".format(n + 1))
    other_city_name = factory.Sequence(lambda n: "other_city_name-{0}".format(n + 1))
    district_id = factory.Sequence(lambda n: "district_id-{0}".format(n + 1))
    district_name = factory.Sequence(lambda n: "district_name-{0}".format(n + 1))
    state_id = factory.Sequence(lambda n: "state_id-{0}".format(n + 1))
    state_name = factory.Sequence(lambda n: "state_name-{0}".format(n + 1))
    country_id = factory.Sequence(lambda n: "country_id-{0}".format(n + 1))
    country_name = factory.Sequence(lambda n: "country_name-{0}".format(n + 1))


class UserCurrentProfessionalDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserCurrentProfessionalDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    higher_education_course_type = enums.CourseType.BACHELORS.value
    have_work_experience = True


class UserProfessionalSkillsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserProfessionalSkills

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    skill_id = factory.Sequence(lambda n: "skill_id-{0}".format(n + 1))
    skill_name = factory.Sequence(lambda n: "skill_name-{0}".format(n + 1))
    other_skill_name = factory.Sequence(lambda n: "other_skill_name-{0}".format(n + 1))


class UserSSCDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserSSCDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    board_name_enum = enums.SSCBoardName.CBSE.value
    institute_id = factory.Sequence(lambda n: "institute_id-{0}".format(n + 1))
    institute_name = factory.Sequence(lambda n: "institute_name-{0}".format(n + 1))
    other_institute_name = factory.Sequence(lambda n: "other_institute_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)


class UserIntermediateDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserIntermediateDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    intermediate_course_id = factory.Sequence(lambda n: "intermediate_course_id-{0}".format(n + 1))
    intermediate_course_name = factory.Sequence(
        lambda n: "intermediate_course_name-{0}".format(n + 1))
    other_intermediate_course_name = factory.Sequence(
        lambda n: "other_intermediate_course-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    institute_id = factory.Sequence(
        lambda n: "institute_id-{0}".format(n + 1))
    institute_name = factory.Sequence(
        lambda n: "institute_name-{0}".format(n + 1))
    other_institute_name = factory.Sequence(
        lambda n: "other_institute_name-{0}".format(n + 1))
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    year_of_completion = factory.Sequence(lambda n: n + 1)


class UserDegreeDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserDegreeDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    degree_type = enums.DegreeType.BACHELORS.value
    user_account = factory.SubFactory(UserAccountFactory)
    course_id = factory.Sequence(lambda n: "course_id-{0}".format(n + 1))
    course_name = factory.Sequence(
        lambda n: "course_name-{0}".format(n + 1))
    other_course_name = factory.Sequence(
        lambda n: "other_course_name-{0}".format(n + 1))
    completion_status = enums.CourseCompletionStatus.COMPLETED.value
    department_id = factory.Sequence(
        lambda n: "department_id-{0}".format(n + 1))
    department_name = factory.Sequence(
        lambda n: "department_name-{0}".format(n + 1))
    other_department_name = factory.Sequence(
        lambda n: "other_department_name-{0}".format(n + 1))
    score_type = enums.ScoreType.CGPA.value
    score = factory.Sequence(lambda n: n + 1)
    start_year = factory.Sequence(lambda n: n + 1)
    end_year = factory.Sequence(lambda n: n + 1)
    no_of_backlogs = factory.Sequence(lambda n: n + 1)
    institute_id = factory.Sequence(
        lambda n: "institute_id-{0}".format(n + 1))
    institute_name = factory.Sequence(
        lambda n: "institute_name-{0}".format(n + 1))
    other_institute_name = factory.Sequence(
        lambda n: "other_institute_name-{0}".format(n + 1))
    institute_pin_code = factory.Sequence(
        lambda n: "institute_pin_code-{0}".format(n + 1))
    institute_city_id = factory.Sequence(
        lambda n: "other_institute_name-{0}".format(n + 1))
    institute_city_name = factory.Sequence(
        lambda n: "institute_city_name-{0}".format(n + 1))
    other_institute_city_name = factory.Sequence(
        lambda n: "other_institute_city_name-{0}".format(n + 1))
    expected_date_to_clear_backlogs = datetime.date.today()
    institute_district_id = factory.Sequence(
        lambda n: "institute_district_id-{0}".format(n + 1))
    institute_district_name = factory.Sequence(
        lambda n: "institute_district_name-{0}".format(n + 1))
    institute_state_id = factory.Sequence(
        lambda n: "institute_state_id-{0}".format(n + 1))
    institute_state_name = factory.Sequence(
        lambda n: "institute_state_name-{0}".format(n + 1))
    institute_country_id = factory.Sequence(
        lambda n: "institute_country_id-{0}".format(n + 1))
    institute_country_name = factory.Sequence(
        lambda n: "institute_country_name-{0}".format(n + 1))


class UserWorkExperienceDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserWorkExperienceDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    no_of_years_experience_in_it_sector = factory.Sequence(lambda n: n + 1)
    no_of_years_experience_in_non_it_sector = factory.Sequence(lambda n: n + 1)


class UserCompanyDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserCompanyDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    company_id = factory.Sequence(lambda n: "company_id-{0}".format(n + 1))
    company_name = factory.Sequence(
        lambda n: "company_name-{0}".format(n + 1))
    other_company_name = factory.Sequence(
        lambda n: "other_company_name-{0}".format(n + 1))
    company_city_id = factory.Sequence(
        lambda n: "company_city_id-{0}".format(n + 1))
    company_city_name = factory.Sequence(
        lambda n: "company_city_name-{0}".format(n + 1))
    other_company_city_name = factory.Sequence(
        lambda n: "company_city_name-{0}".format(n + 1))
    job_role_id = factory.Sequence(
        lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(
        lambda n: "job_role_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(
        lambda n: "other_job_role_name-{0}".format(n + 1))
    is_currently_working_in_this_company = True
    start_date = datetime.date.today()
    end_date = datetime.date.today()
    ctc = enums.CTC.SIX_TO_NINE_LPA.value
    no_of_months_for_notice_period = factory.Sequence(lambda n: n + 1)


class UserPreferredLanguagesFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserPreferredLanguages

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    language = factory.Sequence(lambda n: 'language-{0}'.format(n + 1))


class UserGuardianDetailsFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserGuardianDetails

    id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    user_account = factory.SubFactory(UserAccountFactory)
    job_role_id = factory.Sequence(lambda n: "job_role_id-{0}".format(n + 1))
    job_role_name = factory.Sequence(lambda n: "job_role_name-{0}".format(n + 1))
    other_job_role_name = factory.Sequence(lambda n: "other_job_role_name-{0}".format(n + 1))
    other_relation = factory.Sequence(lambda n: "other_relation-{0}".format(n + 1))
    first_name = factory.Sequence(lambda n: "first_name-{0}".format(n + 1))
    last_name = factory.Sequence(lambda n: "last_name-{0}".format(n + 1))
    relation = enums.GuardianRelation.FATHER.value
    email = factory.Sequence(lambda n: "email-{0}".format(n + 1))
    whatsapp_mobile_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    whatsapp_mobile_country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    country_code = factory.Sequence(lambda n: "9{0}".format(n + 1))
    have_whatsapp = True
    i_want_to_receive_updates_directly_on_whatsapp = False


class UpdateUserAccountPhoneNumberLogFactory(
        factory.django.DjangoModelFactory):
    class Meta:
        model = models.UpdateUserAccountPhoneNumberLog

    user_account = factory.SubFactory(UserAccountFactory)

    old_phone_number = factory.Sequence(lambda n: "998877665{0}".format(n + 1))
    old_country_code = '+91'
    new_phone_number = factory.Sequence(lambda n: "118877665{0}".format(n + 1))
    new_country_code = '+91'
    change_reason = None
    verification_status = factory.Iterator(
        otp_verification_constants.VerificationStatus.get_list_of_values())
    failure_remarks = None
    verified_datetime = None


class UserFingerprintJsLoginDeviceDetailsFactory(
        factory.django.DjangoModelFactory):
    class Meta:
        model = models.UserFingerprintJsLoginDeviceDetails

    user_id = factory.Sequence(
        lambda n: f"5fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    request_id = factory.Sequence(
        lambda n: f"6fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")
    device_id = factory.Sequence(
        lambda n: f"7fd64953-7c9a-4e34-9f46-d9ad554dfe8{n + 1}")

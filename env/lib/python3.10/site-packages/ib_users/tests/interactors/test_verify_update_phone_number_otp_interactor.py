import datetime
import uuid

import mock
import pytest
from freezegun import freeze_time
from django.test import override_settings
from ib_users.constants import otp_verification_constants
from ib_users.exceptions import user_account_exceptions, \
    registration_exceptions
from ib_users.interactors.user_profile_interactor import UserProfileDTO
from ib_users.tests.common_fixtures.interactors import \
    get_validate_otp_send_to_phone_number_mock
from ib_users.validators import base_validator
from ib_users.tests.factories import storage_dtos as storage_dtos_factories
from ib_users.interactors.DTOs import common_dtos as interactor_common_dtos
from ib_users.validators.base_validator import CustomException


@pytest.mark.django_db
class TestVerifyUpdatePhoneNumberOTPInteractor:

    @pytest.fixture
    def common_setup(self):
        from unittest.mock import create_autospec
        from ib_users.interactors.storages import user_accounts_storage as \
            user_accounts_storages
        from ib_users.interactors.storages import user_profile_storage as \
            user_profile_storages
        from ib_users.interactors.\
            verify_update_phone_number_otp_interactor import \
            VerifyUpdatePhoneNumberOTPInteractor

        user_accounts_storage_mock = create_autospec(
            user_accounts_storages.UserAccountsStorage)
        user_profile_storage_mock = create_autospec(
            user_profile_storages.UserProfileStorage)

        interactor = VerifyUpdatePhoneNumberOTPInteractor(
            user_accounts_storage=user_accounts_storage_mock,
            user_profile_storage=user_profile_storage_mock)

        return user_accounts_storage_mock, user_profile_storage_mock, \
            interactor

    def test_with_invalid_user_id_raises_exception(
            self, common_setup):
        user_accounts_storage_mock, user_profile_storage_mock, \
            interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        user_accounts_storage_mock.is_user_id_exists.return_value = False

        with pytest.raises(user_account_exceptions.InvalidUserIdException):
            interactor.verify_update_phone_number_otp(
                user_id, otp)

        user_accounts_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id)
        user_accounts_storage_mock\
            .get_user_latest_update_phone_number_log_details.assert_not_called()

    def test_when_user_update_phone_number_log_details_does_not_exist_raises_exception(
            self, common_setup):
        user_accounts_storage_mock, user_profile_storage_mock, \
            interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        user_accounts_storage_mock.is_user_id_exists.return_value = True
        user_accounts_storage_mock\
            .get_user_latest_update_phone_number_log_details.return_value = \
            None

        with pytest.raises(base_validator.CustomException):
            interactor.verify_update_phone_number_otp(
                user_id, otp)

        user_accounts_storage_mock \
            .get_user_latest_update_phone_number_log_details.\
            assert_called_once_with(user_id)
        user_accounts_storage_mock.check_user_exists_with_phone_number\
            .assert_not_called()

    def test_when_user_update_phone_number_log_details_already_verified(
            self, common_setup):
        user_accounts_storage_mock, user_profile_storage_mock, \
            interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        user_account_update_phone_log_dto = \
            storage_dtos_factories \
                .UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                    user_id=user_id,
                    verification_status=otp_verification_constants
                    .VerificationStatus.VERIFIED.value
            )

        user_accounts_storage_mock.is_user_id_exists.return_value = True
        user_accounts_storage_mock\
            .get_user_latest_update_phone_number_log_details.return_value = \
            user_account_update_phone_log_dto

        with pytest.raises(base_validator.CustomException):
            interactor.verify_update_phone_number_otp(
                user_id, otp)

        user_accounts_storage_mock.check_user_exists_with_phone_number\
            .assert_not_called()

    @override_settings(SWAP_PHONE_NUMBERS_WHILE_UPDATING=False)
    def test_when_user_with_phone_number_already_exists(
            self, common_setup, mocker):
        user_accounts_storage_mock, user_profile_storage_mock, \
            interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        update_phone_number_log_dto = \
            storage_dtos_factories \
                .UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                    user_id=user_id,
                    verification_status=otp_verification_constants
                    .VerificationStatus.VERIFICATION_IN_PROGRESS.value
            )

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code
        )

        user_accounts_storage_mock.is_user_id_exists.return_value = True
        user_accounts_storage_mock\
            .get_user_latest_update_phone_number_log_details.return_value = \
            update_phone_number_log_dto
        user_accounts_storage_mock.check_user_exists_with_phone_number\
            .side_effect = registration_exceptions.\
            AccountWithThisPhoneNumberAlreadyExistsException()

        validate_otp_send_to_phone_number_mock = \
            get_validate_otp_send_to_phone_number_mock(mocker)

        with pytest.raises(
                registration_exceptions.
                AccountWithThisPhoneNumberAlreadyExistsException):
            interactor.verify_update_phone_number_otp(
                user_id, otp)

        user_accounts_storage_mock.check_user_exists_with_phone_number\
            .assert_called_once_with(phone_number_dto)

        validate_otp_send_to_phone_number_mock.assert_not_called()

    def test_when_verify_otp_failed(
            self, common_setup, mocker):
        user_accounts_storage_mock, user_profile_storage_mock, \
            interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        update_phone_number_log_dto = \
            storage_dtos_factories \
            .UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                user_id=user_id,
                verification_status=otp_verification_constants
                .VerificationStatus.VERIFICATION_IN_PROGRESS.value
            )

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code
        )

        user_accounts_storage_mock.is_user_id_exists.return_value = True
        user_accounts_storage_mock\
            .get_user_latest_update_phone_number_log_details.return_value = \
            update_phone_number_log_dto

        validate_otp_send_to_phone_number_mock = \
            get_validate_otp_send_to_phone_number_mock(mocker)
        validate_otp_send_to_phone_number_mock.side_effect = ValueError()

        with pytest.raises(ValueError):
            interactor.verify_update_phone_number_otp(user_id, otp)

        user_accounts_storage_mock\
            .update_user_update_phone_number_verification_status\
            .assert_called_once_with(
                update_phone_number_log_dto.id,
                otp_verification_constants.VerificationStatus
                .VERIFICATION_FAILED.value,
                'ValueError',
                None
            )
        user_accounts_storage_mock.link_phone_number_to_user.assert_not_called()

        validate_otp_send_to_phone_number_mock.assert_called_once_with(
            phone_number_dto=phone_number_dto, otp=otp)

    @override_settings(SWAP_PHONE_NUMBERS_WHILE_UPDATING=False)
    @freeze_time("2022-05-28")
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus
                             .VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value
    ])
    def test_update_user_phone_number(
            self, verification_status, common_setup, mocker):
        user_accounts_storage_mock, user_profile_storage_mock, \
            interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        update_phone_number_log_dto = \
            storage_dtos_factories \
            .UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                user_id=user_id,
                verification_status=verification_status
            )

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code
        )

        user_accounts_storage_mock.is_user_id_exists.return_value = True
        user_accounts_storage_mock\
            .get_user_latest_update_phone_number_log_details.return_value = \
            update_phone_number_log_dto

        user_profile_dto = UserProfileDTO(
            phone_number=phone_number_dto.phone_number,
            country_code=phone_number_dto.country_code)

        get_validate_otp_send_to_phone_number_mock(mocker)

        interactor.verify_update_phone_number_otp(user_id, otp)

        user_accounts_storage_mock\
            .update_user_update_phone_number_verification_status\
            .assert_called_once_with(
                update_phone_number_log_dto.id,
                otp_verification_constants.VerificationStatus
                .VERIFIED.value, None, datetime.datetime(2022, 5, 28)
            )
        user_accounts_storage_mock.link_phone_number_to_user.\
            assert_called_once_with(user_id, phone_number_dto)
        user_profile_storage_mock.update_user_profile.assert_called_once_with(
            user_id=user_id, update_profile_data=user_profile_dto
        )

    @override_settings(SWAP_PHONE_NUMBERS_WHILE_UPDATING=True)
    @freeze_time("2022-05-28")
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus.VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value])
    def test_update_user_phone_number_to_swap_numbers(
            self, verification_status, common_setup, mocker):
        # Arrange
        user_accounts_storage_mock, user_profile_storage_mock, \
        interactor = common_setup
        user_id = str(uuid.uuid4())
        user_id_to_swap = str(uuid.uuid4())
        otp = "123456"

        update_phone_number_log_dto = \
            storage_dtos_factories.UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                user_id=user_id, verification_status=verification_status)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code)

        user_accounts_storage_mock.is_user_id_exists.return_value = True
        user_accounts_storage_mock \
            .get_user_latest_update_phone_number_log_details.return_value = \
            update_phone_number_log_dto
        user_accounts_storage_mock.get_user_id_given_phone_number.return_value = user_id_to_swap

        phone_number_dto_to_swap = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.old_phone_number,
            country_code=update_phone_number_log_dto.old_country_code)
        user_profile_dto = UserProfileDTO(
            phone_number=phone_number_dto.phone_number,
            country_code=phone_number_dto.country_code)
        user_profile_dto_to_swap = UserProfileDTO(
            phone_number=phone_number_dto_to_swap.phone_number,
            country_code=phone_number_dto_to_swap.country_code)

        get_validate_otp_send_to_phone_number_mock(mocker)

        # Act
        interactor.verify_update_phone_number_otp(
            user_id=user_id, otp=otp)

        # Assert
        user_accounts_storage_mock.update_user_update_phone_number_verification_status.assert_called_once_with(
            user_account_update_phone_details_log_id=update_phone_number_log_dto.id,
            verification_status=otp_verification_constants.VerificationStatus.VERIFIED.value,
            failure_remarks=None, verified_datetime=datetime.datetime(2022, 5, 28))
        user_accounts_storage_mock.link_phone_number_to_user.call_count = 2
        user_accounts_storage_mock.get_user_id_given_phone_number.assert_called_once_with(
            phone_number_dto=phone_number_dto)
        user_accounts_storage_mock.get_users_accounts_details_to_update.assert_called_once_with(
            user_ids=[user_id, user_id_to_swap])
        user_profile_storage_mock.update_user_profile.assert_has_calls(
            calls=[
                mock.call(user_id=user_id_to_swap, update_profile_data=user_profile_dto_to_swap),
                mock.call(user_id=user_id, update_profile_data=user_profile_dto)])

        user_accounts_storage_mock.link_phone_number_to_user.assert_has_calls(
            calls=[
                mock.call(user_id=user_id,
                          phone_number_dto=interactor_common_dtos.PhoneNumberDTO(
                              phone_number=None, country_code=None)),
                mock.call(user_id=user_id_to_swap, phone_number_dto=phone_number_dto_to_swap),
                mock.call(user_id=user_id, phone_number_dto=phone_number_dto),
            ])

    @override_settings(SWAP_PHONE_NUMBERS_WHILE_UPDATING=True)
    @freeze_time("2022-05-28")
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus.VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value])
    def test_update_user_phone_number_to_swap_numbers_when_user_does_not_exists(
            self, verification_status, common_setup, mocker):
        # Arrange
        user_accounts_storage_mock, user_profile_storage_mock, \
        interactor = common_setup
        user_id = str(uuid.uuid4())
        otp = "123456"

        update_phone_number_log_dto = \
            storage_dtos_factories.UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                user_id=user_id, verification_status=verification_status)

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code)

        user_accounts_storage_mock.is_user_id_exists.return_value = True
        user_accounts_storage_mock \
            .get_user_latest_update_phone_number_log_details.return_value = \
            update_phone_number_log_dto
        user_accounts_storage_mock.get_user_id_given_phone_number.side_effect = \
            CustomException("", "")

        user_profile_dto = UserProfileDTO(
            phone_number=phone_number_dto.phone_number,
            country_code=phone_number_dto.country_code)

        get_validate_otp_send_to_phone_number_mock(mocker)

        # Act
        interactor.verify_update_phone_number_otp(
            user_id=user_id, otp=otp)

        # Assert
        user_accounts_storage_mock.update_user_update_phone_number_verification_status.assert_called_once_with(
            user_account_update_phone_details_log_id=update_phone_number_log_dto.id,
            verification_status=otp_verification_constants.VerificationStatus.VERIFIED.value,
            failure_remarks=None, verified_datetime=datetime.datetime(2022, 5, 28))
        user_accounts_storage_mock.link_phone_number_to_user.call_count = 1
        user_accounts_storage_mock.get_user_id_given_phone_number.assert_called_once_with(
            phone_number_dto=phone_number_dto)
        user_accounts_storage_mock.link_phone_number_to_user. \
            assert_called_once_with(user_id, phone_number_dto)
        user_profile_storage_mock.update_user_profile.assert_called_once_with(
            user_id=user_id, update_profile_data=user_profile_dto)

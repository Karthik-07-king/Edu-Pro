import pytest
import mock

from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, storage_dtos


class TestCreateOrUpdateUserEducationDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile.create_or_update_user_education_details_interactor \
            import CreateOrUpdateUserEducationDetailsInteractor
        return CreateOrUpdateUserEducationDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    @pytest.fixture()
    def user_education_details(self):
        from ib_users.tests.factories import interface_dtos

        return interface_dtos.UpdateUserEducationDetailsDTOFactory(
            user_id="UserId",
            ssc_details=interface_dtos.UpdateSSCDetailsDTOFactory(
                board_name_enum=enums.SSCBoardName.CBSE.value,
                institute_id="institute_id",
                other_institute_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                score_type=enums.ScoreType.CGPA.value,
                score=10, year_of_completion=2014),
            intermediate_details=interface_dtos.UpdateIntermediateDetailsDTOFactory(
                course_id="MBIPC", other_institute_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                score_type=enums.ScoreType.CGPA.value,
                score=10, year_of_completion=2016, institute_id="RGUKT",
                other_course_name=None),
            degree_details=[
                interface_dtos.UpdateDegreeDetailsDTOFactory(
                    id="ID1", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                    other_course_name=None,
                    completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                    department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                    score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                    institute_id="RGUKT", other_institute_name=None,
                    institute_city_id="VEMPALLI",
                    expected_date_to_clear_backlogs=None,
                    institute_pin_code="515671",
                    institute_district_id="institute_district_id",
                    institute_district_name="institute_district_name",
                    institute_state_id="institute_state_id",
                    institute_state_name="institute_state_name",
                    other_institute_city_name="other_institute_city_name",
                    other_department_name="other_department_name",
                    institute_country_name="institute_country_name",
                    institute_country_id="institute_country_id"
                ),
                interface_dtos.UpdateDegreeDetailsDTOFactory(
                    id="ID3", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                    other_course_name=None,
                    completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                    department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                    score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                    institute_id="RGUKT", other_institute_name=None,
                    institute_city_id="VEMPALLI",
                    expected_date_to_clear_backlogs=None,
                    institute_pin_code="515671",
                    institute_district_id="institute_district_id1",
                    institute_district_name="institute_district_name1",
                    institute_state_id="institute_state_id1",
                    institute_state_name="institute_state_name1",
                    other_institute_city_name="other_institute_city_name1",
                    other_department_name="other_department_name1",
                    institute_country_name="institute_country_name1",
                    institute_country_id="institute_country_id1"
                ),
                interface_dtos.UpdateDegreeDetailsDTOFactory(
                    id=None, course_id="BTECH", type=enums.DegreeType.BACHELORS.value,
                    other_course_name=None,
                    completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                    department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                    score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                    institute_id="RGUKT", other_institute_name=None,
                    institute_city_id="VEMPALLI",
                    expected_date_to_clear_backlogs=None,
                    institute_pin_code="515671",
                    institute_district_id="institute_district_id2",
                    institute_district_name="institute_district_name2",
                    institute_state_id="institute_state_id2",
                    institute_state_name="institute_state_name2",
                    other_institute_city_name="other_institute_city_name2",
                    other_department_name="other_department_name2",
                    institute_country_name="institute_country_name2",
                    institute_country_id="institute_country_id2"
                )
            ]
        )

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_education_details.user_id)

    def test_given_invalid_completion_status_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        completion_status = "STATUS"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.ssc_details.completion_status = completion_status

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_completion_status_details = err.value.invalid_education_details.\
            ssc_details.completion_status

        assert invalid_completion_status_details.value == completion_status
        assert invalid_completion_status_details.error_code == \
               exception_messages.INVALID_COURSE_COMPLETION_STATUS[1]
        assert invalid_completion_status_details.error_message == \
               exception_messages.INVALID_COURSE_COMPLETION_STATUS[0]

    def test_given_invalid_board_name_enum_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        invalid_board_name = "STATUS"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.ssc_details.board_name_enum = invalid_board_name

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_board_name_details = err.value.invalid_education_details. \
            ssc_details.board_name_enum

        assert invalid_board_name_details.value == invalid_board_name
        assert invalid_board_name_details.error_code == \
               exception_messages.INVALID_SSC_BOARD_NAME_ENUM[1]
        assert invalid_board_name_details.error_message == \
               exception_messages.INVALID_SSC_BOARD_NAME_ENUM[0]

    def test_given_invalid_score_type_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        score_type = "SCORE"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.ssc_details.score_type = score_type

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_score_type_details = err.value.invalid_education_details. \
            ssc_details.score_type

        assert invalid_score_type_details.value == score_type
        assert invalid_score_type_details.error_code == \
               exception_messages.INVALID_SCORE_TYPE[1]
        assert invalid_score_type_details.error_message == \
               exception_messages.INVALID_SCORE_TYPE[0]

    def test_given_invalid_degree_type_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        degree_type = "degree_type"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.degree_details[0].type = degree_type

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_degree_type_details = err.value.invalid_education_details. \
            degree_details[0].type

        assert invalid_degree_type_details.value == degree_type
        assert invalid_degree_type_details.error_code == \
               exception_messages.INVALID_DEGREE_TYPE[1]
        assert invalid_degree_type_details.error_message == \
               exception_messages.INVALID_DEGREE_TYPE[0]

    def test_given_invalid_score(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.ssc_details.score = -1
        user_education_details.ssc_details.score_type = enums.ScoreType.CGPA.value

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_score_details = err.value.invalid_education_details. \
            ssc_details.score

        assert invalid_score_details.value == -1
        assert invalid_score_details.error_code == \
               exception_messages.INVALID_SCORE[1]
        assert invalid_score_details.error_message == \
               exception_messages.INVALID_SCORE[0]

    def test_given_invalid_score_for_score_type_cgpa_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.ssc_details.score = 11
        user_education_details.ssc_details.score_type = enums.ScoreType.CGPA.value

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_score_details = err.value.invalid_education_details. \
            ssc_details.score

        assert invalid_score_details.value == 11
        assert invalid_score_details.error_code == \
               exception_messages.INVALID_SCORE_FOR_CGPA_SCORE_TYPE[1]
        assert invalid_score_details.error_message == \
               exception_messages.INVALID_SCORE_FOR_CGPA_SCORE_TYPE[0]

    def test_given_invalid_score_for_score_type_percentage_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.ssc_details.score = 110
        user_education_details.ssc_details.score_type = enums.ScoreType.PERCENTAGE.value

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_score_details = err.value.invalid_education_details. \
            ssc_details.score

        assert invalid_score_details.value == 110
        assert invalid_score_details.error_code == \
               exception_messages.INVALID_SCORE_FOR_PERCENTAGE_SCORE_TYPE[1]
        assert invalid_score_details.error_message == \
               exception_messages.INVALID_SCORE_FOR_PERCENTAGE_SCORE_TYPE[0]

    def test_given_invalid_start_year_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.degree_details[0].start_year = -10

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_start_year_details = err.value.invalid_education_details. \
            degree_details[0].start_year

        assert invalid_start_year_details.value == -10
        assert invalid_start_year_details.error_code == \
               exception_messages.INVALID_START_YEAR[1]
        assert invalid_start_year_details.error_message == \
               exception_messages.INVALID_START_YEAR[0]

    def test_given_invalid_end_year_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.degree_details[0].end_year = -10

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_end_year_details = err.value.invalid_education_details. \
            degree_details[0].end_year

        assert invalid_end_year_details.value == -10
        assert invalid_end_year_details.error_code == \
               exception_messages.INVALID_END_YEAR[1]
        assert invalid_end_year_details.error_message == \
               exception_messages.INVALID_END_YEAR[0]

    def test_given_invalid_end_year_less_than_start_year_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.degree_details[0].start_year = 2039

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_date_range_details = err.value.invalid_education_details. \
            degree_details[0].end_year

        assert invalid_date_range_details.value == user_education_details.degree_details[0].end_year
        assert invalid_date_range_details.error_code == \
               exception_messages.END_YEAR_SHOULD_BE_GREATER_THAN_START_YEAR[1]
        assert invalid_date_range_details.error_message == \
               exception_messages.END_YEAR_SHOULD_BE_GREATER_THAN_START_YEAR[0]

    def test_given_no_of_backlogs_less_than_zero_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.degree_details[0].no_of_backlogs = -1

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        invalid_no_of_backlogs_details = err.value.invalid_education_details. \
            degree_details[0].no_of_backlogs

        assert invalid_no_of_backlogs_details.value == -1
        assert invalid_no_of_backlogs_details.error_code == \
               exception_messages.INVALID_NO_OF_BACKLOGS[1]
        assert invalid_no_of_backlogs_details.error_message == \
               exception_messages.INVALID_NO_OF_BACKLOGS[0]

    def test_given_year_of_completion_less_than_zero_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidEducationDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_education_details.ssc_details.year_of_completion = -1

        # Act
        with pytest.raises(InvalidEducationDetailsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)
        # Assert
        invalid_year_of_completion_details = err.value.invalid_education_details. \
            ssc_details.year_of_completion

        assert invalid_year_of_completion_details.value == -1
        assert invalid_year_of_completion_details.error_code == \
               exception_messages.INVALID_YEAR_OF_COMPLETION[1]
        assert invalid_year_of_completion_details.error_message == \
               exception_messages.INVALID_YEAR_OF_COMPLETION[0]

    def test_given_invalid_degree_details_ids_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserDegreeDetailsIdsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_degree_details.return_value = [
            storage_dtos.UserDegreeDetailsDTOFactory(
                id="ID1", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=202, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671"
            )
        ]

        # Act
        with pytest.raises(InvalidUserDegreeDetailsIdsException) as err:
            interactor.create_or_update_user_education_details(
                user_education_details=user_education_details)

        # Assert
        assert err.value.degree_details_ids == ["ID3"]

    def test_given_valid_details_then_update_user_education_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        # Arrange
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_degree_details.return_value = [
            storage_dtos.UserDegreeDetailsDTOFactory(
                id="ID1", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=202, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671"
            ),
            storage_dtos.UserDegreeDetailsDTOFactory(
                id="ID2", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=202, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671"
            ),
            storage_dtos.UserDegreeDetailsDTOFactory(
                id="ID3", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=202, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671"
            )
        ]
        update_degree_details = user_education_details.degree_details
        # Act
        interactor.create_or_update_user_education_details(
            user_education_details=user_education_details)

        # Assert
        user_profile_storage_mock.create_or_update_user_ssc_details.\
            assert_called_once_with(
                user_id=user_education_details.user_id,
                ssc_details=user_education_details.ssc_details)
        user_profile_storage_mock.create_or_update_user_intermediate_details.\
            assert_called_once_with(
                user_id=user_education_details.user_id,
                intermediate_details=user_education_details.intermediate_details)
        user_profile_storage_mock.create_user_degree_details.assert_called_once_with(
            user_id=user_education_details.user_id, degree_details=[update_degree_details[2]])
        user_profile_storage_mock.update_user_degree_details.assert_called_once_with(
            degree_details=[update_degree_details[0], update_degree_details[1]])
        user_profile_storage_mock.delete_user_degree_details.assert_called_once_with(
            degree_details_ids=["ID2"])

    def test_case_1(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_education_details):
        """
        User have both MASTERS and BACHELORS, and in input given only MASTERS
        details then do not delete BACHELORS details
        """
        # Arrange
        user_education_details.degree_details = None
        user_education_details.degree_details = [
            interface_dtos.UpdateDegreeDetailsDTOFactory(
                id="ID1", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671",
                institute_country_name="institute_country_name",
                institute_country_id="institute_country_id"
            ),
            interface_dtos.UpdateDegreeDetailsDTOFactory(
                id="ID2", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671",
                institute_country_name="institute_country_name1",
                institute_country_id="institute_country_id1"
            )
        ]
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_degree_details.return_value = [
            storage_dtos.UserDegreeDetailsDTOFactory(
                id="ID1", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671",
                institute_country_name=None,
                institute_country_id=None
            ),
            storage_dtos.UserDegreeDetailsDTOFactory(
                id="ID2", course_id="BTECH", type=enums.DegreeType.MASTERS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=2022, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671",
                institute_country_name=None,
                institute_country_id=None
            ),
            storage_dtos.UserDegreeDetailsDTOFactory(
                id="ID3", course_id="BTECH", type=enums.DegreeType.BACHELORS.value,
                other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="CSE", score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2016, end_year=202, no_of_backlogs=0,
                institute_id="RGUKT", other_institute_name=None,
                institute_city_id="VEMPALLI",
                expected_date_to_clear_backlogs=None,
                institute_pin_code="515671",
                institute_country_name=None,
                institute_country_id=None
            )
        ]
        update_degree_details = user_education_details.degree_details
        # Act
        interactor.create_or_update_user_education_details(
            user_education_details=user_education_details)

        # Assert
        user_profile_storage_mock.create_or_update_user_ssc_details.\
            assert_called_once_with(
                user_id=user_education_details.user_id,
                ssc_details=user_education_details.ssc_details)
        user_profile_storage_mock.create_or_update_user_intermediate_details.\
            assert_called_once_with(
                user_id=user_education_details.user_id,
                intermediate_details=user_education_details.intermediate_details)
        user_profile_storage_mock.create_user_degree_details.assert_not_called()
        user_profile_storage_mock.update_user_degree_details.assert_called_once_with(
            degree_details=update_degree_details)
        user_profile_storage_mock.delete_user_degree_details.assert_not_called()

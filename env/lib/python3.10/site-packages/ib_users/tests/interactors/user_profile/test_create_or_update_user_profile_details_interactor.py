import datetime
import pytest
import mock

from ib_users.constants.user_profile.constants import NOT_GIVEN_DTO_VALUE
from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, storage_dtos


class TestCreateOrUpdateUserProfileDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile.\
            create_or_update_user_profile_details_interactor import \
            CreateOrUpdateUserProfileDetailsInteractor
        return CreateOrUpdateUserProfileDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    @pytest.fixture()
    def user_profile_details(self):
        return interface_dtos.UpdateUserProfileDetailsDTOFactory(
            user_id="user_id1",
            profile_details=interface_dtos.UpdateProfileDetailsDTOFactory(
                email="lakshmi@gmail.com", gender=enums.Gender.FEMALE.value,
                preferred_languages=[enums.Language.TELUGU.value],
                date_of_birth=str(datetime.date.today())
            ),
            contact_details=interface_dtos.ContactDetailsDTOFactory(
                whatsapp_mobile_number="9988776655",
                whatsapp_mobile_country_code="91",
                have_whatsapp=False),
            social_profile_details=[
                interface_dtos.SocialProfileDetailsDTOFactory(
                    id="Id1", social_provider=enums.SocialProvider.TWITTER.value,
                    profile_link="https://twitter.com/IamDurga/?t=VNFJGJFDgfjdgnfjgdfHgfmhk&s=07"
                ),
                interface_dtos.SocialProfileDetailsDTOFactory(
                    id=None, social_provider=enums.SocialProvider.LINKEDIN.value,
                    profile_link="https://www.linkedin.com/in/durgarao-uppalapati/"
                )
            ]
        )

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_profile_details.user_id)

    def test_given_invalid_gender_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_details.profile_details.gender = "Invalid"

        # Act
        with pytest.raises(InvalidUserProfileDetailsException):
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

    def test_given_invalid_preferred_language_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.constants.user_profile.exception_messages import \
            INVALID_PREFERRED_LANGUAGES
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException
        from ib_users.interactors.exceptions.user_credentials_exceptions import \
            AccountWithEmailDoesntExistException
        user_account_storage_mock.get_existing_user_id_given_email.side_effect = \
            AccountWithEmailDoesntExistException()
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_details.profile_details.preferred_languages = ["Invalid"]
        invalid_profile_exception = interface_dtos.InvalidProfileDetailsDTOFactory(
            preferred_languages=interface_dtos.InvalidValueDetailsDTOFactory(
                value=["Invalid"],
                error_code=INVALID_PREFERRED_LANGUAGES[1],
                error_message=INVALID_PREFERRED_LANGUAGES[0]))

        expected_exception = interface_dtos.InvalidUpdateUserProfileDetailsDTOFactory(
            profile_details=invalid_profile_exception)
        # Act
        with pytest.raises(InvalidUserProfileDetailsException) as err:
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

        # assert
        assert err.value.invalid_profile_details == expected_exception

    def test_given_invalid_date_of_birth_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_details.profile_details.date_of_birth = "Invalid"

        # Act
        with pytest.raises(InvalidUserProfileDetailsException):
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

    def test_given_invalid_email_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_details.profile_details.email = "Invalid"

        # Act
        with pytest.raises(InvalidUserProfileDetailsException):
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

    def test_given_email_already_linked_to_other_account_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            "existing_user_id"
        # Act
        with pytest.raises(InvalidUserProfileDetailsException):
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

        # Assert
        user_account_storage_mock.get_existing_user_id_given_email.assert_called_once_with(
            email=user_profile_details.profile_details.email)

    def test_given_invalid_phone_number_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_profile_details.contact_details.whatsapp_mobile_number = "Invalid"

        # Act
        with pytest.raises(InvalidUserProfileDetailsException):
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

    def test_given_invalid_country_code_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_profile_details.contact_details.whatsapp_mobile_country_code = "Invalid"

        # Act
        with pytest.raises(InvalidUserProfileDetailsException):
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

    def test_given_invalid_social_provider_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException
        from ib_users.constants.user_profile.exception_messages import \
            INVALID_SOCIAL_PROVIDERS

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_profile_details.social_profile_details[0].social_provider = "Invalid"

        social_profile_details = interface_dtos.InvalidSocialProfileDetailsDTOFactory(
            social_provider=interface_dtos.InvalidValueDetailsDTOFactory(
                value="Invalid",
                error_code=INVALID_SOCIAL_PROVIDERS[1],
                error_message=INVALID_SOCIAL_PROVIDERS[0]))

        expected_exception = interface_dtos.InvalidUpdateUserProfileDetailsDTOFactory(
            social_profile_details=[social_profile_details])

        # Act
        with pytest.raises(InvalidUserProfileDetailsException) as err:
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

        # Assert
        assert err.value.invalid_profile_details == expected_exception

    def test_given_invalid_linkedin_profile_link_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException
        from ib_users.constants.user_profile.exception_messages import \
            INVALID_LINKED_PROFILE_LINK

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_profile_details.social_profile_details[0].social_provider = enums.SocialProvider.LINKEDIN.value
        user_profile_details.social_profile_details[0].profile_link = "profile_link1"

        social_profile_details = interface_dtos.InvalidSocialProfileDetailsDTOFactory(
            profile_link=interface_dtos.InvalidValueDetailsDTOFactory(
                value="profile_link1",
                error_code=INVALID_LINKED_PROFILE_LINK[1],
                error_message=INVALID_LINKED_PROFILE_LINK[0]))

        expected_exception = interface_dtos.InvalidUpdateUserProfileDetailsDTOFactory(
            social_profile_details=[social_profile_details])

        # Act
        with pytest.raises(InvalidUserProfileDetailsException) as err:
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

        # Assert
        assert err.value.invalid_profile_details == expected_exception

    def test_given_invalid_twitter_profile_link_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfileDetailsException
        from ib_users.constants.user_profile.exception_messages import \
            INVALID_TWITTER_PROFILE_LINK

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_profile_details.social_profile_details[0].social_provider = enums.SocialProvider.TWITTER.value
        user_profile_details.social_profile_details[0].profile_link = "profile_link1"

        social_profile_details = interface_dtos.InvalidSocialProfileDetailsDTOFactory(
            profile_link=interface_dtos.InvalidValueDetailsDTOFactory(
                value="profile_link1",
                error_code=INVALID_TWITTER_PROFILE_LINK[1],
                error_message=INVALID_TWITTER_PROFILE_LINK[0]))

        expected_exception = interface_dtos.InvalidUpdateUserProfileDetailsDTOFactory(
            social_profile_details=[social_profile_details])

        # Act
        with pytest.raises(InvalidUserProfileDetailsException) as err:
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

        # Assert
        assert err.value.invalid_profile_details == expected_exception

    def test_given_social_profile_ids_to_update_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountDTO
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserSocialProfileIdsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_account_storage_mock.get_user_account_details.return_value = \
            UserAccountDTO(email="email", user_id="user_id")
        user_profile_storage_mock.get_user_social_profile_details.return_value = []

        # Act
        with pytest.raises(InvalidUserSocialProfileIdsException) as err:
            interactor.create_or_update_user_profile_details(
                user_profile_details=user_profile_details)

        # Assert
        assert err.value.social_profile_ids == ["Id1"]

    def test_given_valid_details_then_update_user_profile_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountDTO

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_account_storage_mock.get_user_account_details.return_value = \
            UserAccountDTO(email="email", user_id="user_id")

        user_profile_storage_mock.get_user_social_profile_details.\
            return_value = [
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id1", social_provider="social_provider1",
                    profile_link="profile_link1"),
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id2", social_provider="social_provider1",
                    profile_link="profile_link1")
            ]
        social_profile_details = user_profile_details.social_profile_details

        # Act
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)

        user_profile_details.contact_details.have_whatsapp = True
        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_profile_details.user_id)
        user_profile_storage_mock.create_or_update_user_profile_details. \
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                profile_details=user_profile_details.profile_details)
        user_profile_storage_mock.create_or_update_user_contact_details. \
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                contact_details=user_profile_details.contact_details)
        user_profile_storage_mock.get_user_social_profile_details. \
            assert_called_once_with(user_id=user_profile_details.user_id)
        user_profile_storage_mock.create_user_social_profile_details. \
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                social_profile_details=[social_profile_details[1]])
        user_profile_storage_mock.update_social_profile_details. \
            assert_called_once_with(
                social_profile_details=[social_profile_details[0]])
        user_profile_storage_mock.delete_user_social_profile_details. \
            assert_called_once_with(
                social_profile_details_ids=["Id2"])
        user_profile_storage_mock.update_user_preferred_languages.\
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                preferred_languages=user_profile_details.profile_details.preferred_languages)
        user_profile_storage_mock.update_is_email_verified.assert_called_once_with(
            user_id=user_profile_details.user_id, is_email_verified=False)
        user_account_storage_mock.update_email.assert_called_once_with(
            user_id=user_profile_details.user_id, email=None)

    def test_with_user_have_social_profiles_and_given_empty_details_then_removes_user_social_profiles(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountDTO

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_account_storage_mock.get_user_account_details.return_value = \
            UserAccountDTO(email="email", user_id="user_id")

        user_profile_storage_mock.get_user_social_profile_details.\
            return_value = [
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id1", social_provider="social_provider1",
                    profile_link="profile_link1"),
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id2", social_provider="social_provider1",
                    profile_link="profile_link1")
            ]
        user_profile_details.social_profile_details = []

        # Act
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)

        # Assert
        user_profile_storage_mock.delete_user_social_profile_details. \
            assert_called_once_with(social_profile_details_ids=["Id1", "Id2"])

    def test_given_valid_details_to_create_user_profile_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            UserProfileDetailsDoesNotExistException
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountDTO

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_account_storage_mock.get_user_account_details.return_value = \
            UserAccountDTO(email="email", user_id="user_id")

        user_profile_storage_mock.get_user_social_profile_details.\
            return_value = [
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id1", social_provider="social_provider1",
                    profile_link="profile_link1"),
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id2", social_provider="social_provider1",
                    profile_link="profile_link1")
            ]

        user_profile_storage_mock.get_user_profile_details.side_effect = UserProfileDetailsDoesNotExistException
        user_profile_details.profile_details.gender = NOT_GIVEN_DTO_VALUE
        user_profile_details.profile_details.date_of_birth = NOT_GIVEN_DTO_VALUE
        user_profile_details.social_profile_details = NOT_GIVEN_DTO_VALUE
        user_profile_details.contact_details = NOT_GIVEN_DTO_VALUE

        # Act
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)
        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_profile_details.user_id)
        user_profile_details.profile_details.gender = None
        user_profile_details.profile_details.date_of_birth = None
        user_profile_storage_mock.create_or_update_user_profile_details. \
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                profile_details=user_profile_details.profile_details)
        user_profile_storage_mock.update_user_preferred_languages.\
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                preferred_languages=user_profile_details.profile_details.preferred_languages)
        user_profile_storage_mock.update_is_email_verified.assert_called_once_with(
            user_id=user_profile_details.user_id, is_email_verified=False)
        user_account_storage_mock.update_email.assert_called_once_with(
            user_id=user_profile_details.user_id, email=None)

    def test_given_valid_details_to_update_user_profile_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_profile_details):
        # Arrange
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountDTO

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_account_storage_mock.get_existing_user_id_given_email.return_value = \
            user_profile_details.user_id
        user_account_storage_mock.get_user_account_details.return_value = \
            UserAccountDTO(email="email", user_id="user_id")

        user_profile_storage_mock.get_user_social_profile_details.\
            return_value = [
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id1", social_provider="social_provider1",
                    profile_link="profile_link1"),
                storage_dtos.SocialProfileDetailsDTOFactory(
                    id="Id2", social_provider="social_provider1",
                    profile_link="profile_link1")
            ]
        existing_user_profile_details = storage_dtos.ProfileDetailsDTOFactory()
        social_profile_details = user_profile_details.social_profile_details
        user_profile_storage_mock.get_user_profile_details.return_value = existing_user_profile_details
        user_profile_details.profile_details.gender = NOT_GIVEN_DTO_VALUE
        user_profile_details.profile_details.date_of_birth = NOT_GIVEN_DTO_VALUE

        # Act
        interactor.create_or_update_user_profile_details(
            user_profile_details=user_profile_details)

        user_profile_details.contact_details.have_whatsapp = True
        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_profile_details.user_id)
        user_profile_details.profile_details.gender = \
            existing_user_profile_details.gender
        user_profile_details.profile_details.date_of_birth = \
            existing_user_profile_details.date_of_birth
        user_profile_storage_mock.create_or_update_user_profile_details. \
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                profile_details=user_profile_details.profile_details)
        user_profile_storage_mock.create_or_update_user_contact_details. \
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                contact_details=user_profile_details.contact_details)
        user_profile_storage_mock.get_user_social_profile_details. \
            assert_called_once_with(user_id=user_profile_details.user_id)
        user_profile_storage_mock.create_user_social_profile_details. \
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                social_profile_details=[social_profile_details[1]])
        user_profile_storage_mock.update_social_profile_details. \
            assert_called_once_with(
                social_profile_details=[social_profile_details[0]])
        user_profile_storage_mock.delete_user_social_profile_details. \
            assert_called_once_with(
                social_profile_details_ids=["Id2"])
        user_profile_storage_mock.update_user_preferred_languages.\
            assert_called_once_with(
                user_id=user_profile_details.user_id,
                preferred_languages=user_profile_details.profile_details.preferred_languages)
        user_profile_storage_mock.update_is_email_verified.assert_called_once_with(
            user_id=user_profile_details.user_id, is_email_verified=False)
        user_account_storage_mock.update_email.assert_called_once_with(
            user_id=user_profile_details.user_id, email=None)
import pytest
import mock

from ib_users.tests.factories import interface_dtos, storage_dtos


class TestGetUserAddressDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile.\
            get_user_address_details_interactor import \
            GetUserAddressDetailsInteractor
        return GetUserAddressDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_id = "user_id"
        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.get_user_address_details(user_id=user_id)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)

    def test_given_valid_user_id_return_user_address_details(
            self, user_profile_storage_mock, user_account_storage_mock, interactor):
        # Arrange
        user_id = "user_id"
        user_address_details = [storage_dtos.AddressDetailsDTOFactory()]

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_address_details. \
            return_value = user_address_details

        expected_response = address_details = [
            interface_dtos.AddressDetailsDTOFactory(
                address_type=each.address_type, address_1=each.address_1,
                address_2=each.address_2, pin_code=each.pin_code,
                other_city_name=each.other_city_name,
                city_details=interface_dtos.CityDetailsDTOFactory(
                    city_id=each.city_id, city_name=each.city_name),
                district_details=interface_dtos.DistrictDetailsDTOFactory(
                    district_id=each.district_id, district_name=each.district_name),
                state_details=interface_dtos.StateDetailsDTOFactory(
                    state_id=each.state_id, state_name=each.state_name),
                country_details=interface_dtos.CountryDetailsDTOFactory(
                    country_id=each.country_id, country_name=each.country_name)
            )
            for each in user_address_details
        ]

        # Act
        actual_response = interactor.get_user_address_details(user_id=user_id)

        # Assert
        user_profile_storage_mock.get_user_address_details.assert_called_once_with(
            user_id=user_id)
        assert actual_response == expected_response


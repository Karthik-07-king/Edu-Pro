import pytest
import mock

from ib_users.constants.user_profile import enums
from ib_users.tests.factories import interface_dtos, storage_dtos


class TestGetUserProfessionalDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile. \
            get_user_professional_details_interactor import \
            GetUserProfessionalDetailsInteractor
        return GetUserProfessionalDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_id = "user_id"
        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.get_user_professional_details(user_id=user_id)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)

    def test_given_valid_user_return_user_professional_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        user_id = "user_id"

        user_current_professional_details = storage_dtos.CurrentProfessionalDetailsDTOFactory()
        user_profession_skills = [
            storage_dtos.UserProfessionalSkillsDTOFactory(
                skill_id="skill_id", skill_name="skill_name", id="Id1", other_skill_name=None),
            storage_dtos.UserProfessionalSkillsDTOFactory(
                id="Id2", skill_id=None, skill_name=None, other_skill_name="other_skill_name")
        ]
        user_company_details_dtos = [storage_dtos.CompanyDetailsDTOFactory(
            other_company_city_name="other_company_city_name")]
        user_work_experience_details = storage_dtos.WorkExperienceDetailsDTOFactory()

        user_profile_storage_mock.get_user_professional_skills_details. \
            return_value = user_profession_skills
        user_profile_storage_mock.get_user_current_professional_details. \
            return_value = user_current_professional_details
        user_profile_storage_mock.get_user_company_details.return_value = \
            user_company_details_dtos
        user_profile_storage_mock.get_user_work_experience_details. \
            return_value = user_work_experience_details

        expected_response = interface_dtos.UserProfessionalDetailsDTOFactory(
            user_id=user_id,
            work_experience_details=interface_dtos.WorkExperienceDetailsDTOFactory(
                no_of_years_experience_in_it_sector=user_work_experience_details.no_of_years_experience_in_it_sector,
                no_of_years_experience_in_non_it_sector=user_work_experience_details.no_of_years_experience_in_non_it_sector),
            company_details=[
                interface_dtos.CompanyDetailsDTOFactory(
                    id=user_company_details.id,
                    company_details=interface_dtos.CompanyIdAndNameDTOFactory(
                        company_id=user_company_details.company_id,
                        company_name=user_company_details.company_name),
                    other_company_name=user_company_details.other_company_name,
                    company_city_details=interface_dtos.CityDetailsDTOFactory(
                        city_id=user_company_details.company_city_id,
                        city_name=user_company_details.company_city_name),
                    job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                        job_role_id=user_company_details.job_role_id,
                        job_role_name=user_company_details.job_role_name),
                    other_job_role_name=user_company_details.other_job_role_name,
                    is_currently_working_in_this_company=user_company_details.
                        is_currently_working_in_this_company,
                    start_date=user_company_details.start_date,
                    end_date=user_company_details.end_date,
                    ctc=user_company_details.ctc,
                    no_of_months_for_notice_period=user_company_details. \
                        no_of_months_for_notice_period,
                    other_company_city_name=user_company_details.other_company_city_name)
                for user_company_details in user_company_details_dtos
            ],
            current_professional_details=interface_dtos.CurrentProfessionalDetailsDTOFactory(
                job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                    job_role_id=user_current_professional_details.job_role_id,
                    job_role_name=user_current_professional_details.job_role_name),
                higher_education_course_type=enums.CourseType.BACHELORS.value,
                skill_details=[
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id="skill_id", skill_name="skill_name", id="Id1",
                        other_skill_name=None),
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id=None, skill_name=None, id="Id2",
                        other_skill_name="other_skill_name")
                ],
                other_job_role_name=user_current_professional_details.other_job_role_name,
                have_work_experience=user_current_professional_details.have_work_experience
            )
        )

        # Act
        actual_response = interactor.get_user_professional_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response
        user_profile_storage_mock.get_user_professional_skills_details. \
            assert_called_once_with(user_id=user_id)
        user_profile_storage_mock.get_user_current_professional_details. \
            assert_called_once_with(user_id=user_id)
        user_profile_storage_mock.get_user_company_details.assert_called_once_with(
            user_id=user_id)
        user_profile_storage_mock.get_user_work_experience_details. \
            assert_called_once_with(user_id=user_id)

    def test_without_having_current_professional_details_return_user_professional_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        user_id = "user_id"

        user_profession_skills = [
            storage_dtos.UserProfessionalSkillsDTOFactory(
                skill_id="skill_id", skill_name="skill_name", id="Id1", other_skill_name=None),
            storage_dtos.UserProfessionalSkillsDTOFactory(
                id="Id2", skill_id=None, skill_name=None, other_skill_name="other_skill_name")
        ]
        user_company_details_dtos = [storage_dtos.CompanyDetailsDTOFactory(
            other_company_city_name="other_company_city_name")]
        user_work_experience_details = storage_dtos.WorkExperienceDetailsDTOFactory()

        user_profile_storage_mock.get_user_professional_skills_details. \
            return_value = user_profession_skills
        user_profile_storage_mock.get_user_current_professional_details. \
            return_value = None
        user_profile_storage_mock.get_user_company_details.return_value = \
            user_company_details_dtos
        user_profile_storage_mock.get_user_work_experience_details. \
            return_value = user_work_experience_details

        expected_response = interface_dtos.UserProfessionalDetailsDTOFactory(
            user_id=user_id,
            work_experience_details=interface_dtos.WorkExperienceDetailsDTOFactory(
                no_of_years_experience_in_it_sector=user_work_experience_details.no_of_years_experience_in_it_sector,
                no_of_years_experience_in_non_it_sector=user_work_experience_details.no_of_years_experience_in_non_it_sector),
            company_details=[
                interface_dtos.CompanyDetailsDTOFactory(
                    id=user_company_details.id,
                    company_details=interface_dtos.CompanyIdAndNameDTOFactory(
                        company_id=user_company_details.company_id,
                        company_name=user_company_details.company_name),
                    other_company_name=user_company_details.other_company_name,
                    company_city_details=interface_dtos.CityDetailsDTOFactory(
                        city_id=user_company_details.company_city_id,
                        city_name=user_company_details.company_city_name),
                    job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                        job_role_id=user_company_details.job_role_id,
                        job_role_name=user_company_details.job_role_name),
                    other_job_role_name=user_company_details.other_job_role_name,
                    is_currently_working_in_this_company=user_company_details.
                        is_currently_working_in_this_company,
                    start_date=user_company_details.start_date,
                    end_date=user_company_details.end_date,
                    ctc=user_company_details.ctc,
                    no_of_months_for_notice_period=user_company_details. \
                        no_of_months_for_notice_period,
                    other_company_city_name=user_company_details.other_company_city_name)
                for user_company_details in user_company_details_dtos
            ],
            current_professional_details=interface_dtos.CurrentProfessionalDetailsDTOFactory(
                job_role_details=None,
                higher_education_course_type=None,
                skill_details=[
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id="skill_id", skill_name="skill_name", id="Id1",
                        other_skill_name=None),
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id=None, skill_name=None, id="Id2",
                        other_skill_name="other_skill_name")
                ],
                other_job_role_name=None,
                have_work_experience=None
            )
        )

        # Act
        actual_response = interactor.get_user_professional_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response

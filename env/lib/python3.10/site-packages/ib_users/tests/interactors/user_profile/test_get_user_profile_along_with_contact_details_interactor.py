import pytest
from unittest import mock

from ib_users.tests.factories import interface_dtos
from ib_users.interactors.user_profile_interactor import GetUserProfileDTO
from ib_users.tests.factories.interactor_dtos import UserIdWiseCanUpdatePhoneNumberDetailsDTOFactory


class TestGetUserProfilesWithContactDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile. \
            get_user_profiles_with_contact_details_interactor import \
            GetUserProfilesWithContactDetailsInteractor
        return GetUserProfilesWithContactDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserIdsException

        user_ids = ["user_id"]
        user_profile_storage_mock.get_user_profiles.return_value = []

        # Act
        with pytest.raises(InvalidUserIdsException):
            interactor.get_user_profiles_with_contact_details(user_ids=user_ids)

        # Assert
        user_profile_storage_mock.get_user_profiles.assert_called_once_with(
            user_ids=user_ids)

    @pytest.fixture
    def get_is_users_can_update_phone_number_details_mock(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            get_is_users_can_update_phone_number_details_mock
        return get_is_users_can_update_phone_number_details_mock(mocker)

    def test_given_valid_user_id_return_user_profile_without_contact_details(
            self, user_profile_storage_mock, user_account_storage_mock, interactor,
            get_is_users_can_update_phone_number_details_mock):
        # Arrange
        user_ids = ["user_id"]
        users_profile_details = [
            GetUserProfileDTO(
                user_id=user_ids[0],
                name="Durga")
        ]
        preferred_languages = []

        user_profile_storage_mock.get_user_profiles.return_value = users_profile_details
        user_profile_storage_mock.get_users_preferred_languages.return_value = \
            preferred_languages
        user_profile_storage_mock.get_users_contact_details.return_value = []
        get_is_users_can_update_phone_number_details_mock.return_value = [
            UserIdWiseCanUpdatePhoneNumberDetailsDTOFactory(
                user_id=users_profile_details[0].user_id,
                can_update_phone_number=True,
                latest_phone_number_update_datetime=None,
                can_update_phone_number_after_datetime=None)
        ]

        user_profile_details = users_profile_details[0]
        expected_response = [interface_dtos.ProfileDetailsDTOFactory(
            user_id=user_profile_details.user_id,
            first_name=user_profile_details.name,
            last_name=user_profile_details.last_name,
            phone_number=user_profile_details.phone_number,
            country_code=user_profile_details.country_code,
            whatsapp_mobile_number=None,
            whatsapp_mobile_country_code=None,
            email=user_profile_details.email,
            date_of_birth=user_profile_details.dob,
            gender=user_profile_details.gender,
            preferred_languages=preferred_languages,
            profile_pic_url=user_profile_details.profile_pic_url,
            cover_page_url=user_profile_details.cover_page_url,
            i_want_to_receive_updates_in_whatsapp=None,
            have_whatsapp=None,
            is_phone_number_verified=user_profile_details.is_phone_number_verified,
            is_email_verified=user_profile_details.is_email_verified
        )]

        # Act
        actual_response = interactor.get_user_profiles_with_contact_details(
            user_ids=user_ids)

        # Assert
        user_profile_storage_mock.get_user_profiles.assert_called_once_with(
            user_ids=user_ids)
        user_profile_storage_mock.get_users_preferred_languages.assert_called_once_with(
            user_ids=user_ids)
        user_profile_storage_mock.get_users_contact_details.assert_called_once_with(
            user_ids=user_ids)
        get_is_users_can_update_phone_number_details_mock.assert_called_once_with(
            user_ids=user_ids)
        assert actual_response == expected_response

import datetime
import pytest
import mock

from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos, storage_dtos


class TestCreateOrUpdateUserSocialProfileDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile.\
            create_or_update_user_social_profile_details_interactor import \
            CreateOrUpdateUserSocialProfileDetailsInteractor
        return CreateOrUpdateUserSocialProfileDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_id = "user_1"
        social_provider = "TWITTER"
        profile_link = "https://twitter.com/user_1"

        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.create_or_update_user_social_profile_details(
                user_id=user_id, social_provider=social_provider,
                profile_link=profile_link)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)

    def test_given_invalid_social_provider_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidSocialProviderException

        user_id = "user_1"
        social_provider = "Twitter"
        profile_link = "https://twitter.com/user_1"

        user_account_storage_mock.is_user_id_exists.return_value = True

        # Act
        with pytest.raises(InvalidSocialProviderException):
            interactor.create_or_update_user_social_profile_details(
                user_id=user_id, social_provider=social_provider,
                profile_link=profile_link)

    def test_given_invalid_profile_link_when_social_provider_is_twitter_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidSocialProfileLinkException

        user_id = "user_1"
        social_provider = "TWITTER"
        profile_link = "profile_link1"

        user_account_storage_mock.is_user_id_exists.return_value = True

        # Act
        with pytest.raises(InvalidSocialProfileLinkException):
            interactor.create_or_update_user_social_profile_details(
                user_id=user_id, social_provider=social_provider,
                profile_link=profile_link)

    def test_given_invalid_profile_link_when_social_provider_is_linkedin_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidSocialProfileLinkException

        user_id = "user_1"
        social_provider = "LINKEDIN"
        profile_link = "profile_link1"

        user_account_storage_mock.is_user_id_exists.return_value = True

        # Act
        with pytest.raises(InvalidSocialProfileLinkException):
            interactor.create_or_update_user_social_profile_details(
                user_id=user_id, social_provider=social_provider,
                profile_link=profile_link)

    def test_given_valid_details_create_or_update_social_profile_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        user_id = "user_1"
        social_provider = "LINKEDIN"
        profile_link = "https://www.linkedin.com/in/durgarao-uppalapati/"

        user_account_storage_mock.is_user_id_exists.return_value = True

        # Act
        interactor.create_or_update_user_social_profile_details(
            user_id=user_id, social_provider=social_provider,
            profile_link=profile_link)

        # Assert
        user_profile_storage_mock.create_or_update_user_social_profile_details.assert_called_once_with(
            user_id=user_id, social_provider=social_provider,
            profile_link=profile_link)

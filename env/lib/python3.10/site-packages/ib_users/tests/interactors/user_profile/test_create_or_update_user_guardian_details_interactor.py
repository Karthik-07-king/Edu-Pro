import pytest
import mock

from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos


class TestCreateOrUpdateUserGuardianDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile.\
            create_or_update_user_guardian_details_interactor import \
            CreateOrUpdateUserGuardianDetailsInteractor
        return CreateOrUpdateUserGuardianDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    @pytest.fixture()
    def user_guardian_details(self):
        return interface_dtos.UserGuardianDetailsDTOFactory(
            user_id="User_Id1",
            first_name="first_name",
            last_name="last_name",
            relation=enums.GuardianRelation.FATHER.value,
            other_relation="other_relation",
            job_role_id="job_role_id",
            job_role_name="job_role_name",
            other_job_role_name="other_job_role_name",
            email="john@gamil.com",
            country_code="91",
            phone_number="9988776655",
            have_whatsapp=False,
            whatsapp_mobile_country_code="91",
            whatsapp_mobile_number="9988776655")

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_guardian_details):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.create_or_update_user_guardian_details(
                user_guardian_details=user_guardian_details)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_guardian_details.user_id)

    def test_given_invalid_guardian_relation_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_guardian_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidGuardianDetailsException
        from ib_users.constants.user_profile import exception_messages

        invalid_relation = "Invalid"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_guardian_details.relation = invalid_relation

        # Act
        with pytest.raises(InvalidGuardianDetailsException) as err:
            interactor.create_or_update_user_guardian_details(
                user_guardian_details=user_guardian_details)

        # Assert
        invalid_relation_details = err.value.invalid_guardian_details.relation

        assert invalid_relation_details.value == invalid_relation
        assert invalid_relation_details.error_code == \
               exception_messages.INVALID_GUARDIAN_RELATION[1]
        assert invalid_relation_details.error_message == \
               exception_messages.INVALID_GUARDIAN_RELATION[0]

    def test_given_invalid_email_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_guardian_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidGuardianDetailsException
        from ib_users.constants.custom_exception_messages import INVALID_EMAIL

        invalid_email = "Invalid"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_guardian_details.email = invalid_email

        # Act
        with pytest.raises(InvalidGuardianDetailsException) as err:
            interactor.create_or_update_user_guardian_details(
                user_guardian_details=user_guardian_details)

        # Assert
        invalid_email_details = err.value.invalid_guardian_details.email
        assert invalid_email_details.value == invalid_email
        assert invalid_email_details.error_code == INVALID_EMAIL.code
        assert invalid_email_details.error_message == INVALID_EMAIL.message

    def test_given_invalid_phone_number_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_guardian_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidGuardianDetailsException
        from ib_users.constants.user_profile import exception_messages

        invalid_phone_number = "Invalid"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_guardian_details.phone_number = invalid_phone_number

        # Act
        with pytest.raises(InvalidGuardianDetailsException) as err:
            interactor.create_or_update_user_guardian_details(
                user_guardian_details=user_guardian_details)

        # Assert
        invalid_phone_number_details = err.value.invalid_guardian_details.phone_number
        assert invalid_phone_number_details.value == invalid_phone_number
        assert invalid_phone_number_details.error_code == \
               exception_messages.INVALID_PHONE_NUMBER[1]
        assert invalid_phone_number_details.error_message == \
               exception_messages.INVALID_PHONE_NUMBER[0]

    def test_given_invalid_whatsapp_phone_number_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_guardian_details):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidGuardianDetailsException
        from ib_users.constants.user_profile import exception_messages

        invalid_whatsapp_mobile_number = "Invalid"
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_guardian_details.whatsapp_mobile_number = invalid_whatsapp_mobile_number

        # Act
        with pytest.raises(InvalidGuardianDetailsException) as err:
            interactor.create_or_update_user_guardian_details(
                user_guardian_details=user_guardian_details)

        # Assert
        invalid_phone_number_details = err.value.invalid_guardian_details.whatsapp_mobile_number
        assert invalid_phone_number_details.value == invalid_whatsapp_mobile_number
        assert invalid_phone_number_details.error_code == \
               exception_messages.INVALID_WHATSAPP_MOBILE_NUMBER[1]
        assert invalid_phone_number_details.error_message == \
               exception_messages.INVALID_WHATSAPP_MOBILE_NUMBER[0]

    def test_given_valid_details_then_create_or_update_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            user_guardian_details):
        # Arrange
        user_account_storage_mock.is_user_id_exists.return_value = True

        # Act
        interactor.create_or_update_user_guardian_details(
            user_guardian_details=user_guardian_details)

        user_guardian_details.have_whatsapp = True

        # Assert
        user_profile_storage_mock.create_or_update_user_guardian_details.\
            assert_called_once_with(user_guardian_details=user_guardian_details)

import pytest
import mock

from ib_users.interfaces import enums
from ib_users.tests.factories import interface_dtos


class TestCreateOrUpdateUserAddressDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile.\
            create_or_update_user_address_details_interactor import \
            CreateOrUpdateUserAddressDetailsInteractor
        return CreateOrUpdateUserAddressDetailsInteractor(
            profile_storage=user_profile_storage_mock,
            account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_account_storage_mock.is_user_id_exists.return_value = False
        user_id = "UserId"
        address_details = [interface_dtos.UpdateAddressDetailsDTOFactory()]

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.create_or_update_user_address_details(
                user_id=user_id, address_details=address_details)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)

    def test_given_invalid_address_type_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.constants.user_profile.exception_messages import \
            INVALID_ADDRESS_TYPE
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidAddressDetailsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_id = "UserId"
        address_details = [interface_dtos.UpdateAddressDetailsDTOFactory(
            address_type="address_type")]
        expected_exception = [
            interface_dtos.InvalidAddressDetailsDTOFactory(
                   address_type=interface_dtos.InvalidValueDetailsDTOFactory(
                       value="address_type",
                       error_code=INVALID_ADDRESS_TYPE[1],
                       error_message=INVALID_ADDRESS_TYPE[0]
                   ))
        ]
        # Act
        with pytest.raises(InvalidAddressDetailsException) as err:
            interactor.create_or_update_user_address_details(
                user_id=user_id, address_details=address_details)

        # Assert
        assert err.value.invalid_address_details == expected_exception

    def test_given_valid_address_details_then_update(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_id = "UserId"
        address_details = [interface_dtos.UpdateAddressDetailsDTOFactory(
            address_type=enums.AddressType.CURRENT.value)]

        # Act
        interactor.create_or_update_user_address_details(
            user_id=user_id, address_details=address_details)

        # Assert
        user_profile_storage_mock.create_or_update_user_address_details.\
            assert_called_once_with(user_id=user_id, address_details=address_details)
import datetime
import pytest
import mock

from ib_users.tests.factories import interface_dtos, storage_dtos, interactor_dtos
from freezegun import freeze_time


class TestCreateOrUpdateUserProfessionalDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile.\
            create_or_update_user_professional_details_interactor import \
            CreateOrUpdateUserProfessionalDetailsInteractor
        return CreateOrUpdateUserProfessionalDetailsInteractor(
            profile_storage=user_profile_storage_mock,
            account_storage=user_account_storage_mock)

    @pytest.fixture()
    def update_user_professional_details_dto(self):
        return interface_dtos.UpdateUserProfessionalDetailsDTOFactory(
            user_id="UserId",
            work_experience_details=interface_dtos.WorkExperienceDetailsDTOFactory(
                no_of_years_experience_in_it_sector=10,
                no_of_years_experience_in_non_it_sector=10),
            company_details=[
                interface_dtos.UpdateUserCompanyDetailsDTOFactory(
                    id=1, end_date=datetime.date(2020, 10, 10),
                    start_date=datetime.date(2010, 10, 10),
                    other_company_city_name="other_company_city_name"),
                interface_dtos.UpdateUserCompanyDetailsDTOFactory(
                    id=None,  end_date=datetime.date(2020, 10, 10),
                    start_date=datetime.date(2010, 10, 10),
                    other_company_city_name="other_company_city_name"),
            ],
            current_professional_details=interface_dtos.UpdateCurrentProfessionalDetailsDTOFactory(
                job_role_id="job_role_id", job_role_name="job_role_name",
                other_job_role_name="other_job_role_name",
                higher_education_course_type="SSC",
                have_work_experience=False,
                skills=[
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id="skill_id", skill_name="skill_name",
                        id="ID1", other_skill_name=None
                    ),
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id="skill_id", skill_name="skill_name",
                        id=None, other_skill_name=None
                    )
                ]
            )
        )

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.create_or_update_user_professional_details(
                update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=update_user_professional_details_dto.user_id)

    def test_given_work_experience_in_it_sector_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidProfessionalDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        update_user_professional_details_dto.work_experience_details.\
            no_of_years_experience_in_it_sector = -1

        # Act
        with pytest.raises(InvalidProfessionalDetailsException) as err:
            interactor.create_or_update_user_professional_details(
                update_user_professional_details_dto=update_user_professional_details_dto)
        # Assert
        invalid_details = err.value.invalid_professional_details.\
            work_experience_details.no_of_years_experience_in_it_sector

        assert invalid_details.value == -1
        assert invalid_details.error_code == \
               exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_IT_SECTOR[1]
        assert invalid_details.error_message == \
               exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_IT_SECTOR[0]

    def test_given_work_experience_in_non_it_sector_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidProfessionalDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        update_user_professional_details_dto.work_experience_details. \
            no_of_years_experience_in_non_it_sector = -1

        # Act
        with pytest.raises(InvalidProfessionalDetailsException) as err:
            interactor.create_or_update_user_professional_details(
                update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        invalid_details = err.value.invalid_professional_details.\
            work_experience_details.no_of_years_experience_in_non_it_sector

        assert invalid_details.value == -1
        assert invalid_details.error_code == \
               exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_NON_IT_SECTOR[1]
        assert invalid_details.error_message == \
               exception_messages.INVALID_NO_OF_YEARS_EXPERIENCE_IN_NON_IT_SECTOR[0]

    def test_given_end_year_less_than_start_date_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidProfessionalDetailsException
        from ib_users.constants.user_profile import exception_messages

        user_account_storage_mock.is_user_id_exists.return_value = True
        update_user_professional_details_dto.company_details[0].\
            end_date = datetime.date(1999, 10, 10)

        # Act
        with pytest.raises(InvalidProfessionalDetailsException) as err:
            interactor.create_or_update_user_professional_details(
                update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        invalid_details = err.value.invalid_professional_details.\
            company_details[0].end_date
        assert err.value.invalid_professional_details.company_details[0].request_id == \
               update_user_professional_details_dto.company_details[0].request_id
        assert invalid_details.value == datetime.date(1999, 10, 10)
        assert invalid_details.error_code == \
               exception_messages.END_DATE_SHOULD_BE_GREATER_THAN_START_DATE[1]
        assert invalid_details.error_message == \
               exception_messages.END_DATE_SHOULD_BE_GREATER_THAN_START_DATE[0]

    def test_given_invalid_company_ids_to_update_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserCompanyDetailsIdsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_company_details.return_value = []
        current_professional_details_to_update = update_user_professional_details_dto.current_professional_details
        current_professional_details = interactor_dtos.CurrentProfessionalDetailsDTOFactory(
            job_role_id=current_professional_details_to_update.job_role_id,
            job_role_name=current_professional_details_to_update.job_role_name,
            other_job_role_name=current_professional_details_to_update.other_job_role_name,
            higher_education_course_type="SSC",
            have_work_experience=False)
        current_professional_details_to_update.skills = None
        current_professional_details_to_update.other_skills = None

        # Act
        with pytest.raises(InvalidUserCompanyDetailsIdsException) as err:
            interactor.create_or_update_user_professional_details(
                update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        assert err.value.user_company_ids == [1]
        user_profile_storage_mock.create_or_update_user_work_experience_details.\
            assert_called_once_with(
                work_experience_details=update_user_professional_details_dto.work_experience_details,
                user_id=update_user_professional_details_dto.user_id)
        user_profile_storage_mock.create_or_update_user_current_professional_details. \
            assert_called_once_with(
                current_professional_details=current_professional_details,
                user_id=update_user_professional_details_dto.user_id)
        user_profile_storage_mock.get_user_company_details. \
            assert_called_once_with(user_id=update_user_professional_details_dto.user_id)

    def test_given_invalid_skill_ids_raises_exception(
            self, interactor, user_profile_storage_mock,
            user_account_storage_mock, update_user_professional_details_dto):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            InvalidUserProfessionalSkillIdsException

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_company_details.return_value = [
            storage_dtos.UserCompanyDetailsDTOFactory(id=1),
            storage_dtos.UserCompanyDetailsDTOFactory(id=2)]
        user_profile_storage_mock.get_user_professional_skills_details. \
            return_value = []

        # Act
        with pytest.raises(InvalidUserProfessionalSkillIdsException) as err:
            interactor.create_or_update_user_professional_details(
                update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        assert err.value.user_professional_skills_ids == ["ID1"]

    @mock.patch('uuid.uuid4')
    def test_given_valid_details_then_update_details(
            self, uuid_mock, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313')
        ]
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_company_details.return_value = [
            storage_dtos.UserCompanyDetailsDTOFactory(id=1),
            storage_dtos.UserCompanyDetailsDTOFactory(id=2)]
        current_professional_details_to_update = update_user_professional_details_dto.current_professional_details
        current_professional_details = interactor_dtos.CurrentProfessionalDetailsDTOFactory(
            job_role_id=current_professional_details_to_update.job_role_id,
            job_role_name=current_professional_details_to_update.job_role_name,
            other_job_role_name=current_professional_details_to_update.other_job_role_name,
            higher_education_course_type="SSC",
            have_work_experience=False)

        user_profile_storage_mock.get_user_professional_skills_details.\
            return_value = [storage_dtos.UserProfessionalSkillsDTOFactory(id="ID1"),
                            storage_dtos.UserProfessionalSkillsDTOFactory(id="ID2")]
        user_professional_skills_to_create = [
            storage_dtos.UserProfessionalSkillsDTOFactory(
                user_id='UserId', id='254bd45c-1f77-4fa2-a173-64b0a0942317',
                skill_id='skill_id', skill_name='skill_name', other_skill_name=None
            )
        ]

        # Act
        interactor.create_or_update_user_professional_details(
            update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        user_profile_storage_mock.create_or_update_user_work_experience_details.\
            assert_called_once_with(
                work_experience_details=update_user_professional_details_dto.work_experience_details,
                user_id=update_user_professional_details_dto.user_id)
        user_profile_storage_mock.create_or_update_user_current_professional_details. \
            assert_called_once_with(
                current_professional_details=current_professional_details,
                user_id=update_user_professional_details_dto.user_id)
        user_profile_storage_mock.get_user_company_details. \
            assert_called_once_with(user_id=update_user_professional_details_dto.user_id)
        user_profile_storage_mock.update_user_company_details. \
            assert_called_once_with(
                user_company_details=[update_user_professional_details_dto.company_details[0]])
        user_profile_storage_mock.create_user_company_details. \
            assert_called_once_with(
                user_company_details=[
                    update_user_professional_details_dto.company_details[1]],
                user_id=update_user_professional_details_dto.user_id)
        user_profile_storage_mock.remove_user_company_details. \
            assert_called_once_with(user_company_detail_ids=[2])
        user_profile_storage_mock.update_user_professional_skills_details.\
            assert_called_once_with(
                user_professional_skills=[
                    update_user_professional_details_dto.current_professional_details.skills[0]])
        user_profile_storage_mock.create_user_professional_skills_details. \
            assert_called_once_with(user_professional_skills=user_professional_skills_to_create)
        user_profile_storage_mock.remove_user_professional_skills.assert_called_once_with(
            user_professional_skills_ids=["ID2"])

    @mock.patch('uuid.uuid4')
    def test_given_other_skills_in_user_profession_details_then_update_details(
            self, uuid_mock, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from uuid import UUID

        other_skills = ["Skill1", "Skill2"]
        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313')
        ]
        update_user_professional_details_dto.current_professional_details.skills = [
            interface_dtos.SkillDetailsDTOFactory(
                skill_id=None, skill_name=None,
                id=None, other_skill_name=other_skills[0]),
            interface_dtos.SkillDetailsDTOFactory(
                skill_id=None, skill_name=None,
                id=None, other_skill_name=other_skills[1])
        ]

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_company_details.return_value = [
            storage_dtos.UserCompanyDetailsDTOFactory(id=1),
            storage_dtos.UserCompanyDetailsDTOFactory(id=2)]
        user_profile_storage_mock.get_user_professional_skills_details. \
            return_value = [
                storage_dtos.UserProfessionalSkillsDTOFactory(
                    id="ID1", other_skill_name="Skill", skill_id=None, skill_name=None)]

        user_professional_skills = [
            storage_dtos.UserProfessionalSkillsDTOFactory(
                user_id=update_user_professional_details_dto.user_id,
                id="254bd45c-1f77-4fa2-a173-64b0a0942317",
                skill_name=None, skill_id=None, other_skill_name=other_skills[0]),
            storage_dtos.UserProfessionalSkillsDTOFactory(
                user_id=update_user_professional_details_dto.user_id,
                id="354bd45c-1f77-4fa2-a173-64b0a0942311",
                skill_name=None, skill_id=None, other_skill_name=other_skills[1])
        ]
        # Act
        interactor.create_or_update_user_professional_details(
            update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        user_profile_storage_mock.remove_user_professional_skills.assert_called_once_with(
            user_professional_skills_ids=["ID1"])
        user_profile_storage_mock.create_user_professional_skills_details. \
            assert_called_once_with(user_professional_skills=user_professional_skills)

    @mock.patch('uuid.uuid4')
    def test_with_user_have_skills_given_empty_then_removes_skills(
            self, uuid_mock, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313')
        ]
        update_user_professional_details_dto.current_professional_details.skills = []

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_company_details.return_value = [
            storage_dtos.UserCompanyDetailsDTOFactory(id=1),
            storage_dtos.UserCompanyDetailsDTOFactory(id=2)]
        user_profile_storage_mock.get_user_professional_skills_details.return_value = [
            storage_dtos.UserProfessionalSkillsDTOFactory(
                id="ID1", other_skill_name="Skill", skill_id=None, skill_name=None)
        ]

        # Act
        interactor.create_or_update_user_professional_details(
            update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        user_profile_storage_mock.remove_user_professional_skills.assert_called_once_with(
            user_professional_skills_ids=["ID1"])

    @mock.patch('uuid.uuid4')
    def test_with_user_have_company_details_given_empty_then_removes_company_details(
            self, uuid_mock, interactor, user_profile_storage_mock, user_account_storage_mock,
            update_user_professional_details_dto):
        # Arrange
        from uuid import UUID

        uuid_mock.side_effect = [
            UUID('254bd45c-1f77-4fa2-a173-64b0a0942317'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942311'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942312'),
            UUID('354bd45c-1f77-4fa2-a173-64b0a0942313')
        ]
        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_company_details.return_value = [
            storage_dtos.UserCompanyDetailsDTOFactory(id=1),
            storage_dtos.UserCompanyDetailsDTOFactory(id=2)]
        update_user_professional_details_dto.company_details = []
        update_user_professional_details_dto.current_professional_details = None
        update_user_professional_details_dto.work_experience_details = None

        # Act
        interactor.create_or_update_user_professional_details(
            update_user_professional_details_dto=update_user_professional_details_dto)

        # Assert
        user_profile_storage_mock.remove_user_company_details. \
            assert_called_once_with(user_company_detail_ids=[1, 2])

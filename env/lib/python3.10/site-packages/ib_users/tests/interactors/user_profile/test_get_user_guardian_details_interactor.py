import pytest
import mock

from ib_users.tests.factories import storage_dtos


class TestGetUserGuardianDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile. \
            get_user_guardian_details_interactor import \
            GetUserGuardianDetailsInteractor
        return GetUserGuardianDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_id = "user_id"
        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.get_user_guardian_details(user_id=user_id)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)

    def test_given_valid_user_id_return_user_guardian_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        storage_dtos.UserGuardianDetailsDTOFactory.reset_sequence()

        user_id = "user_id"
        user_guardian_details = storage_dtos.UserGuardianDetailsDTOFactory(
            user_id=user_id)

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_guardian_details.return_value = \
            user_guardian_details

        # Act
        actual_response = interactor.get_user_guardian_details(user_id=user_id)

        # Assert
        assert actual_response == user_guardian_details
        user_profile_storage_mock.get_user_guardian_details.assert_called_once_with(
            user_id=user_id)

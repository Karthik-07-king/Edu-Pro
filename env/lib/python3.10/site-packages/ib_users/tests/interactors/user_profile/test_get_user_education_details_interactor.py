import pytest
import mock

from ib_users.constants.user_profile import enums
from ib_users.tests.factories import interface_dtos, storage_dtos


class TestGetUserEducationDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile. \
            get_user_education_details_interactor import \
            GetUserEducationDetailsInteractor
        return GetUserEducationDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_id = "user_id"
        user_account_storage_mock.is_user_id_exists.return_value = False

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.get_user_education_details(user_id=user_id)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)

    def test_given_valid_user_id_return_user_education_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        user_id = "user_id"
        user_ssc_details = storage_dtos.SSCDetailsDTOFactory(
            board_name_enum=enums.SSCBoardName.CBSE.value)
        user_intermediate_details = storage_dtos.IntermediateDetailsDTOFactory()
        user_degree_details = [storage_dtos.UserDegreeDetailsDTOFactory(
            other_institute_city_name="other_institute_city_name",
            other_department_name="other_department_name")]

        user_profile_storage_mock.get_user_ssc_details.return_value = \
            user_ssc_details
        user_profile_storage_mock.get_user_intermediate_details.return_value = \
            user_intermediate_details
        user_profile_storage_mock.get_user_degree_details.return_value = \
            user_degree_details
        user_account_storage_mock.is_user_id_exists.return_value = True

        expected_response = interface_dtos.UserEducationDetailsDTOFactory(
            user_id=user_id,
            ssc_details=interface_dtos.SSCDetailsDTOFactory(
                board_details=interface_dtos.BoardDetailsDTOFactory(
                    board_name="Central Board of Secondary Education",
                    board_name_enum=user_ssc_details.board_name_enum),
                institute_details=interface_dtos.InstituteDetailsDTOFactory(
                    institute_id=user_ssc_details.institute_id,
                    institute_name=user_ssc_details.institute_name),
                other_institute_name=user_ssc_details.other_institute_name,
                completion_status=user_ssc_details.completion_status,
                score_type=user_ssc_details.score_type,
                score=user_ssc_details.score,
                year_of_completion=user_ssc_details.year_of_completion),
            intermediate_details=interface_dtos.IntermediateDetailsDTOFactory(
                course_details=interface_dtos.CourseDetailsDTOFactory(
                    course_id=user_intermediate_details.intermediate_course_id,
                    course_name=user_intermediate_details.course_name),
                other_course_name=user_intermediate_details.other_intermediate_course,
                institute_details=interface_dtos.InstituteDetailsDTOFactory(
                    institute_id=user_intermediate_details.institute_id,
                    institute_name=user_intermediate_details.institute_name),
                other_institute_name=user_intermediate_details.other_institute_name,
                completion_status=user_intermediate_details.completion_status,
                score_type=user_intermediate_details.score_type,
                score=user_intermediate_details.score,
                year_of_completion=user_intermediate_details.year_of_completion),
            degree_details=[
                interface_dtos.DegreeDetailsDTOFactory(
                    id=each_degree_details.id,
                    type=each_degree_details.type,
                    course_details=interface_dtos.CourseDetailsDTOFactory(
                        course_id=each_degree_details.course_id,
                        course_name=each_degree_details.course_name),
                    other_course_name=each_degree_details.other_course_name,
                    completion_status=each_degree_details.completion_status,
                    department_details=interface_dtos.DepartmentDetailsDTOFactory(
                        department_id=each_degree_details.department_id,
                        department_name=each_degree_details.department_name),
                    score_type=each_degree_details.score_type,
                    score=each_degree_details.score,
                    start_year=each_degree_details.start_year,
                    end_year=each_degree_details.end_year,
                    no_of_backlogs=each_degree_details.no_of_backlogs,
                    institute_details=interface_dtos.InstituteDetailsDTOFactory(
                        institute_id=each_degree_details.institute_id,
                        institute_name=each_degree_details.institute_name),
                    other_institute_name=each_degree_details.other_institute_name,
                    institute_pin_code=each_degree_details.institute_pin_code,
                    institute_city_details=interface_dtos.CityDetailsDTOFactory(
                        city_id=each_degree_details.institute_city_id,
                        city_name=each_degree_details.institute_city_name),
                    expected_date_to_clear_backlogs=each_degree_details.expected_date_to_clear_backlogs,
                    institute_district_details=interface_dtos.DistrictDetailsDTOFactory(
                        district_id=each_degree_details.institute_district_id,
                        district_name=each_degree_details.institute_district_name),
                    institute_state_details=interface_dtos.StateDetailsDTOFactory(
                        state_id=each_degree_details.institute_state_id,
                        state_name=each_degree_details.institute_state_name),
                    other_institute_city_name=each_degree_details.other_institute_city_name,
                    other_department_name=each_degree_details.other_department_name,
                    institute_country_details=interface_dtos.CountryDetailsDTOFactory(
                        country_id=each_degree_details.institute_country_id,
                        country_name=each_degree_details.institute_country_name)
                )
                for each_degree_details in user_degree_details
            ]
        )

        # Act
        actual_response = interactor.get_user_education_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response
        user_profile_storage_mock.get_user_ssc_details.assert_called_once_with(
            user_id=user_id)
        user_profile_storage_mock.get_user_intermediate_details. \
            assert_called_once_with(user_id=user_id)
        user_profile_storage_mock.get_user_degree_details.assert_called_once_with(
            user_id=user_id)

    def test_given_valid_user_id_and_user_have_only_ssc_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        user_id = "user_id"
        user_ssc_details = storage_dtos.SSCDetailsDTOFactory(board_name_enum=None)

        user_profile_storage_mock.get_user_ssc_details.return_value = \
            user_ssc_details
        user_profile_storage_mock.get_user_intermediate_details.return_value = None
        user_profile_storage_mock.get_user_degree_details.return_value = []
        user_account_storage_mock.is_user_id_exists.return_value = True

        expected_response = interface_dtos.UserEducationDetailsDTOFactory(
            user_id=user_id,
            ssc_details=interface_dtos.SSCDetailsDTOFactory(
                board_details=interface_dtos.BoardDetailsDTOFactory(
                    board_name=None,
                    board_name_enum=user_ssc_details.board_name_enum),
                institute_details=interface_dtos.InstituteDetailsDTOFactory(
                    institute_id=user_ssc_details.institute_id,
                    institute_name=user_ssc_details.institute_name),
                other_institute_name=user_ssc_details.other_institute_name,
                completion_status=user_ssc_details.completion_status,
                score_type=user_ssc_details.score_type,
                score=user_ssc_details.score,
                year_of_completion=user_ssc_details.year_of_completion),
            intermediate_details=None,
            degree_details=[]
        )

        # Act
        actual_response = interactor.get_user_education_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response

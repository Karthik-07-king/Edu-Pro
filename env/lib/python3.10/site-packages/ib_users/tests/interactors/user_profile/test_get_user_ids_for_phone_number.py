import mock
import pytest

from ib_users.exceptions.custom_exception_constants import INVALID_PHONE_NUMBER
from ib_users.exceptions.invalid_phone_number_exception import InvalidPhoneNumberException
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO


class TestGetUserIdForPhoneNumberInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)
    
    @pytest.fixture()
    def phone_number_validator_mock(self):
        from ib_users.interactors.validators.phone_number_validator import PhoneNumberValidator
        phone_number_validator = mock.create_autospec(PhoneNumberValidator)
        return phone_number_validator

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, phone_number_validator_mock):
        from ib_users.interactors.user_profile.get_users_for_phone_number import GetUserIdForPhoneNumberInteractor
        
        interactor = GetUserIdForPhoneNumberInteractor(
            user_profile_storage=user_profile_storage_mock,
            phone_number_validator=phone_number_validator_mock
        )
        
        return interactor
    
    def test_with_invalid_phone_number(self, interactor, phone_number_validator_mock):
        # Arrange
        phone_number_dto = PhoneNumberDTO(
            phone_number="13582",
            country_code="+91"
        )
        phone_number_validator_mock.validate.side_effect = InvalidPhoneNumberException(
            message=INVALID_PHONE_NUMBER.message,
            exception_type=INVALID_PHONE_NUMBER.code
        )

        # Act
        with pytest.raises(InvalidPhoneNumberException):
            interactor.get_user_ids_for_phone_number(
                phone_number_dto=phone_number_dto)

        # Assert
        phone_number_validator_mock.validate.assert_called_once_with(
            phone_number_dto=phone_number_dto)

    def test_with_valid_data(
            self, interactor, phone_number_validator_mock, user_profile_storage_mock):
        # Arrange
        phone_number_dto = PhoneNumberDTO(
            phone_number="13582",
            country_code="+91"
        )
        user_ids = ["user_1", "user_2"]
        phone_number_validator_mock.validate.return_value = None
        user_profile_storage_mock.get_user_ids_for_phone_number.return_value = user_ids

        # Act
        actual_response = interactor.get_user_ids_for_phone_number(
            phone_number_dto=phone_number_dto)

        # Assert
        phone_number_validator_mock.validate.assert_called_once_with(
            phone_number_dto=phone_number_dto)
        user_profile_storage_mock.get_user_ids_for_phone_number.assert_called_once_with(
            phone_number_dto=phone_number_dto
        )
        assert actual_response == user_ids

import pytest
import mock

from ib_users.constants.user_profile import enums
from ib_users.tests.factories import interface_dtos, storage_dtos


class TestGetUserProfileCompleteDetailsInteractor:

    @pytest.fixture()
    def user_profile_storage_mock(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage

        return mock.create_autospec(UserProfileStorage)

    @pytest.fixture()
    def user_account_storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture()
    def interactor(self, user_profile_storage_mock, user_account_storage_mock):
        from ib_users.interactors.user_profile. \
            get_user_complete_profile_details_interactor import \
            GetUserProfileCompleteDetailsInteractor
        return GetUserProfileCompleteDetailsInteractor(
            user_profile_storage=user_profile_storage_mock,
            user_account_storage=user_account_storage_mock)

    def test_given_invalid_user_raises_exception(
            self, interactor, user_profile_storage_mock, user_account_storage_mock):
        # Arrange
        from ib_users.exceptions.user_account_exceptions import \
            InvalidUserIdException

        user_account_storage_mock.is_user_id_exists.return_value = False
        user_id = "UserId1"

        # Act
        with pytest.raises(InvalidUserIdException):
            interactor.get_user_profile_complete_details(user_id=user_id)

        # Assert
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)

    @pytest.fixture
    def get_user_address_details_mock(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            get_user_address_details

        return get_user_address_details(mocker=mocker)

    @pytest.fixture
    def get_user_education_details_mock(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            get_user_education_details

        return get_user_education_details(mocker=mocker)

    @pytest.fixture
    def get_user_professional_details_mock(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            get_user_professional_details

        return get_user_professional_details(mocker=mocker)

    @pytest.fixture
    def get_user_guardian_details_mock(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            get_user_guardian_details

        return get_user_guardian_details(mocker=mocker)

    @pytest.fixture
    def get_user_profile_along_with_contact_details_mock(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            get_user_profile_along_with_contact_details_mock
        return get_user_profile_along_with_contact_details_mock(mocker=mocker)

    def test_given_valid_user_id_return_user_profile_complete_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            get_user_address_details_mock, get_user_education_details_mock,
            get_user_professional_details_mock, get_user_guardian_details_mock,
            get_user_profile_along_with_contact_details_mock):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            UserGuardianDetailsDoesNotExistsException

        user_account_storage_mock.is_user_id_exists.return_value = False
        user_id = "UserId1"
        user_profile_details = interface_dtos.ProfileDetailsDTOFactory()
        user_address_details = [storage_dtos.AddressDetailsDTOFactory()]
        user_current_professional_details = storage_dtos.CurrentProfessionalDetailsDTOFactory()
        user_company_details_dtos = [storage_dtos.CompanyDetailsDTOFactory()]
        user_work_experience_details = storage_dtos.WorkExperienceDetailsDTOFactory()
        user_social_profile_details = [storage_dtos.SocialProfileDetailsDTOFactory()]
        user_profession_skills = [
            storage_dtos.UserProfessionalSkillsDTOFactory(
                skill_id="skill_id", skill_name="skill_name", id="Id1", other_skill_name=None),
            storage_dtos.UserProfessionalSkillsDTOFactory(
                id="Id2", skill_id=None, skill_name=None, other_skill_name="other_skill_name")
        ]
        contact_details = storage_dtos.UserContactDetailsDTOFactory(
            whatsapp_mobile_number="9988776655",
            whatsapp_mobile_country_code="91",
            i_want_to_receive_updates_in_whatsapp=True,
            have_whatsapp=True)

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_social_profile_details.return_value = \
            user_social_profile_details
        user_profile_storage_mock.get_user_professional_skills_details. \
            return_value = user_profession_skills

        profile_details = interface_dtos.ProfileDetailsDTOFactory(
            user_id=user_id,
            first_name=user_profile_details.first_name,
            last_name=user_profile_details.last_name,
            phone_number=user_profile_details.phone_number,
            country_code=user_profile_details.country_code,
            whatsapp_mobile_number=contact_details.whatsapp_mobile_number,
            whatsapp_mobile_country_code=contact_details.whatsapp_mobile_country_code,
            email=user_profile_details.email,
            date_of_birth=user_profile_details.date_of_birth,
            gender=user_profile_details.gender,
            preferred_languages=[],
            profile_pic_url=user_profile_details.profile_pic_url,
            cover_page_url=user_profile_details.cover_page_url,
            i_want_to_receive_updates_in_whatsapp=contact_details.i_want_to_receive_updates_in_whatsapp,
            have_whatsapp=contact_details.have_whatsapp,
            is_phone_number_verified=user_profile_details.is_phone_number_verified,
            is_email_verified=user_profile_details.is_email_verified)

        address_details = [
            interface_dtos.AddressDetailsDTOFactory(
                address_type=each.address_type,
                address_1=each.address_1,
                address_2=each.address_2, pin_code=each.pin_code,
                other_city_name=each.other_city_name,
                city_details=interface_dtos.CityDetailsDTOFactory(
                    city_id=each.city_id,
                    city_name=each.city_name),
                district_details=interface_dtos.DistrictDetailsDTOFactory(
                    district_id=each.district_id,
                    district_name=each.district_name),
                state_details=interface_dtos.StateDetailsDTOFactory(
                    state_id=each.state_id,
                    state_name=each.state_name),
                country_details=interface_dtos.CountryDetailsDTOFactory(
                    country_id=each.country_id,
                    country_name=each.country_name)
            )
            for each in user_address_details
        ]

        professional_details = interface_dtos.UserProfessionalDetailsDTOFactory(
            user_id=user_id,
            work_experience_details=interface_dtos.WorkExperienceDetailsDTOFactory(
                no_of_years_experience_in_it_sector=user_work_experience_details.no_of_years_experience_in_it_sector,
                no_of_years_experience_in_non_it_sector=user_work_experience_details.no_of_years_experience_in_non_it_sector),
            company_details=[
                interface_dtos.CompanyDetailsDTOFactory(
                    id=user_company_details.id,
                    company_details=interface_dtos.CompanyIdAndNameDTOFactory(
                        company_id=user_company_details.company_id,
                        company_name=user_company_details.company_name),
                    other_company_name=user_company_details.other_company_name,
                    company_city_details=interface_dtos.CityDetailsDTOFactory(
                        city_id=user_company_details.company_city_id,
                        city_name=user_company_details.company_city_name),
                    job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                        job_role_id=user_company_details.job_role_id,
                        job_role_name=user_company_details.job_role_name),
                    other_job_role_name=user_company_details.other_job_role_name,
                    is_currently_working_in_this_company=user_company_details.
                        is_currently_working_in_this_company,
                    start_date=user_company_details.start_date,
                    end_date=user_company_details.end_date,
                    ctc=user_company_details.ctc,
                    no_of_months_for_notice_period=user_company_details. \
                        no_of_months_for_notice_period)
                for user_company_details in user_company_details_dtos
            ],
            current_professional_details=interface_dtos.CurrentProfessionalDetailsDTOFactory(
                job_role_details=interface_dtos.JobRoleDetailsDTOFactory(
                    job_role_id=user_current_professional_details.job_role_id,
                    job_role_name=user_current_professional_details.job_role_name),
                higher_education_course_type=enums.CourseType.BACHELORS.value,
                skill_details=[
                    interface_dtos.SkillDetailsDTOFactory(
                        skill_id="skill_id", skill_name="skill_name", id="Id1")
                ],
                other_job_role_name=user_current_professional_details.other_job_role_name,
            )
        )

        expected_response = interface_dtos.UserCompleteProfileDetailsDTOFactory(
            user_id=user_id,
            profile_details=profile_details,
            address_details=address_details,
            education_details=None,
            social_profile_details=[
                interface_dtos.SocialProfileDetailsDTOFactory(
                    id=each.id,
                    social_provider=each.social_provider,
                    profile_link=each.profile_link
                )
                for each in user_social_profile_details
            ],
            professional_details=professional_details,
            guardian_details=None
        )
        get_user_profile_along_with_contact_details_mock.return_value = [profile_details]
        get_user_address_details_mock.return_value = address_details
        get_user_education_details_mock.return_value = None
        get_user_professional_details_mock.return_value = professional_details
        get_user_guardian_details_mock.side_effect = UserGuardianDetailsDoesNotExistsException()

        # Act
        actual_response = interactor.get_user_profile_complete_details(
            user_id=user_id)

        # Assert
        assert actual_response == expected_response
        user_account_storage_mock.is_user_id_exists.assert_called_once_with(
            user_id=user_id)
        get_user_profile_along_with_contact_details_mock.assert_called_once_with(
            user_ids=[user_id])
        user_profile_storage_mock.get_user_social_profile_details.assert_called_once_with(
            user_id=user_id)

    def test_with_education_details_return_complete_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            get_user_address_details_mock, get_user_education_details_mock,
            get_user_professional_details_mock, get_user_guardian_details_mock,
            get_user_profile_along_with_contact_details_mock):
        # Arrange
        from ib_users.exceptions.user_profile_exceptions import \
            UserGuardianDetailsDoesNotExistsException

        storage_dtos.SSCDetailsDTOFactory.reset_sequence()
        storage_dtos.IntermediateDetailsDTOFactory.reset_sequence()
        storage_dtos.UserDegreeDetailsDTOFactory.reset_sequence()

        user_account_storage_mock.is_user_id_exists.return_value = False
        user_id = "UserId1"
        user_profile_details = interface_dtos.ProfileDetailsDTOFactory()
        user_social_profile_details = []
        user_profession_skills = []
        contact_details = storage_dtos.UserContactDetailsDTOFactory(
            whatsapp_mobile_number="9988776655",
            whatsapp_mobile_country_code="91",
            i_want_to_receive_updates_in_whatsapp=True,
            have_whatsapp=False)
        user_ssc_details = storage_dtos.SSCDetailsDTOFactory(
            board_name_enum=enums.SSCBoardName.CBSE.value)
        user_intermediate_details = storage_dtos.IntermediateDetailsDTOFactory()
        user_degree_details = [storage_dtos.UserDegreeDetailsDTOFactory()]

        profile_details = interface_dtos.ProfileDetailsDTOFactory(
            user_id=user_id,
            first_name=user_profile_details.first_name,
            last_name=user_profile_details.last_name,
            phone_number=user_profile_details.phone_number,
            country_code=user_profile_details.country_code,
            whatsapp_mobile_number=contact_details.whatsapp_mobile_number,
            whatsapp_mobile_country_code=contact_details.whatsapp_mobile_country_code,
            email=user_profile_details.email,
            date_of_birth=user_profile_details.date_of_birth,
            gender=user_profile_details.gender,
            preferred_languages=[],
            profile_pic_url=user_profile_details.profile_pic_url,
            cover_page_url=user_profile_details.cover_page_url,
            i_want_to_receive_updates_in_whatsapp=contact_details.i_want_to_receive_updates_in_whatsapp,
            have_whatsapp=contact_details.have_whatsapp,
            is_phone_number_verified=user_profile_details.is_phone_number_verified,
            is_email_verified=user_profile_details.is_email_verified
        )

        education_details = interface_dtos.UserEducationDetailsDTOFactory(
            user_id=user_id,
            ssc_details=interface_dtos.SSCDetailsDTOFactory(
                board_details=interface_dtos.BoardDetailsDTOFactory(
                    board_name="Central Board of Secondary Education",
                    board_name_enum=user_ssc_details.board_name_enum),
                institute_details=interface_dtos.InstituteDetailsDTOFactory(
                    institute_id=user_ssc_details.institute_id,
                    institute_name=user_ssc_details.institute_name),
                other_institute_name=user_ssc_details.other_institute_name,
                completion_status=user_ssc_details.completion_status,
                score_type=user_ssc_details.score_type,
                score=user_ssc_details.score,
                year_of_completion=user_ssc_details.year_of_completion),
            intermediate_details=interface_dtos.IntermediateDetailsDTOFactory(
                course_details=interface_dtos.CourseDetailsDTOFactory(
                    course_id=user_intermediate_details.intermediate_course_id,
                    course_name=user_intermediate_details.course_name),
                other_course_name=user_intermediate_details.other_intermediate_course,
                institute_details=interface_dtos.InstituteDetailsDTOFactory(
                    institute_id=user_intermediate_details.institute_id,
                    institute_name=user_intermediate_details.institute_name),
                other_institute_name=user_intermediate_details.other_institute_name,
                completion_status=user_intermediate_details.completion_status,
                score_type=user_intermediate_details.score_type,
                score=user_intermediate_details.score,
                year_of_completion=user_intermediate_details.year_of_completion),
            degree_details=[
                interface_dtos.DegreeDetailsDTOFactory(
                    id=each_degree_details.id,
                    type=each_degree_details.type,
                    course_details=interface_dtos.CourseDetailsDTOFactory(
                        course_id=each_degree_details.course_id,
                        course_name=each_degree_details.course_name),
                    other_course_name=each_degree_details.other_course_name,
                    completion_status=each_degree_details.completion_status,
                    department_details=interface_dtos.DepartmentDetailsDTOFactory(
                        department_id=each_degree_details.department_id,
                        department_name=each_degree_details.department_name),
                    score_type=each_degree_details.score_type,
                    score=each_degree_details.score,
                    start_year=each_degree_details.start_year,
                    end_year=each_degree_details.end_year,
                    no_of_backlogs=each_degree_details.no_of_backlogs,
                    institute_details=interface_dtos.InstituteDetailsDTOFactory(
                        institute_id=each_degree_details.institute_id,
                        institute_name=each_degree_details.institute_name),
                    other_institute_name=each_degree_details.other_institute_name,
                    institute_pin_code=each_degree_details.institute_pin_code,
                    institute_city_details=interface_dtos.CityDetailsDTOFactory(
                        city_id=each_degree_details.institute_city_id,
                        city_name=each_degree_details.institute_city_name),
                    institute_district_details=interface_dtos.DistrictDetailsDTOFactory(
                        district_id=each_degree_details.institute_district_id,
                        district_name=each_degree_details.institute_district_name),
                    institute_state_details=interface_dtos.StateDetailsDTOFactory(
                        state_id=each_degree_details.institute_state_id,
                        state_name=each_degree_details.institute_state_name),
                    expected_date_to_clear_backlogs=each_degree_details.expected_date_to_clear_backlogs
                )
                for each_degree_details in user_degree_details
            ]
        )

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_social_profile_details.return_value = \
            user_social_profile_details
        user_profile_storage_mock.get_user_professional_skills_details. \
            return_value = user_profession_skills

        expected_response = interface_dtos.UserCompleteProfileDetailsDTOFactory(
            user_id=user_id,
            profile_details=profile_details,
            address_details=None,
            education_details=education_details,
            social_profile_details=[],
            professional_details=None,
            guardian_details=None
        )
        get_user_profile_along_with_contact_details_mock.return_value = [profile_details]
        get_user_address_details_mock.return_value = None
        get_user_education_details_mock.return_value = education_details
        get_user_professional_details_mock.return_value = None
        get_user_guardian_details_mock.side_effect = UserGuardianDetailsDoesNotExistsException()

        # Act
        actual_response = interactor.get_user_profile_complete_details(
            user_id=user_id)

        # Assert
        assert actual_response == expected_response
        get_user_education_details_mock.assert_called_once_with(
            user_id=user_id)

    def test_user_guardian_details_return_complete_details(
            self, interactor, user_profile_storage_mock, user_account_storage_mock,
            get_user_address_details_mock, get_user_education_details_mock,
            get_user_professional_details_mock, get_user_guardian_details_mock,
            get_user_profile_along_with_contact_details_mock):
        # Arrange
        storage_dtos.UserGuardianDetailsDTOFactory.reset_sequence()

        user_account_storage_mock.is_user_id_exists.return_value = False
        user_id = "UserId1"
        user_social_profile_details = []
        user_profession_skills = []
        user_profile_details = interface_dtos.ProfileDetailsDTOFactory()
        user_guardian_details = storage_dtos.UserGuardianDetailsDTOFactory(
            user_id=user_id)
        contact_details = storage_dtos.UserContactDetailsDTOFactory(
            whatsapp_mobile_number="9988776655",
            whatsapp_mobile_country_code="91",
            i_want_to_receive_updates_in_whatsapp=True,
            have_whatsapp=False)

        user_account_storage_mock.is_user_id_exists.return_value = True
        user_profile_storage_mock.get_user_social_profile_details.return_value = \
            user_social_profile_details
        user_profile_storage_mock.get_user_professional_skills_details. \
            return_value = user_profession_skills

        guardian_details = interface_dtos.UserGuardianDetailsDTOFactory(
            user_id=user_id,
            first_name=user_guardian_details.first_name,
            last_name=user_guardian_details.last_name,
            relation=user_guardian_details.relation,
            other_relation=user_guardian_details.other_relation,
            job_role_id=user_guardian_details.job_role_id,
            job_role_name=user_guardian_details.job_role_name,
            other_job_role_name=user_guardian_details.other_job_role_name,
            email=user_guardian_details.email,
            country_code=user_guardian_details.country_code,
            phone_number=user_guardian_details.phone_number,
            have_whatsapp=user_guardian_details.have_whatsapp,
            whatsapp_mobile_country_code=user_guardian_details.whatsapp_mobile_country_code,
            whatsapp_mobile_number=user_guardian_details.whatsapp_mobile_number
        )
        profile_details = interface_dtos.ProfileDetailsDTOFactory(
            user_id=user_id,
            first_name=user_profile_details.first_name,
            last_name=user_profile_details.last_name,
            phone_number=user_profile_details.phone_number,
            country_code=user_profile_details.country_code,
            whatsapp_mobile_number=contact_details.whatsapp_mobile_number,
            whatsapp_mobile_country_code=contact_details.whatsapp_mobile_country_code,
            email=user_profile_details.email,
            date_of_birth=user_profile_details.date_of_birth,
            gender=user_profile_details.gender,
            preferred_languages=[],
            profile_pic_url=user_profile_details.profile_pic_url,
            cover_page_url=user_profile_details.cover_page_url,
            i_want_to_receive_updates_in_whatsapp=contact_details.i_want_to_receive_updates_in_whatsapp,
            have_whatsapp=contact_details.have_whatsapp,
            is_phone_number_verified=user_profile_details.is_phone_number_verified,
            is_email_verified=user_profile_details.is_email_verified
        )

        expected_response = interface_dtos.UserCompleteProfileDetailsDTOFactory(
            user_id=user_id,
            profile_details=profile_details,
            address_details=None,
            education_details=None,
            social_profile_details=[],
            professional_details=None,
            guardian_details=guardian_details
        )
        get_user_profile_along_with_contact_details_mock.return_value = [profile_details]
        get_user_address_details_mock.return_value = None
        get_user_education_details_mock.return_value = None
        get_user_professional_details_mock.return_value = None
        get_user_guardian_details_mock.return_value = user_guardian_details

        # Act
        actual_response = interactor.get_user_profile_complete_details(
            user_id=user_id)

        # Assert
        assert actual_response == expected_response
        get_user_guardian_details_mock.assert_called_once_with(
            user_id=user_id)

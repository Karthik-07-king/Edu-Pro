import datetime
import uuid
from unittest import mock

import freezegun
import pytest
from django.test import override_settings

from ib_users.constants import otp_verification_constants
from ib_users.tests.factories import storage_dtos as storage_dtos_factories
from ib_users.tests.factories.interactor_dtos import UserIdWiseCanUpdatePhoneNumberDetailsDTOFactory


class TestUpdateUserAccountPhoneNumberInteractor:

    @pytest.fixture
    def storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import\
            UserAccountsStorage
        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture
    def interactor(self, storage_mock):
        from ib_users.interactors\
            .update_user_account_phone_number_interactor \
            import UpdateUserAccountPhoneNumberInteractor
        return UpdateUserAccountPhoneNumberInteractor(storage_mock)

    @pytest.fixture
    def verify_through_otp_interactor_mock(self):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        return mock.create_autospec(VerifyThroughOTPInteractor)

    @freezegun.freeze_time('2022-03-02')
    @override_settings(
        UPDATE_USER_ACCOUNT_PHONE_NUMBER_INTERVAL_IN_DAYS=100
    )
    def test_when_user_already_has_verified_update_log_without_interval_completion(
            self, interactor, storage_mock):
        user_id = "8d7a8d7a-8d7a-8d7a-8d7a-8d7a8d7a8d7a"
        user_account_update_phone_log_with_creation_details_dto = \
            storage_dtos_factories.UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                user_id=user_id,
                new_phone_number="1234567890",
                new_country_code="+91",
                old_phone_number="1234567890",
                old_country_code="+91",
                verification_status=otp_verification_constants.
                VerificationStatus.VERIFIED.value,
                verified_datetime=datetime.datetime(2022, 2, 1))
        user_can_update_phone_number_details_dto = UserIdWiseCanUpdatePhoneNumberDetailsDTOFactory(
            user_id=user_id,
            can_update_phone_number=False,
            latest_phone_number_update_datetime=datetime.datetime(2022, 2, 1),
            can_update_phone_number_after_datetime=datetime.datetime(2022, 5, 12))

        storage_mock.get_users_phone_number_update_logs.return_value = [
            user_account_update_phone_log_with_creation_details_dto]

        actual_response = interactor.get_is_users_can_update_phone_number_details(
            user_ids=[user_id])

        storage_mock.get_users_phone_number_update_logs.assert_called_once_with(
            user_ids=[user_id],
            verification_status=otp_verification_constants.VerificationStatus.VERIFIED.value)
        assert actual_response == [user_can_update_phone_number_details_dto]

    @freezegun.freeze_time('2022-03-03')
    @override_settings(
        UPDATE_USER_ACCOUNT_PHONE_NUMBER_INTERVAL_IN_DAYS=1
    )
    def test_when_user_already_has_verified_update_log_and_completed_interval(
            self, interactor, storage_mock):
        user_id = "8d7a8d7a-8d7a-8d7a-8d7a-8d7a8d7a8d7a"
        user_account_update_phone_log_with_creation_details_dto = \
            storage_dtos_factories.UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                user_id=user_id,
                new_phone_number="1234567890",
                new_country_code="+91",
                old_phone_number="1234567890",
                old_country_code="+91",
                verification_status=otp_verification_constants.VerificationStatus.VERIFIED.value,
                verified_datetime=datetime.datetime(2022, 2, 1))
        user_can_update_phone_number_details_dto = UserIdWiseCanUpdatePhoneNumberDetailsDTOFactory(
            user_id=user_id,
            can_update_phone_number=True,
            latest_phone_number_update_datetime=datetime.datetime(2022, 2, 1),
            can_update_phone_number_after_datetime=None)

        storage_mock.get_users_phone_number_update_logs.return_value = [
            user_account_update_phone_log_with_creation_details_dto]

        actual_response = interactor.get_is_users_can_update_phone_number_details(
            user_ids=[user_id])

        assert actual_response == [user_can_update_phone_number_details_dto]

    @freezegun.freeze_time('2022-03-03')
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus
                             .VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value
    ])
    def test_when_user_already_has_verified_update_log_and_not_verified(
            self, verification_status, interactor, storage_mock):
        user_id = "8d7a8d7a-8d7a-8d7a-8d7a-8d7a8d7a8d7a"
        user_account_update_phone_log_with_creation_details_dto = \
            storage_dtos_factories.UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                user_id=user_id,
                new_phone_number="1234567890",
                new_country_code="+91",
                old_phone_number="1234567890",
                old_country_code="+91",
                verification_status=verification_status,
                verified_datetime=datetime.datetime(2022, 2, 1))
        user_can_update_phone_number_details_dto = UserIdWiseCanUpdatePhoneNumberDetailsDTOFactory(
            user_id=user_id,
            can_update_phone_number=True,
            latest_phone_number_update_datetime=datetime.datetime(2022, 2, 1),
            can_update_phone_number_after_datetime=None)

        storage_mock.get_users_phone_number_update_logs.return_value = [
            user_account_update_phone_log_with_creation_details_dto]

        actual_response = interactor.get_is_users_can_update_phone_number_details(
            user_ids=[user_id])

        assert actual_response == [user_can_update_phone_number_details_dto]

    @freezegun.freeze_time('2022-03-03')
    def test_when_user_does_not_have_any_update_logs(
            self, interactor, storage_mock):
        user_id = "8d7a8d7a-8d7a-8d7a-8d7a-8d7a8d7a8d7a"
        user_account_update_phone_log_with_creation_details_dto = []
        user_can_update_phone_number_details_dto = UserIdWiseCanUpdatePhoneNumberDetailsDTOFactory(
            user_id=user_id,
            can_update_phone_number=True,
            latest_phone_number_update_datetime=None,
            can_update_phone_number_after_datetime=None)

        storage_mock.get_users_phone_number_update_logs.return_value = \
            user_account_update_phone_log_with_creation_details_dto

        actual_response = interactor.get_is_users_can_update_phone_number_details(
            user_ids=[user_id])

        assert actual_response == [user_can_update_phone_number_details_dto]

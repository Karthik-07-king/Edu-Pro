from unittest.mock import create_autospec

import pytest

from ib_users.constants.custom_exception_messages import INVALID_FB_ACCESS_TOKEN
from ib_users.interactors.exceptions.user_credentials_exceptions import AccountWithEmailDoesntExistException
from ib_users.interactors.user_profile_interactor import CreateUserProfileDTO
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestCreateUserProfileFromSocialAccount:

    @pytest.fixture
    def setup(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountDTO
        from ib_users.interactors.third_party.social_account import \
            SocialAccount

        storage_mock = create_autospec(UserProfileStorage)
        fb_service = create_autospec(SocialAccount)
        storage_mock.does_user_exists.return_value = False

        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        accounts_storage_mock = create_autospec(UserAccountsStorage)
        accounts_storage_mock.get_user_account_details.return_value = \
            UserAccountDTO(user_id="1")

        return storage_mock, accounts_storage_mock, fb_service

    def test_create_profile_raises_invalid_social_access_token(
            self, setup):
        # Arrange
        storage_mock, accounts_storage_mock, fb_service = setup
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=None)
        user_id = "1"
        access_token = "access_token"
        fb_service.get_user_name_from_social_account.side_effect = \
            CustomException.from_exception_message_DTO(
                INVALID_FB_ACCESS_TOKEN)

        # Act
        with pytest.raises(CustomException) as invalid_social_access_token:
            user_profile_interactor. \
                create_user_profile_from_social_account(
                    user_id=user_id, social_sdk=fb_service,
                    accounts_storage=accounts_storage_mock, access_token=access_token)

        # Assert
        TestsUtils.assert_custom_exception(INVALID_FB_ACCESS_TOKEN, invalid_social_access_token)

    def test_with_valid_details_create_user_profile(
            self, setup):
        # Arrange
        storage_mock, accounts_storage_mock, fb_service = setup
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=None)
        user_id = "1"
        access_token = "access_token"
        email = "email@email.com"
        fb_service.get_user_name_from_social_account.return_value = "user_name"
        fb_service.get_email_from_social_account.return_value = email
        accounts_storage_mock.get_existing_user_id_given_email.side_effect = \
            AccountWithEmailDoesntExistException
        create_profile_data = CreateUserProfileDTO(
            email=email,
            name="user_name",
            is_email_verified=True
        )

        # Act
        user_profile_interactor. \
            create_user_profile_from_social_account(
            user_id=user_id, social_sdk=fb_service,
            accounts_storage=accounts_storage_mock, access_token=access_token)

        # Assert
        accounts_storage_mock.update_email.assert_called_once_with(user_id=user_id, email=email)
        accounts_storage_mock.get_user_account_details.assert_called_once_with(user_id)
        accounts_storage_mock.get_existing_user_id_given_email.assert_called_once_with('email@email.com')
        storage_mock.create_user_profile.assert_called_once_with(
            create_profile_data, account_id=user_id)

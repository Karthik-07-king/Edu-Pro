import pytest
import mock
from django.test import override_settings


class TestValidateUserLoginDevicesDetailsInteractor:
    @pytest.fixture()
    def storage_mock(self):
        from ib_users.interactors.storages.user_login_device_details_storage import \
            UserLoginDeviceDetailsStorage
        return mock.create_autospec(UserLoginDeviceDetailsStorage)

    @pytest.fixture()
    def interactor(self, storage_mock):
        from ib_users.interactors.login.validate_user_login_device_details import \
            ValidateUserLoginDevicesDetailsInteractor
        interactor = ValidateUserLoginDevicesDetailsInteractor(
            user_login_devices_storage=storage_mock)
        return interactor

    @override_settings(RESTRICT_USER_TO_SINGLE_LOGIN_SESSION="FALSE")
    @override_settings(ENABLE_USER_DEVICES_INFORMATION=True)
    def test_devices_id_not_given_when_enable_login_device_logs_raises_exception(
            self, interactor):
        # arrange
        from ib_users.exceptions.devices_exceptions import \
            DeviceDetailsShouldBeGivenException

        device_id = ""

        # act
        with pytest.raises(DeviceDetailsShouldBeGivenException):
            interactor.validate_users_login_devices(device_id=device_id)

    @override_settings(RESTRICT_USER_TO_SINGLE_LOGIN_SESSION="FALSE")
    @override_settings(ENABLE_USER_DEVICES_INFORMATION=True)
    def test_given_device_id_should_not_raise_exception(self, interactor):
        # arrange
        device_id = "1"

        # act
        interactor.validate_users_login_devices(device_id=device_id)

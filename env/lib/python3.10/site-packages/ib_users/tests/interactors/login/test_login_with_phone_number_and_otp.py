import uuid

import pytest
from mock import create_autospec

from ib_users.constants.custom_exception_messages import \
    DEVICE_DETAILS_SHOULD_BE_GIVEN
from ib_users.exceptions import devices_exceptions
from ib_users.exceptions.custom_exception_constants import INVALID_OTP, \
    NOT_REGISTERED_USER, INVALID_PHONE_NUMBER
from ib_users.interactors.login.login_with_phone_number_and_otp import \
    LoginWithPhoneNumberAndOTP, PhoneNumberAndOTPDTO
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage, PhoneNumberDTO
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils
from ib_users.validators.base_validator import CustomException


class TestsLoginWithPhoneNumberAndOTP:

    @pytest.fixture()
    def validate_user_login_devices_details_mocker(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            validate_user_login_devices_details_mock
        return validate_user_login_devices_details_mock(mocker=mocker)

    @pytest.mark.parametrize("phone_number_and_otp_dto",
                             [PhoneNumberAndOTPDTO(
                                 PhoneNumberDTO("+91", "454656"), "098"),
                                 PhoneNumberAndOTPDTO(
                                     PhoneNumberDTO("+32", "39793179319021313"),
                                     "098"),
                                 PhoneNumberAndOTPDTO(
                                     PhoneNumberDTO("+32", "wq21"), "098")])
    def test_login_with_invalid_phone_number(self, phone_number_and_otp_dto):
        phone_number_validator = create_autospec(PhoneNumberValidator)
        phone_number_validator.validate.side_effect = \
            CustomException.from_exception_message_DTO(INVALID_PHONE_NUMBER)

        self._init_interactor(phone_number_and_otp_dto.phone_number_dto,
                              phone_number_and_otp_dto.otp,
                              phone_number_validator)
        LoginTestsUtils.login_with_invalid_login_id(
            self.login_interactor, self.login_dto, INVALID_PHONE_NUMBER, "Device1")

        phone_number_validator.validate.assert_called_once()

    @pytest.mark.parametrize("otp, exception_message", [
        ("we", INVALID_OTP),
        ("9" * 5, INVALID_OTP),
        ("1212a" * 15, INVALID_OTP)])
    def test_login_with_valid_phone_number_and_invalid_otp(self, otp,
                                                           exception_message):
        otp_service = create_autospec(OTPService)
        otp_service.validate_otp.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)

        self._init_interactor(PhoneNumberDTO("+91", "9876543210"), otp,
                              otp_service=otp_service)
        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(
            self.login_interactor, self.login_dto, exception_message, "Device1")

    @pytest.mark.parametrize("phone_number_and_otp_dto",
                             [PhoneNumberAndOTPDTO(
                                 PhoneNumberDTO("+91", "454656"), "098"),
                                 PhoneNumberAndOTPDTO(
                                     PhoneNumberDTO("+32", "39793179319021313"),
                                     "098"),
                                 PhoneNumberAndOTPDTO(
                                     PhoneNumberDTO("+32", "wq21"), "098")])
    def test_login_with_invalid_phone_number(self, phone_number_and_otp_dto):
        phone_number_validator = create_autospec(PhoneNumberValidator)
        phone_number_validator.validate.side_effect = \
            CustomException.from_exception_message_DTO(INVALID_PHONE_NUMBER)

        self._init_interactor(phone_number_and_otp_dto.phone_number_dto,
                              phone_number_and_otp_dto.otp,
                              phone_number_validator)
        LoginTestsUtils.login_with_invalid_login_id(
            self.login_interactor, self.login_dto, INVALID_PHONE_NUMBER, "Device1")

        phone_number_validator.validate.assert_called_once()

    @pytest.mark.parametrize("otp, exception_message", [
        ("we", INVALID_OTP),
        ("9" * 5, INVALID_OTP),
        ("1212a" * 15, INVALID_OTP)])
    def test_login_with_valid_phone_number_and_invalid_otp(self, otp,
                                                           exception_message):
        otp_service = create_autospec(OTPService)
        otp_service.validate_otp_send_to_phone_number.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)

        self._init_interactor(PhoneNumberDTO("+91", "9876543210"), otp,
                              otp_service=otp_service)
        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(
            self.login_interactor, self.login_dto, exception_message, "Device1")

    def test_login_with_valid_credentials_and_not_registered_phone_number(
            self):
        self.init_interactor_with_side_effects(
            PhoneNumberDTO("+91", "9876543210"), "151515", NOT_REGISTERED_USER)
        LoginTestsUtils.login_with_valid_credentials_and_not_registered_login_id(
            self.login_interactor, self.login_dto, "Device1")

    def test_login_with_correct_credentials(self, validate_user_login_devices_details_mocker):
        user_id = str(uuid.uuid4())
        self.init_interactor_with_return_value(
            PhoneNumberDTO("+91", "9876543210"), "151515", user_id)
        LoginTestsUtils.login_with_correct_credentials(
            self.login_interactor, self.login_dto, user_id, "Device1")
        validate_user_login_devices_details_mocker.return_value = None

    def test_login_with_deactivated_user(self):
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self._init_interactor(phone_number_dto, "123453")
        LoginTestsUtils.login_with_deactivated_user(
            self.login_interactor, self.login_dto, "Device1")

    def test_login_invalid_device_details_and_max_login_device_exceeds_exception(
            self, validate_user_login_devices_details_mocker):
        user_id = str(uuid.uuid4())
        self.init_interactor_with_return_value(
            PhoneNumberDTO("+91", "9876543210"), "151515", user_id)
        validate_user_login_devices_details_mocker.side_effect = \
            devices_exceptions.DeviceDetailsShouldBeGivenException(
                DEVICE_DETAILS_SHOULD_BE_GIVEN.message, DEVICE_DETAILS_SHOULD_BE_GIVEN.code)

        with pytest.raises(devices_exceptions.DeviceDetailsShouldBeGivenException):
            self.login_interactor.get_user_id_for_given_login_data(
                self.login_dto, "Device1")

        validate_user_login_devices_details_mocker.assert_called_once_with(
            device_id="Device1")

    def _init_interactor(self, email, otp, phone_number_validator=None,
                         otp_service=None):
        storage_mock = create_autospec(UserAccountsStorage)

        if otp_service is None:
            otp_service = create_autospec(OTPService)
        else:
            otp_service = otp_service
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        if phone_number_validator is None:
            phone_number_validator = create_autospec(PhoneNumberValidator)
        else:
            phone_number_validator = phone_number_validator

        self.login_interactor = LoginWithPhoneNumberAndOTP(
            storage_mock, phone_number_validator=phone_number_validator,
            otp_service=otp_service, user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = PhoneNumberAndOTPDTO(email, otp)

    def init_interactor_with_side_effects(self, email, otp, exception_message):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_phone_number.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)
        otp_service = create_autospec(OTPService)
        phone_number_validator = create_autospec(PhoneNumberValidator)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        self.login_interactor = LoginWithPhoneNumberAndOTP(
            storage_mock, phone_number_validator=phone_number_validator,
            otp_service=otp_service, user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = PhoneNumberAndOTPDTO(email, otp)

    def init_interactor_with_return_value(self, email, otp, return_value):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_phone_number.return_value = return_value
        otp_service = create_autospec(OTPService)
        phone_number_validator = create_autospec(PhoneNumberValidator)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        self.login_interactor = LoginWithPhoneNumberAndOTP(
            storage_mock, phone_number_validator=phone_number_validator,
            otp_service=otp_service, user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = PhoneNumberAndOTPDTO(email, otp)

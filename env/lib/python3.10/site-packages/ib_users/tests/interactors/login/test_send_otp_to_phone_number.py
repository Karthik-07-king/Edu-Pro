import uuid

import pytest
from mock import create_autospec
from django.conf import settings

from ib_users.constants.otp_constants import \
    OTPMessageFormatConstants
from ib_users.exceptions.custom_exception_constants import \
    INVALID_PHONE_NUMBER, NOT_REGISTERED_USER, USER_ACCOUNT_IS_DEACTIVATED
from ib_users.interactors import SendOTPToUserGivenPhoneNumber
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_accounts_storage import \
    UserEmailAndPhoneNumberDTO, PhoneNumberDTO
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException
from django.test import override_settings
from ib_users.constants.otp_verification_constants import SendOTPThrough


@pytest.mark.parametrize("phone_number_dto",
                         [PhoneNumberDTO("+", "9876543210"),
                          PhoneNumberDTO("", "9876543210"),
                          PhoneNumberDTO("+91", ""),
                          PhoneNumberDTO("", ""),
                          PhoneNumberDTO("+91", "95058924"),
                          PhoneNumberDTO("+91", "950589275784")])
def test_send_otp_to_invalid_phone_number(phone_number_dto):
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)
    phone_number_validator = create_autospec(PhoneNumberValidator)
    phone_number_validator.validate.side_effect = \
        CustomException.from_exception_message_DTO(INVALID_PHONE_NUMBER)
    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator)

    with pytest.raises(CustomException) as invalid_email_exception:
        send_otp_to_user_interactor.send_otp(
            phone_number_dto=phone_number_dto, send_otp_through=SendOTPThrough.SMS)

    TestsUtils.assert_custom_exception(INVALID_PHONE_NUMBER,
                                       invalid_email_exception)


@pytest.mark.parametrize("phone_number_dto",
                         [PhoneNumberDTO("+91", "9876543210"),
                          PhoneNumberDTO("+91", "1111111111")])
def test_send_otp_to_valid_but_not_registered_phone_number(phone_number_dto):
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)
    phone_number_validator = create_autospec(PhoneNumberValidator)

    storage_mock.get_user_details_to_send_otp_given_phone_number.side_effect = \
        CustomException.from_exception_message_DTO(NOT_REGISTERED_USER)

    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator)

    with pytest.raises(CustomException) as not_registered_exception:
        send_otp_to_user_interactor.send_otp(
            phone_number_dto=phone_number_dto, send_otp_through=SendOTPThrough.SM)

    TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                       not_registered_exception)


@pytest.mark.parametrize("phone_number_dto",
                         [PhoneNumberDTO("+", "9876543210"),
                          PhoneNumberDTO("", "9876543210"),
                          PhoneNumberDTO("+91", ""),
                          PhoneNumberDTO("", ""),
                          PhoneNumberDTO("+91", "95058924"),
                          PhoneNumberDTO("+91", "950589275784")])
def test_send_otp_to_invalid_phone_number(phone_number_dto):
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)
    phone_number_validator = create_autospec(PhoneNumberValidator)
    phone_number_validator.validate.side_effect = \
        CustomException.from_exception_message_DTO(INVALID_PHONE_NUMBER)
    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator)

    with pytest.raises(CustomException) as invalid_email_exception:
        send_otp_to_user_interactor.send_otp(
            phone_number_dto=phone_number_dto, send_otp_through=SendOTPThrough.SMS)

    TestsUtils.assert_custom_exception(INVALID_PHONE_NUMBER,
                                       invalid_email_exception)


@pytest.mark.parametrize("phone_number_dto",
                         [PhoneNumberDTO("+91", "9876543210"),
                          PhoneNumberDTO("+91", "1111111111")])
def test_send_otp_to_valid_but_not_registered_phone_number(phone_number_dto):
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)
    phone_number_validator = create_autospec(PhoneNumberValidator)

    storage_mock.get_user_details_to_send_otp_given_phone_number.side_effect = \
        CustomException.from_exception_message_DTO(NOT_REGISTERED_USER)
    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator)

    with pytest.raises(CustomException) as not_registered_exception:
        send_otp_to_user_interactor.send_otp(
            phone_number_dto=phone_number_dto, send_otp_through=SendOTPThrough.SMS)

    TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                       not_registered_exception)


def test_send_otp_to_user_with_valid_email_and_phone_number():
    call_template = settings.LOGIN_OTP_CALL_TEMPLATE
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(str(uuid.uuid4()),
                                                             "developer@gmail.com",
                                                             PhoneNumberDTO(
                                                                 "+91",
                                                                 "9876543210"))
    storage_mock.get_user_details_to_send_otp_given_phone_number.return_value = user_email_phone_number_dto

    phone_number_validator = create_autospec(PhoneNumberValidator)
    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator)

    send_otp_to_user_interactor.send_otp(
        phone_number_dto=user_email_phone_number_dto.phone_number,
        send_otp_through=SendOTPThrough.SMS)

    storage_mock.get_user_details_to_send_otp_given_phone_number.assert_called_once()
    otp_service.send_otp_to_user_email.assert_called_once_with(
        email=user_email_phone_number_dto.email,
        template=OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        subject=OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN)
    otp_service.send_otp_to_user_phone_number.assert_called_once_with(
        phone_number=user_email_phone_number_dto.phone_number,
        template=OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        send_otp_through=SendOTPThrough.SMS,
        call_template=call_template)


def test_send_otp_to_user_with_valid_phone_number_and_empty_email():
    phone_number = PhoneNumberDTO("+91", "9876543210")
    email = ""
    otp_service = create_autospec(OTPService)
    call_template = settings.LOGIN_OTP_CALL_TEMPLATE

    storage_mock = create_autospec(UserAccountsStorage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()),
        "",
        phone_number)
    storage_mock.get_user_details_to_send_otp_given_phone_number.return_value = user_email_phone_number_dto
    phone_number_validator = create_autospec(PhoneNumberValidator)

    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator,)

    send_otp_to_user_interactor.send_otp(
        phone_number_dto=user_email_phone_number_dto.phone_number,
        send_otp_through=SendOTPThrough.SMS)

    storage_mock.get_user_details_to_send_otp_given_phone_number.assert_called_once()
    otp_service.send_otp_to_user.assert_not_called()
    otp_service.send_otp_to_user_phone_number.assert_called_once_with(
        user_email_phone_number_dto.phone_number,
        OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        send_otp_through=SendOTPThrough.SMS,
        call_template=call_template)


def test_send_otp_to_inactive_user():
    phone_number = PhoneNumberDTO("+91", "9876543210")
    email = ""
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_user_account_active.return_value = False

    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()), "", phone_number
    )
    storage_mock.get_user_details_to_send_otp_given_phone_number.return_value \
        = user_email_phone_number_dto

    phone_number_validator = create_autospec(PhoneNumberValidator)
    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator)

    with pytest.raises(CustomException) as err:
        send_otp_to_user_interactor.send_otp(
            phone_number_dto=user_email_phone_number_dto.phone_number,
            send_otp_through=SendOTPThrough.SMS)

        assert err.value.message == USER_ACCOUNT_IS_DEACTIVATED.message
        assert err.value.code == USER_ACCOUNT_IS_DEACTIVATED.code


@override_settings(USE_TWILIO_FOR_INTERNATIONAL_NUMBERS="true",
                   TWILIO_LOGIN_TEMPLATE_ID="TWILIO_LOGIN_TEMPLATE_ID")
@pytest.mark.django_db
def test_given_international_country_code_then_send_msg_using_twilio():
    # Arrange
    from ib_users.models import UserAccount
    
    phone_number = PhoneNumberDTO("+93", "9876543210")
    otp_service = create_autospec(OTPService)
    template = "template"
    twilio_login_template_id = "TWILIO_LOGIN_TEMPLATE_ID"
    call_template = settings.LOGIN_OTP_CALL_TEMPLATE

    storage_mock = create_autospec(UserAccountsStorage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        user_id=str(uuid.uuid4()), email="", phone_number=phone_number)
    user_account_obj = UserAccount.objects.create(
        user_id=user_email_phone_number_dto.user_id,
        is_active=True)
    
    storage_mock.get_user_details_to_send_otp_given_phone_number.return_value = \
        user_email_phone_number_dto
    storage_mock.get_user_given_phone_number.return_value = user_account_obj
    storage_mock.get_message_template_string.return_value = template
    
    phone_number_validator = create_autospec(PhoneNumberValidator)
    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock, otp_service=otp_service,
        phone_number_validator=phone_number_validator)
    
    # Act
    send_otp_to_user_interactor.send_otp(
        phone_number_dto=user_email_phone_number_dto.phone_number,
        send_otp_through=SendOTPThrough.SMS)
    
    # Assert
    storage_mock.get_message_template_string.assert_called_once_with(
        message_template_id=twilio_login_template_id)
    otp_service.send_otp_to_user_phone_number.assert_called_once_with(
        user_email_phone_number_dto.phone_number, template,
        send_otp_through=SendOTPThrough.SMS,
        call_template=call_template)


@override_settings(USE_TWILIO_FOR_INTERNATIONAL_NUMBERS="true",
                   TWILIO_LOGIN_TEMPLATE_ID="TWILIO_LOGIN_TEMPLATE_ID")
@pytest.mark.django_db
def test_send_otp_to_user_with_valid_email_and_international_phone_number():
    # Arrange
    from ib_users.models import UserAccount
    otp_service = create_autospec(OTPService)
    call_template = settings.LOGIN_OTP_CALL_TEMPLATE

    storage_mock = create_autospec(UserAccountsStorage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()), "developer@gmail.com", PhoneNumberDTO("+92", "9876543210"))
    user_account_obj = UserAccount.objects.create(
        user_id=user_email_phone_number_dto.user_id,
        is_active=True)
    template = "template"
    
    storage_mock.get_user_details_to_send_otp_given_phone_number.return_value = user_email_phone_number_dto
    storage_mock.get_user_given_phone_number.return_value = user_account_obj
    storage_mock.get_message_template_string.return_value = template
    phone_number_validator = create_autospec(PhoneNumberValidator)
    send_otp_to_user_interactor = SendOTPToUserGivenPhoneNumber(
        storage=storage_mock,
        otp_service=otp_service,
        phone_number_validator=phone_number_validator)

    # Act
    send_otp_to_user_interactor.send_otp(
        phone_number_dto=user_email_phone_number_dto.phone_number,
        send_otp_through=SendOTPThrough.SMS)
    
    # Assert
    storage_mock.get_user_details_to_send_otp_given_phone_number.assert_called_once()
    otp_service.send_otp_to_user_email.assert_called_once_with(
        email=user_email_phone_number_dto.email,
        template=OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        subject=OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN)
    otp_service.send_otp_to_user_phone_number.assert_called_once_with(
        phone_number=user_email_phone_number_dto.phone_number,
        template=template, send_otp_through=SendOTPThrough.SMS,
        call_template=call_template)

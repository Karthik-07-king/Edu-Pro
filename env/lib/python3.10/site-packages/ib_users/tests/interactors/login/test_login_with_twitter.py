import uuid

import pytest
from mock import create_autospec

from ib_users.constants.custom_exception_messages import \
    DEVICE_DETAILS_SHOULD_BE_GIVEN
from ib_users.exceptions import devices_exceptions
from ib_users.exceptions.custom_exception_constants import \
    INVALID_TWITTER_ACCESS_TOKEN, TWITTER_NOT_LINKED
from ib_users.interactors import LoginWithTwitter
from ib_users.interactors.login.login_with_twitter import TwitterLoginDTO
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.interactors.third_party.social_account import SocialAccount
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestsLoginWithTwitter:

    @pytest.fixture()
    def validate_user_login_devices_details_mocker(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            validate_user_login_devices_details_mock
        return validate_user_login_devices_details_mock(mocker=mocker)

    def test_login_with_malformed_twitter_access_token(self):
        twitter_service = create_autospec(SocialAccount)
        twitter_service.get_social_id.side_effect = \
            CustomException.from_exception_message_DTO(
                INVALID_TWITTER_ACCESS_TOKEN)

        self._init_interactor("twitter_access_token", "twitter_secret_token", twitter_service)

        LoginTestsUtils.login_with_invalid_login_id(
            self.login_interactor, self.login_dto, INVALID_TWITTER_ACCESS_TOKEN,
            "Device1")
        twitter_service.get_social_id.assert_called_once()

    @pytest.mark.parametrize("access_token, secret_token", [
        ("twitter_access_token", "twitter_secret_token"),
        ("access_token", "secret_token")])
    def test_login_with_not_registered_user(self, access_token, secret_token):
        self.init_interactor_with_side_effects(access_token, secret_token, TWITTER_NOT_LINKED)

        with pytest.raises(CustomException) as not_registered_user:
            self.login_interactor.get_user_id_for_given_login_data(
                self.login_dto, "Device1")

        TestsUtils.assert_custom_exception(TWITTER_NOT_LINKED, not_registered_user)

    def test_login_with_correct_credentials(self, validate_user_login_devices_details_mocker):
        user_id = str(uuid.uuid4())
        self.init_interactor_with_return_value("twitter_access_token", "twitter_secret_token", user_id)
        validate_user_login_devices_details_mocker.return_value = None
        LoginTestsUtils.login_with_correct_credentials(
            self.login_interactor, self.login_dto, user_id, "Device1")

    def test_login_with_deactivated_user(self):
        self._init_interactor("twitter_access_token", "twitter_secret_token")
        LoginTestsUtils.login_with_deactivated_user(
            self.login_interactor, self.login_dto, "Device1")

    def test_login_invalid_device_details_raises_exception(
            self, validate_user_login_devices_details_mocker):
        user_id = str(uuid.uuid4())

        self.init_interactor_with_return_value(
            "twitter_access_token", "twitter_secret_token", user_id)
        validate_user_login_devices_details_mocker.side_effect = devices_exceptions.DeviceDetailsShouldBeGivenException(
            DEVICE_DETAILS_SHOULD_BE_GIVEN.message, DEVICE_DETAILS_SHOULD_BE_GIVEN.code)

        with pytest.raises(devices_exceptions.DeviceDetailsShouldBeGivenException):
            self.login_interactor.get_user_id_for_given_login_data(
                self.login_dto, "Device1")

        validate_user_login_devices_details_mocker.assert_called_once_with(
            device_id="Device1")

    def _init_interactor(self, access_token, secret_token, social_login_service=None):
        storage_mock = create_autospec(UserSocialAccountsStorage)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        if social_login_service is None:
            social_login_service = create_autospec(SocialAccount)
        else:
            social_login_service = social_login_service

        self.login_interactor = LoginWithTwitter(
            storage_mock, twitter_service=social_login_service,
            user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = TwitterLoginDTO(access_token, secret_token)

    def init_interactor_with_side_effects(self, access_token, secret_token, exception_message):
        storage_mock = create_autospec(UserSocialAccountsStorage)
        storage_mock.get_user_id_given_twitter_social_id.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)
        social_login_service = create_autospec(SocialAccount)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        self.login_interactor = LoginWithTwitter(
            storage_mock, twitter_service=social_login_service,
            user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = TwitterLoginDTO(access_token, secret_token)

    def init_interactor_with_return_value(
            self, access_token, secret_token, return_value):
        storage_mock = create_autospec(UserSocialAccountsStorage)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        storage_mock.get_user_id_given_twitter_social_id.return_value = return_value
        social_login_service = create_autospec(SocialAccount)

        self.login_interactor = LoginWithTwitter(
            storage_mock, twitter_service=social_login_service,
            user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = TwitterLoginDTO(access_token, secret_token)

import uuid

import pytest
from mock import create_autospec

from ib_users.constants.custom_exception_messages import \
    DEVICE_DETAILS_SHOULD_BE_GIVEN
from ib_users.exceptions import devices_exceptions
from ib_users.exceptions.custom_exception_constants import \
    USERNAME_CAN_NOT_BE_EMPTY, USER_MAX_NAME_LENGTH_IS, \
    USER_NAME_SPECIAL_CHARACTERS, PASSWORD_MIN_LENGTH_IS, \
    PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER, NOT_REGISTERED_USER, \
    INCORRECT_PASSWORD
from ib_users.interactors import LoginWithUsername
from ib_users.interactors.storages import UserAccountsStorage, UserNameAndPasswordDTO
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils
from ib_users.validators.base_validator import \
    CustomException


class TestsLoginWithUsername:

    @pytest.fixture()
    def validate_user_login_devices_details_mocker(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            validate_user_login_devices_details_mock
        return validate_user_login_devices_details_mock(mocker=mocker)

    @pytest.mark.parametrize("username,exception_message", [
        ("", USERNAME_CAN_NOT_BE_EMPTY),
        ("a" * 51, USER_MAX_NAME_LENGTH_IS),
        ("abU" * 50, USER_MAX_NAME_LENGTH_IS),
        ("jac&k^al%", USER_NAME_SPECIAL_CHARACTERS),
        ("jac&", USER_NAME_SPECIAL_CHARACTERS),
        ("jack^al", USER_NAME_SPECIAL_CHARACTERS)])
    def test_login_with_invalid_login_id(self, username, exception_message):
        self._init_interactor(username, "password@#")
        LoginTestsUtils.login_with_invalid_login_id(
            self.login_interactor, self.login_dto, exception_message, "Device1")

    @pytest.mark.parametrize("password,exception_message", [
        ("", PASSWORD_MIN_LENGTH_IS),
        ("a" * 7, PASSWORD_MIN_LENGTH_IS),
        ("abU" * 15, PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER)])
    def test_login_with_valid_username_and_invalid_password(self, password, exception_message):
        self._init_interactor("usernamevalid", password)
        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(
            self.login_interactor, self.login_dto, exception_message, "Device1")

    def test_login_with_valid_credentials_and_not_registered_username(self):
        self._init_interactor_with_side_effects("usernamevalid", "password@#", NOT_REGISTERED_USER)
        LoginTestsUtils.login_with_valid_credentials_and_not_registered_login_id(
            self.login_interactor, self.login_dto, "Device1")

    def test_login_with_incorrect_password(self):
        self._init_interactor_with_side_effects("usernamevalid", "password@#", INCORRECT_PASSWORD)
        LoginTestsUtils.login_with_incorrect_password(
            self.login_interactor, self.login_dto, "Device1")

    def test_login_with_correct_credentials(self, validate_user_login_devices_details_mocker):
        user_id = str(uuid.uuid4())
        self._init_interactor_with_return_value("usernamevalid", "password@#", user_id)
        LoginTestsUtils.login_with_correct_credentials(
            self.login_interactor, self.login_dto, user_id, "Device1")
        validate_user_login_devices_details_mocker.return_value = None

    def test_login_with_deactivated_user(self):
        self._init_interactor("usernamevalid", "password@#")
        LoginTestsUtils.login_with_deactivated_user(
            self.login_interactor, self.login_dto, "Device1")

    def test_login_invalid_device_details_raises_exception(
            self, validate_user_login_devices_details_mocker):
        user_id = str(uuid.uuid4())

        self._init_interactor_with_return_value(
            "usernamevalid", "password@#", user_id,)
        validate_user_login_devices_details_mocker.side_effect = \
            devices_exceptions.DeviceDetailsShouldBeGivenException(
                DEVICE_DETAILS_SHOULD_BE_GIVEN.message, DEVICE_DETAILS_SHOULD_BE_GIVEN.code)

        with pytest.raises(devices_exceptions.DeviceDetailsShouldBeGivenException):
            self.login_interactor.get_user_id_for_given_login_data(
                self.login_dto, "Device1")

        validate_user_login_devices_details_mocker.assert_called_once_with(
            device_id="Device1")

    def _init_interactor(self, username, password):
        self.storage_mock = create_autospec(UserAccountsStorage)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        self.login_interactor = LoginWithUsername(
            self.storage_mock, user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = UserNameAndPasswordDTO(username, password)

    def _init_interactor_with_side_effects(self, username, password, exception_message):
        storage_mock = create_autospec(UserAccountsStorage)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        storage_mock.get_user_id_given_username_and_password.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)

        self.login_interactor = LoginWithUsername(
            storage_mock,
            user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = UserNameAndPasswordDTO(username, password)

    def _init_interactor_with_return_value(self, username, password, return_value):
        storage_mock = create_autospec(UserAccountsStorage)
        user_login_devices_storage_mock = create_autospec(
            UserLoginDeviceDetailsStorage)
        storage_mock.get_user_id_given_username_and_password.return_value = return_value

        self.login_interactor = LoginWithUsername(
            storage_mock, user_login_device_details_storage=user_login_devices_storage_mock)
        self.login_dto = UserNameAndPasswordDTO(username, password)

import uuid

import pytest
from mock import create_autospec
from ib_users.constants.custom_exception_messages import \
    DEVICE_DETAILS_SHOULD_BE_GIVEN

from ib_users.exceptions import devices_exceptions
from ib_users.exceptions.custom_exception_constants import \
    PASSWORD_MIN_LENGTH_IS, \
    PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER, NOT_REGISTERED_USER, \
    INVALID_PHONE_NUMBER, INCORRECT_PASSWORD
from ib_users.interactors.login.login_with_phone_number import \
    LoginWithPhoneNumber
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage, PhoneNumberAndPasswordDTO, \
    PhoneNumberDTO
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils
from ib_users.validators.base_validator import \
    CustomException


class TestsLoginWithPhoneNumber:

    @pytest.fixture()
    def validate_user_login_devices_details_mocker(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            validate_user_login_devices_details_mock
        return validate_user_login_devices_details_mock(mocker=mocker)

    @pytest.mark.parametrize("password,exception_message", [
        ("", PASSWORD_MIN_LENGTH_IS),
        ("a" * 7, PASSWORD_MIN_LENGTH_IS),
        ("abU" * 15, PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER)])
    def test_login_with_valid_phone_number_and_invalid_password(self, password,
                                                                exception_message):
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self._init_interactor(phone_number_dto, password)

        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(
            self.login_interactor, self.login_dto,
            exception_message, "Device1")

    def test_validation_invoke_on_phone_number_validator(self):
        phone_number_validator = create_autospec(PhoneNumberValidator)
        phone_number_validator.validate.side_effect = \
            CustomException.from_exception_message_DTO(INVALID_PHONE_NUMBER)
        phone_number_dto = PhoneNumberDTO("+91", "454656")

        self._init_interactor(phone_number_dto, "password@#",
                              phone_number_validator)
        LoginTestsUtils.login_with_invalid_login_id(self.login_interactor,
                                                    self.login_dto,
                                                    INVALID_PHONE_NUMBER, "Device1")
        phone_number_validator.validate.assert_called_once()

    @pytest.mark.parametrize("password,exception_message", [
        ("", PASSWORD_MIN_LENGTH_IS),
        ("a" * 7, PASSWORD_MIN_LENGTH_IS),
        ("abU" * 15, PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER)])
    def test_login_with_valid_phone_number_and_invalid_password(self, password,
                                                                exception_message):
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self._init_interactor(phone_number_dto, password)

        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(
            self.login_interactor, self.login_dto,
            exception_message, "Device1")

    def test_login_with_valid_credentials_and_not_registered_phone_number(
            self):
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self.init_interactor_with_side_effects(phone_number_dto, "password@#",
                                               NOT_REGISTERED_USER)

        LoginTestsUtils.login_with_valid_credentials_and_not_registered_login_id(
            self.login_interactor,
            self.login_dto, "Device1")

    def test_login_with_incorrect_password(self):
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self.init_interactor_with_side_effects(phone_number_dto, "password@#",
                                               INCORRECT_PASSWORD)
        LoginTestsUtils.login_with_incorrect_password(self.login_interactor,
                                                      self.login_dto, "Device1")

    def test_login_with_correct_credentials(self):
        user_id = str(uuid.uuid4())
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self.init_interactor_with_return_value(phone_number_dto, "password@#",
                                               user_id)
        LoginTestsUtils.login_with_correct_credentials(self.login_interactor,
                                                       self.login_dto, user_id,
                                                       "Device1")

    def test_login_with_deactivated_user(self):
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self._init_interactor(phone_number_dto, "password@#")
        LoginTestsUtils.login_with_deactivated_user(self.login_interactor,
                                                    self.login_dto, "Device1")

    def _init_interactor(self, email, password, phone_number_validator=None):
        storage_mock = create_autospec(UserAccountsStorage)
        user_login_device_details_storage = create_autospec(
            UserLoginDeviceDetailsStorage)
        if phone_number_validator is None:
            phone_number_validator = create_autospec(PhoneNumberValidator)
        else:
            phone_number_validator = phone_number_validator
        self.login_interactor = LoginWithPhoneNumber(
            storage_mock, phone_number_validator=phone_number_validator,
            user_login_device_details_storage=user_login_device_details_storage)
        self.login_dto = PhoneNumberAndPasswordDTO(email, password)

    def init_interactor_with_side_effects(self, email, password,
                                          exception_message):
        storage_mock = create_autospec(UserAccountsStorage)
        user_login_device_details_storage = create_autospec(
            UserLoginDeviceDetailsStorage)
        storage_mock.get_user_id_given_phone_number_and_password.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)
        phone_number_validator = create_autospec(PhoneNumberValidator)

        self.login_interactor = LoginWithPhoneNumber(
            storage_mock, phone_number_validator=phone_number_validator,
            user_login_device_details_storage=user_login_device_details_storage)
        self.login_dto = PhoneNumberAndPasswordDTO(email, password)

    def init_interactor_with_return_value(self, email, password, return_value):
        storage_mock = create_autospec(UserAccountsStorage)
        user_login_device_details_storage = create_autospec(
            UserLoginDeviceDetailsStorage)

        storage_mock.get_user_id_given_phone_number_and_password.return_value = return_value
        phone_number_validator = create_autospec(PhoneNumberValidator)

        self.login_interactor = LoginWithPhoneNumber(
            storage_mock, phone_number_validator=phone_number_validator,
            user_login_device_details_storage=user_login_device_details_storage)
        self.login_dto = PhoneNumberAndPasswordDTO(email, password)

    def test_login_invalid_device_details_and_max_login_device_exceeds_exception(
            self, validate_user_login_devices_details_mocker):
        user_id = str(uuid.uuid4())
        phone_number_dto = PhoneNumberDTO("+91", "9087654321")
        self.init_interactor_with_return_value(phone_number_dto, "password@#",
                                               user_id)
        validate_user_login_devices_details_mocker.side_effect = \
            devices_exceptions.DeviceDetailsShouldBeGivenException(
                DEVICE_DETAILS_SHOULD_BE_GIVEN.message, DEVICE_DETAILS_SHOULD_BE_GIVEN.code)

        with pytest.raises(devices_exceptions.DeviceDetailsShouldBeGivenException):
            self.login_interactor.get_user_id_for_given_login_data(
               self.login_dto, "Device1")

        validate_user_login_devices_details_mocker.assert_called_once_with(
            device_id="Device1")

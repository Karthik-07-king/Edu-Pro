import mock
import pytest
from django.test import override_settings

from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage, UserDeviceIdAndAccessTokenDTO, UserDeviceLoginDTO


class TestCreateUserLoginDeviceDetailsInteractor:
    @pytest.fixture()
    def storage_mock(self):
        return mock.create_autospec(UserLoginDeviceDetailsStorage)

    @pytest.fixture()
    def auth_token_generator_storage(self):
        from ib_users.interactors.third_party.user_tokens_generator import \
            UserAuthTokensGenerator
        return mock.create_autospec(UserAuthTokensGenerator)

    @pytest.fixture()
    def logout_in_devices_except_of_given_access_tokens_mocker(self, mocker):
        from ib_users.tests.common_fixtures.interactors import \
            logout_in_devices_except_of_given_access_tokens_mock
        return logout_in_devices_except_of_given_access_tokens_mock(mocker=mocker)

    @pytest.fixture()
    def interactor(self, storage_mock, auth_token_generator_storage):
        from ib_users.interactors.login.create_user_login_device_details import \
            CreateUserLoginDeviceDetailsInteractor
        interactor = CreateUserLoginDeviceDetailsInteractor(
            user_login_devices_storage=storage_mock,
            auth_token_generator_storage=auth_token_generator_storage)
        return interactor

    @override_settings(ENABLE_USER_DEVICES_INFORMATION=True)
    @override_settings(RESTRICT_USER_TO_SINGLE_LOGIN_SESSION='TRUE')
    def test_when_devices_details_not_given_raises_exception(self, interactor):
        # Arrange
        from ib_users.exceptions.devices_exceptions import \
            DeviceDetailsShouldBeGivenException
        user_id = "c303282d-f2e6-46ca-a04a-35d3d873712d"
        user_device_id_access_token_dto = UserDeviceIdAndAccessTokenDTO(
            device_id="", access_token="access_token")

        # Act
        with pytest.raises(DeviceDetailsShouldBeGivenException):
            interactor.create_user_login_device_details(
                user_id=user_id, device_access_token_dto=user_device_id_access_token_dto)

    @override_settings(ENABLE_USER_DEVICES_INFORMATION=True)
    def test_given_valid_details_to_create_both_user_login_devices_unique_devices(
            self, interactor, storage_mock):
        # Arrange
        user_id = "c303282d-f2e6-46ca-a04a-35d3d873712d"
        device_id = "device_id"
        access_token = "access_token"
        user_device_id_access_token_dto = UserDeviceIdAndAccessTokenDTO(
            device_id=device_id, access_token=access_token)
        user_device_login_dto = UserDeviceLoginDTO(
            user_id=user_id, access_token=access_token, device_id=device_id)
        storage_mock.get_user_unique_login_device_ids.return_value = []
        # Act
        interactor.create_user_login_device_details(
            user_id=user_id, device_access_token_dto=user_device_id_access_token_dto)

        # Assert
        storage_mock.get_or_create_user_unique_login_device.assert_called_once_with(
            user_id=user_id, device_id=device_id)

    @override_settings(ENABLE_USER_DEVICES_INFORMATION=True)
    def test_given_device_id_is_already_exists_then_we_should_not_create_login_device(
            self, interactor, storage_mock):
        # Arrange
        user_id = "c303282d-f2e6-46ca-a04a-35d3d873712d"
        device_id = "Device1"
        access_token = "access_token"
        user_device_id_access_token_dto = UserDeviceIdAndAccessTokenDTO(
            device_id=device_id, access_token=access_token)
        storage_mock.get_user_unique_login_device_ids.return_value = ["Device1"]
        # Act
        interactor.create_user_login_device_details(
            user_id=user_id, device_access_token_dto=user_device_id_access_token_dto)

        # Assert
        storage_mock.get_user_unique_login_device_ids.assert_called_once_with(
            user_id=user_id)
        storage_mock.get_or_create_user_unique_login_device.assert_not_called()

    @override_settings(ENABLE_USER_DEVICES_INFORMATION=False)
    def test_store_device_id_when_enable_device_information_as_false_and_device_id_given(
            self, interactor, storage_mock):
        # Arrange
        user_id = "c303282d-f2e6-46ca-a04a-35d3d873712d"
        device_id = "Device1"
        access_token = "access_token"
        user_device_id_access_token_dto = UserDeviceIdAndAccessTokenDTO(
            device_id=device_id, access_token=access_token)
        storage_mock.get_user_unique_login_device_ids.return_value = ["Device2"]

        # Act
        interactor.create_user_login_device_details(
            user_id=user_id, device_access_token_dto=user_device_id_access_token_dto)

        # Assert
        storage_mock.get_or_create_user_unique_login_device.assert_called_once_with(
            user_id=user_id, device_id=device_id)

    @override_settings(ENABLE_USER_DEVICES_INFORMATION=False)
    def test_enable_device_information_as_false_and_device_id_not_given_should_not_store(
            self, interactor, storage_mock):
        # Arrange
        user_id = "c303282d-f2e6-46ca-a04a-35d3d873712d"
        device_id = None
        access_token = "access_token"
        user_device_id_access_token_dto = UserDeviceIdAndAccessTokenDTO(
            device_id=device_id, access_token=access_token)
        storage_mock.get_user_unique_login_device_ids.return_value = ["Device2"]

        # Act
        interactor.create_user_login_device_details(
            user_id=user_id, device_access_token_dto=user_device_id_access_token_dto)

        # Assert
        storage_mock.get_or_create_user_unique_login_device.assert_not_called()

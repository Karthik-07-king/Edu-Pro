import uuid
from unittest import mock

import pytest
from django.conf import settings
from django.test import override_settings

from ib_users.constants import otp_verification_constants
from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.exceptions import user_account_exceptions
from ib_users.tests.common_fixtures.interactors import \
    get_send_otp_to_user_phone_number_mock
from ib_users.tests.factories import storage_dtos as storage_dtos_factories
from ib_users.validators import base_validator
from ib_users.interactors.DTOs import common_dtos as interactor_common_dtos


class TestSendOTPToUserUpdatedPhoneNumberInteractor:

    @pytest.fixture
    def storage_mock(self):
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage
        return mock.create_autospec(UserAccountsStorage)

    @pytest.fixture
    def interactor(self, storage_mock):
        from ib_users.interactors.login\
            .send_otp_to_user_updated_phone_number_interactor \
            import SendOTPToUserUpdatedPhoneNumber
        return SendOTPToUserUpdatedPhoneNumber(storage_mock)

    def test_when_user_account_does_not_exist(
            self, interactor, storage_mock):

        user_id = str(uuid.uuid4())
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS

        storage_mock.is_user_id_exists.return_value = False

        with pytest.raises(
                user_account_exceptions.InvalidUserIdException):
            interactor.send_otp_to_user_updated_phone_number(
                user_id, send_otp_through)

        storage_mock.is_user_id_exists.assert_called_once_with(user_id)
        storage_mock.is_user_account_active.assert_not_called()

    def test_when_user_account_is_not_active(
            self, interactor, storage_mock):

        user_id = str(uuid.uuid4())
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS

        storage_mock.is_user_id_exists.return_value = True
        storage_mock.is_user_account_active.return_value = False

        with pytest.raises(base_validator.CustomException):
            interactor.send_otp_to_user_updated_phone_number(
                user_id, send_otp_through)

        storage_mock.is_user_account_active.assert_called_once_with(user_id)
        storage_mock.get_user_latest_update_phone_number_log_details.\
            assert_not_called()

    def test_when_user_update_phone_number_log_not_exists(
            self, interactor, storage_mock, mocker):

        user_id = str(uuid.uuid4())
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS

        storage_mock.is_user_id_exists.return_value = True
        storage_mock.is_user_account_active.return_value = True
        storage_mock.get_user_latest_update_phone_number_log_details\
            .return_value = None

        send_otp_to_user_phone_number_mock = \
            get_send_otp_to_user_phone_number_mock(mocker)

        with pytest.raises(base_validator.CustomException):
            interactor.send_otp_to_user_updated_phone_number(
                user_id, send_otp_through)

        storage_mock.get_user_latest_update_phone_number_log_details.\
            assert_called_once_with(user_id)

        send_otp_to_user_phone_number_mock.assert_not_called()

    def test_when_user_update_phone_number_log_already_verified(
            self, interactor, storage_mock, mocker):

        user_id = str(uuid.uuid4())
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS

        user_account_update_phone_log_with_creation_details_dto = \
            storage_dtos_factories \
                .UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                    user_id=user_id,
                    verification_status=otp_verification_constants
                    .VerificationStatus.VERIFIED.value
                )

        storage_mock.is_user_id_exists.return_value = True
        storage_mock.is_user_account_active.return_value = True
        storage_mock.get_user_latest_update_phone_number_log_details\
            .return_value = \
            user_account_update_phone_log_with_creation_details_dto

        send_otp_to_user_phone_number_mock = \
            get_send_otp_to_user_phone_number_mock(mocker)

        with pytest.raises(base_validator.CustomException):
            interactor.send_otp_to_user_updated_phone_number(
                user_id, send_otp_through)

        storage_mock.get_user_latest_update_phone_number_log_details.\
            assert_called_once_with(user_id)

        send_otp_to_user_phone_number_mock.assert_not_called()

    @override_settings(
        VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE='template',
    )
    @pytest.mark.parametrize('verification_status', [
        otp_verification_constants.VerificationStatus
                             .VERIFICATION_IN_PROGRESS.value,
        otp_verification_constants.VerificationStatus.VERIFICATION_FAILED.value
    ])
    def test_when_send_otp_to_user_new_number(
            self, verification_status, interactor, storage_mock, mocker):

        sms_template = \
            OTPMessageFormatConstants.FORMAT_TO_VERIFY_UPDATE_PHONE_NUMBER
        call_template = settings.VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE
        user_id = str(uuid.uuid4())
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS

        update_phone_number_log_dto = \
            storage_dtos_factories \
                .UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                    user_id=user_id,
                    verification_status=verification_status
                )

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code
        )

        storage_mock.is_user_id_exists.return_value = True
        storage_mock.is_user_account_active.return_value = True
        storage_mock.get_user_latest_update_phone_number_log_details\
            .return_value = update_phone_number_log_dto

        send_otp_to_user_phone_number_mock = \
            get_send_otp_to_user_phone_number_mock(mocker)

        interactor.send_otp_to_user_updated_phone_number(
            user_id, send_otp_through)

        storage_mock.get_message_template_string.assert_not_called()

        send_otp_to_user_phone_number_mock\
            .assert_called_once_with(
                phone_number=phone_number_dto, template=sms_template,
                send_otp_through=send_otp_through, call_template=call_template
            )

    @override_settings(
        VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE='template',
        USE_TWILIO_FOR_INTERNATIONAL_NUMBERS=True,
        TWILIO_UPDATE_PHONE_NUMBER_TEMPLATE_ID='123'
    )
    def test_when_send_otp_to_user_new_number_when_number_is_international(
            self, interactor, storage_mock, mocker):

        message_template_id = settings.TWILIO_UPDATE_PHONE_NUMBER_TEMPLATE_ID
        sms_template = 'string'
        call_template = settings.VERIFY_PHONE_NUMBER_OTP_CALL_TEMPLATE
        user_id = str(uuid.uuid4())
        send_otp_through = otp_verification_constants.SendOTPThrough.SMS

        update_phone_number_log_dto = \
            storage_dtos_factories \
                .UserAccountUpdatePhoneLogWithCreationDetailsDTOFactory(
                    user_id=user_id,
                    verification_status=otp_verification_constants.
                    VerificationStatus.VERIFICATION_IN_PROGRESS.value,
                    new_country_code='+92'
                )

        phone_number_dto = interactor_common_dtos.PhoneNumberDTO(
            phone_number=update_phone_number_log_dto.new_phone_number,
            country_code=update_phone_number_log_dto.new_country_code
        )

        storage_mock.is_user_id_exists.return_value = True
        storage_mock.is_user_account_active.return_value = True
        storage_mock.get_user_latest_update_phone_number_log_details \
            .return_value = update_phone_number_log_dto
        storage_mock.get_message_template_string.return_value = sms_template

        send_otp_to_user_phone_number_mock = \
            get_send_otp_to_user_phone_number_mock(mocker)

        interactor.send_otp_to_user_updated_phone_number(
            user_id, send_otp_through)

        storage_mock.get_message_template_string.assert_called_once_with(
            message_template_id=message_template_id)

        send_otp_to_user_phone_number_mock.assert_called_once_with(
            phone_number=phone_number_dto, template=sms_template,
            send_otp_through=send_otp_through, call_template=call_template
        )

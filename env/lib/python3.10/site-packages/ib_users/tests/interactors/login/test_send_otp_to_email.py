import uuid

import pytest
from django.test import override_settings
from mock import create_autospec

from ib_users.constants.otp_constants import \
    OTPMessageFormatConstants
from ib_users.constants.otp_verification_constants import SendOTPThrough
from ib_users.exceptions.custom_exception_constants import INVALID_EMAIL, \
    NOT_REGISTERED_USER, USER_ACCOUNT_IS_DEACTIVATED
from ib_users.interactors import SendOTPToUserGivenEmail
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_accounts_storage import \
    UserEmailAndPhoneNumberDTO, PhoneNumberDTO
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


@pytest.mark.parametrize("email",
                         ["", "a@bc", "hello.boy#gmail.com", "3010@gmail.l"])
def test_send_otp_to_invalid_email(email):
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)

    send_otp_to_email = SendOTPToUserGivenEmail(
        storage=storage_mock, otp_service=otp_service)

    with pytest.raises(CustomException) as invalid_email_exception:
        send_otp_to_email.send_otp(
            email=email)

    TestsUtils.assert_custom_exception(INVALID_EMAIL, invalid_email_exception)


@pytest.mark.parametrize("email",
                         ["jim@gog.com", "name@lol.fun", "hello.boy@gmail.com",
                          "3010@gmail.ls"])
def test_send_otp_to_valid_but_not_registered_email(
        email):
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.get_user_details_to_send_otp_given_email.side_effect = \
        CustomException.from_exception_message_DTO(NOT_REGISTERED_USER)

    send_otp_to_email = SendOTPToUserGivenEmail(
        storage=storage_mock, otp_service=otp_service)

    with pytest.raises(CustomException) as invalid_email_exception:
        send_otp_to_email.send_otp(
            email=email)

    TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                       invalid_email_exception)


def test_send_otp_to_email_with_valid_phone_number():
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()),
        "developer@gmail.com",
        PhoneNumberDTO(
            "+91",
            "9876543210")
    )
    storage_mock.get_user_details_to_send_otp_given_email.return_value = user_email_phone_number_dto

    send_otp_to_email = SendOTPToUserGivenEmail(
        storage=storage_mock, otp_service=otp_service)
    send_otp_to_email.send_otp(
        email=user_email_phone_number_dto.email)

    storage_mock.get_user_details_to_send_otp_given_email.assert_called_once()
    otp_service.send_otp_to_user_email.assert_called_once_with(
        user_email_phone_number_dto.email,
        OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN
    )
    otp_service.send_otp_to_user_phone_number.assert_called_once_with(
        phone_number=user_email_phone_number_dto.phone_number,
        template=OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        send_otp_through=SendOTPThrough.SMS,
        call_template=None
    )


@pytest.mark.parametrize("phone_number", [PhoneNumberDTO("", "9876543210"),
                                          PhoneNumberDTO("+91", ""),
                                          PhoneNumberDTO("", "")])
def test_send_otp_to_email_with_invalid_phone_number(phone_number):
    from ib_users.constants.otp_constants import OTPMessageFormatConstants
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(str(uuid.uuid4()),
                                                             "developer@gmail.com",
                                                             phone_number)
    storage_mock.get_user_details_to_send_otp_given_email.return_value = user_email_phone_number_dto

    send_otp_to_email = SendOTPToUserGivenEmail(
        storage=storage_mock, otp_service=otp_service)
    send_otp_to_email.send_otp(
        email=user_email_phone_number_dto.email)

    storage_mock.get_user_details_to_send_otp_given_email.assert_called_once()
    otp_service.send_otp_to_user.assert_not_called()
    otp_service.send_otp_to_user_email.assert_called_once_with(
        user_email_phone_number_dto.email,
        OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN
    )


@pytest.mark.parametrize("phone_number", [PhoneNumberDTO("", "9876543210"),
                                          PhoneNumberDTO("+91", ""),
                                          PhoneNumberDTO("", "")])
def test_send_otp_with_inactive_user(phone_number):
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_user_account_active.return_value = False

    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()),
        "developer@gmail.com", phone_number)
    storage_mock.get_user_details_to_send_otp_given_email.return_value = \
        user_email_phone_number_dto
    send_otp_to_email = SendOTPToUserGivenEmail(
        storage=storage_mock, otp_service=otp_service)

    with pytest.raises(CustomException) as err:
        send_otp_to_email.send_otp(
            email=user_email_phone_number_dto.email)

        assert err.value.message == USER_ACCOUNT_IS_DEACTIVATED.message
        assert err.value.code == USER_ACCOUNT_IS_DEACTIVATED.code


@override_settings(USE_TWILIO_FOR_INTERNATIONAL_NUMBERS="True")
@override_settings(TWILIO_LOGIN_TEMPLATE_ID="TemplateID")
def test_send_otp_to_email_with_valid_international_phone_number():
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()), "developer@gmail.com",
        PhoneNumberDTO("+99", "9876543210"))
    template_id = "TemplateID"
    template_message = "TemplateMessage format"

    storage_mock.get_user_details_to_send_otp_given_email.return_value = user_email_phone_number_dto
    storage_mock.get_message_template_string.return_value = template_message

    send_otp_to_email = SendOTPToUserGivenEmail(
        storage=storage_mock, otp_service=otp_service)
    send_otp_to_email.send_otp(
        email=user_email_phone_number_dto.email)

    storage_mock.get_user_details_to_send_otp_given_email.assert_called_once()
    otp_service.send_otp_to_user_email.assert_called_once_with(
        user_email_phone_number_dto.email,
        OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN
    )
    storage_mock.get_message_template_string.assert_called_once_with(
        message_template_id=template_id)
    otp_service.send_otp_to_user_phone_number.assert_called_once_with(
        phone_number=user_email_phone_number_dto.phone_number,
        template=template_message,
        send_otp_through=SendOTPThrough.SMS,
        call_template=None
    )

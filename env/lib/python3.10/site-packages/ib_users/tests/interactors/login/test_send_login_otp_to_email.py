import uuid

import pytest
from mock import create_autospec
from django.test import override_settings
from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.exceptions.custom_exception_constants import INVALID_EMAIL
from ib_users.interactors import SendLoginOTPToEmailInteractor
from ib_users.interactors.exceptions.user_credentials_exceptions import \
    AccountWithEmailDoesntExistException
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_profile_storage import UserProfileStorage

from ib_users.interactors.storages.otp_verification_storage import \
    OTPVerificationStorage, GetOTPDetailsDTO
from ib_users.interactors.storages.user_accounts_storage import \
    UserEmailAndPhoneNumberDTO, PhoneNumberDTO
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_profile_interactor import GetUserProfileDTO

from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


@pytest.mark.parametrize("email",
                         ["", "a@bc", "hello.boy#gmail.com", "3010@gmail.l"])
def test_send_otp_to_invalid_email(email):
    # Arrange
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)
    otp_verification_mock = create_autospec(OTPVerificationStorage)
    user_profile_storage = create_autospec(UserProfileStorage)

    send_otp_to_email = SendLoginOTPToEmailInteractor(
        storage=storage_mock, otp_service=otp_service,
        otp_verification_storage=otp_verification_mock,
        user_profile_storage=user_profile_storage)

    # Act
    with pytest.raises(CustomException) as invalid_email_exception:
        send_otp_to_email.send_login_otp_to_email(
            email=email, should_send_otp_to_phone_number=False)

    TestsUtils.assert_custom_exception(INVALID_EMAIL, invalid_email_exception)


@pytest.mark.parametrize("email",
                         ["jim@gog.com", "name@lol.fun", "hello.boy@gmail.com",
                          "3010@gmail.ls"])
def test_send_otp_to_valid_but_not_registered_email(
        email):

    # Arrange
    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserAccountsStorage)

    otp_verification_mock = create_autospec(OTPVerificationStorage)

    user_profile_storage = create_autospec(UserProfileStorage)

    send_otp_to_email = SendLoginOTPToEmailInteractor(
        storage=storage_mock, otp_service=otp_service,
        otp_verification_storage=otp_verification_mock,
        user_profile_storage=user_profile_storage)
    storage_mock.get_user_given_email.side_effect = \
        AccountWithEmailDoesntExistException()

    # Act
    with pytest.raises(AccountWithEmailDoesntExistException):
        send_otp_to_email.send_login_otp_to_email(
            email=email, should_send_otp_to_phone_number=False)


@override_settings(
    SUBJECT_FOR_LOGIN_WITH_EMAIL_OTP=OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN,
    TEMPLATE_FOR_LOGIN_WITH_EMAIL_OTP=OTPMessageFormatConstants.FORMAT_TO_LOGIN,)
def test_send_otp_to_email_only():
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    otp_verification_mock = create_autospec(OTPVerificationStorage)

    user_profile_storage = create_autospec(UserProfileStorage)

    send_otp_to_email = SendLoginOTPToEmailInteractor(
        storage=storage_mock, otp_service=otp_service,
        otp_verification_storage=otp_verification_mock,
        user_profile_storage=user_profile_storage)

    user_profile = GetUserProfileDTO(
        user_id="user_1",
        is_email_verified=True,
        name="JohnDoe",
        phone_number="+91",
        country_code="9876543210"
    )
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()),
        "developer@gmail.com",
        PhoneNumberDTO(
            "+91",
            "9876543210")
    )
    user_profile_storage.get_user_profile.return_value = user_profile

    # Act
    send_otp_to_email.send_login_otp_to_email(
        email=user_email_phone_number_dto.email,
        should_send_otp_to_phone_number=False)

    # Assert
    otp_service.send_otp_to_user_email.assert_called_once_with(
        user_email_phone_number_dto.email,
        OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN
    )

@override_settings(
    SUBJECT_FOR_LOGIN_WITH_EMAIL_OTP=OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN,
    TEMPLATE_FOR_LOGIN_WITH_EMAIL_OTP=OTPMessageFormatConstants.FORMAT_TO_LOGIN,)
def test_send_otp_to_both_email_and_phone_number():
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    otp_verification_mock = create_autospec(OTPVerificationStorage)
    user_profile_storage = create_autospec(UserProfileStorage)

    send_otp_to_email = SendLoginOTPToEmailInteractor(
        storage=storage_mock, otp_service=otp_service,
        otp_verification_storage=otp_verification_mock,
        user_profile_storage=user_profile_storage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()),
        "developer@gmail.com",
        PhoneNumberDTO(
            "+91",
            "9876543210")
    )

    user_profile = GetUserProfileDTO(
        user_id="user_1",
        is_email_verified=True,
        name="JohnDoe",
        phone_number="+91",
        country_code="9876543210"
    )
    user_profile_storage.get_user_profile.return_value = user_profile

    otp_details = GetOTPDetailsDTO(
        otp="123456"
    )
    storage_mock.get_user_details_to_send_otp_given_email.return_value = user_email_phone_number_dto
    otp_verification_mock.get_otp_details_by_email.return_value = otp_details

    # Act
    send_otp_to_email.send_login_otp_to_email(
        email=user_email_phone_number_dto.email,
        should_send_otp_to_phone_number=True)

    # Assert
    otp_service.send_otp_to_user_email.assert_called_once_with(
        user_email_phone_number_dto.email,
        OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN
    )

@override_settings(
    SUBJECT_FOR_LOGIN_WITH_EMAIL_OTP=OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN,
    TEMPLATE_FOR_LOGIN_WITH_EMAIL_OTP=OTPMessageFormatConstants.FORMAT_TO_LOGIN,)
def test_send_otp_to_both_email_and_international_phone_number():
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserAccountsStorage)
    otp_verification_mock = create_autospec(OTPVerificationStorage)
    user_profile_storage = create_autospec(UserProfileStorage)

    send_otp_to_email = SendLoginOTPToEmailInteractor(
        storage=storage_mock, otp_service=otp_service,
        otp_verification_storage=otp_verification_mock,
        user_profile_storage=user_profile_storage)
    user_email_phone_number_dto = UserEmailAndPhoneNumberDTO(
        str(uuid.uuid4()),
        "developer@gmail.com",
        PhoneNumberDTO(
            "+1",
            "9876543210")
    )

    user_profile = GetUserProfileDTO(
        user_id="user_1",
        is_email_verified=True,
        name="JohnDoe",
        phone_number="+1",
        country_code="9876543210"
    )
    user_profile_storage.get_user_profile.return_value = user_profile
    otp_details = GetOTPDetailsDTO(
        otp="123456"
    )
    storage_mock.get_user_details_to_send_otp_given_email.return_value = user_email_phone_number_dto
    otp_verification_mock.get_otp_details_by_email.return_value = otp_details

    # Act
    send_otp_to_email.send_login_otp_to_email(
        email=user_email_phone_number_dto.email,
        should_send_otp_to_phone_number=True)

    # Assert
    otp_service.send_otp_to_user_email.assert_called_once_with(
        user_email_phone_number_dto.email,
        OTPMessageFormatConstants.FORMAT_TO_LOGIN,
        OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN
    )
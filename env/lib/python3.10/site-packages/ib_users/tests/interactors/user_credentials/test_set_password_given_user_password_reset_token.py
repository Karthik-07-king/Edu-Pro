import datetime
from unittest.mock import create_autospec, Mock

import pytest

from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos import \
    UserTokenDTO
from ib_users.utils.tests_utils import TestsUtils

from ib_users.validators.base_validator import CustomException

from ib_users.tests.interactors.registration.constants import \
    TestCaseParameters

from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage

from ib_users.interactors.storages import UserAccountsStorage

from ib_users.interactors.user_credentials.set_password_given_user_token_interactor import \
    SetPasswordGivenUserTokenInteractor


class TestSetPasswordGivenUserPasswordResetToken:
    @pytest.fixture
    def set_up(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        token_storage = create_autospec(UserPasswordResetTokenStorage)
        interactor = SetPasswordGivenUserTokenInteractor(
            token_storage=token_storage, accounts_storage=accounts_storage)
        return accounts_storage, token_storage, interactor

    def test_set_password_given_valid_token_and_new_password_then_update_password(
            self, set_up):
        token = "abc"
        user_id = "1"
        tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
        user_token = UserTokenDTO(user_id=user_id,
                                  expires_at=tomorrow,
                                  token=token)
        new_password = "ABC@1234"
        accounts_storage, token_storage, interactor = set_up

        token_storage.get_user_password_reset_token_dto.return_value = user_token

        interactor.set_password_given_user_password_reset_token(
            reset_password_token=token, new_password=new_password)

        token_storage.get_user_password_reset_token_dto.assert_called_once_with(
            token=token)
        accounts_storage.update_user_password.assert_called_once_with(
            user_id=user_token.user_id, new_password=new_password)

    @pytest.mark.parametrize("password,exception_message",
                             TestCaseParameters.password_and_exception_messages)
    def test_set_password_given_invalid_password_then_raise_exception(
            self, set_up, password, exception_message):
        token = "abc"
        accounts_storage, token_storage, interactor = set_up

        with pytest.raises(CustomException) as exception:
            interactor.set_password_given_user_password_reset_token(
                reset_password_token=token, new_password=password)

        TestsUtils.assert_custom_exception(exception_message, exception)
        accounts_storage.update_user_password.assert_not_called()

    def test_set_password_given_token_is_invalid_token_then_raise_exception(
            self, set_up):
        token = "abc"
        new_password = "ABC@1234"
        accounts_storage, token_storage, interactor = set_up

        from ib_users.interactors.exceptions.user_credentials_exceptions import \
            InvalidTokenException
        token_storage.get_user_password_reset_token_dto.side_effect = \
            InvalidTokenException

        with pytest.raises(InvalidTokenException):
            interactor.set_password_given_user_password_reset_token(
                reset_password_token=token, new_password=new_password)

        accounts_storage.update_user_password.assert_not_called()

    def test_set_password_given_token_is_token_expired_then_raise_exception(
            self, set_up):
        token = "abc"
        user_id = "1"
        expires_at = datetime.datetime.now()
        user_token = UserTokenDTO(user_id=user_id,
                                  expires_at=expires_at,
                                  token=token)
        new_password = "ABC@1234"
        accounts_storage, token_storage, interactor = set_up

        token_storage.get_user_password_reset_token_dto.return_value = user_token

        from ib_users.interactors.exceptions.user_credentials_exceptions import \
            TokenExpiredException
        with pytest.raises(TokenExpiredException):
            interactor.set_password_given_user_password_reset_token(
                reset_password_token=token, new_password=new_password)

        accounts_storage.update_user_password.assert_not_called()

from unittest.mock import create_autospec

import pytest

from ib_users.interactors.exceptions.user_credentials_exceptions import \
    InvalidTokenExpiryInSeconds
from ib_users.utils.tests_utils import TestsUtils

from ib_users.validators.base_validator import CustomException

from ib_users.tests.interactors.user_credentials.constants import \
    TestCaseParameters

from ib_users.interactors.presenters.user_credentials_presenter import \
    UserCredentialsPresenter

from ib_users.interactors.user_credentials.get_token_for_rest_password import \
    GetTokenForResetPassword
from ib_users.models import UserAccount

from ib_users.interactors.third_party.token_generator import TokenGenerator

from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage

from ib_users.interactors.storages import UserAccountsStorage


class TestGetTokenForRestPassword:
    @pytest.fixture
    def set_up(self):
        account_storage = create_autospec(UserAccountsStorage)
        token_storage = create_autospec(UserPasswordResetTokenStorage)
        token_generator = create_autospec(TokenGenerator)
        presenter = create_autospec(UserCredentialsPresenter)
        interactor = GetTokenForResetPassword(
            account_storage, token_storage, token_generator)
        return account_storage, token_storage, token_generator, presenter, interactor

    def test_get_token_for_rest_password_given_valid_detail_and_token_is_not_active_then_return_token(
            self, set_up):
        token_expiry_in_seconds = 3600
        email = "example@gmail.com"
        token = "1234"
        user = UserAccount()
        account_storage, token_storage, token_generator, presenter, interactor \
            = set_up

        token_generator.get_token.return_value = token
        account_storage.get_user_given_email.return_value = user
        token_storage.is_reset_password_token_active.return_value = False, ""
        presenter.get_response_for_reset_password.return_value = {
            "token": token}

        interactor.get_reset_password_token_for_rest_password_wrapper(
            email=email, token_expiry_in_seconds=token_expiry_in_seconds,
            presenter=presenter)

        account_storage.get_user_given_email.assert_called_once_with(
            email=email)
        token_generator.get_token.assert_called_once_with(user=user)
        token_storage.store_reset_password_token.assert_called_once_with(
            str(user.user_id), token, token_expiry_in_seconds)
        presenter.get_response_for_reset_password.assert_called_once_with(
            token=token)

    def test_get_token_for_rest_password_given_valid_detail_and_token_is_active_then_return_token(
            self, set_up):
        token_expiry_in_seconds = 3600
        email = "example@gmail.com"
        token = "1234"
        user = UserAccount()
        account_storage, token_storage, token_generator, presenter, interactor \
            = set_up

        account_storage.get_user_given_email.return_value = user
        token_storage.is_reset_password_token_active.return_value = True, token
        presenter.get_response_for_reset_password.return_value = {
            "token": token}

        interactor.get_reset_password_token_for_rest_password_wrapper(
            email=email, token_expiry_in_seconds=token_expiry_in_seconds,
            presenter=presenter)

        account_storage.get_user_given_email.assert_called_once_with(
            email=email)
        token_storage.update_expiry_time.assert_called_once_with(
            user_id=str(user.user_id),
            expiry_time_in_seconds=token_expiry_in_seconds)
        presenter.get_response_for_reset_password.assert_called_once_with(
            token=token)

    @pytest.mark.parametrize('email', TestCaseParameters.invalid_email_cases)
    def test_get_token_for_rest_password_given_invalid_email_then_raise_exception(
            self, set_up, email):
        token_expiry_in_seconds = 3600
        account_storage, token_storage, token_generator, presenter, interactor \
            = set_up
        from ib_users.exceptions.custom_exception_constants import \
            INVALID_EMAIL
        with pytest.raises(CustomException) as invalid_email_exception:
            interactor.get_reset_password_token_for_rest_password_wrapper(
                email=email, token_expiry_in_seconds=token_expiry_in_seconds,
                presenter=presenter)
        TestsUtils.assert_custom_exception(INVALID_EMAIL,
                                           invalid_email_exception)

        token_storage.store_reset_password_token.assert_not_called()

    def test_get_token_for_rest_password_given_invalid_token_expiry_in_seconds_then_raise_exception(
            self, set_up):
        email = "sample@gmail.com"
        token_expiry_in_seconds = -1
        account_storage, token_storage, token_generator, presenter, interactor \
            = set_up

        with pytest.raises(InvalidTokenExpiryInSeconds):
            interactor.get_reset_password_token_for_rest_password_wrapper(
                email=email, token_expiry_in_seconds=token_expiry_in_seconds,
                presenter=presenter)

        token_storage.store_reset_password_token.assert_not_called()

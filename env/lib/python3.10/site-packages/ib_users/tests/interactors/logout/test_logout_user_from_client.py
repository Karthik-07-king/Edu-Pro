import uuid

from mock import create_autospec

from ib_users.interactors.storages.oauth2_storage import AccessTokensDTO
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserDeviceIdAndAccessTokenDTO, UserLoginDeviceDetailsStorage
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator


class TestsLogoutInClient:
    def test_logout_in_all_devices_for_mapped_user(self):
        # Arrange
        from ib_users.interactors import LogoutInDevicesImpl

        login_token_service_mock = create_autospec(UserAuthTokensGenerator)
        storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        device_ids_and_access_tokens = [UserDeviceIdAndAccessTokenDTO("device_1", "access_token"),
                         UserDeviceIdAndAccessTokenDTO("device_1", "access_token_1"),
                         UserDeviceIdAndAccessTokenDTO("device_1", "access_token_2")]
        storage_mock.get_all_devices_login_details_of_given_user.return_value = device_ids_and_access_tokens
        logout_from_all_devices = LogoutInDevicesImpl(storage=storage_mock,
                                                      login_token_generator=login_token_service_mock)

        access_tokens_dto = AccessTokensDTO(access_tokens=["access_token"])
        login_token_service_mock.get_all_access_tokens_related_to_user.return_value = access_tokens_dto

        application_id = 1
        user_id = str(uuid.uuid4())
        client_id = "Client1"

        login_token_service_mock.get_client_application_id.return_value = application_id

        # Act
        logout_from_all_devices.logout_user_from_client(
            user_id=user_id, client_id=client_id)

        # Assert
        storage_mock.get_all_devices_login_details_of_given_user.assert_called_once_with(user_id)

        access_tokens = [item.access_token for item in device_ids_and_access_tokens[1:]]
        storage_mock.remove_device_login_details_of_user_except_of_given_access_tokens.assert_called_once_with(
            user_id=user_id, access_tokens=access_tokens)
        login_token_service_mock.get_client_application_id.assert_called_once_with(
            client_id=client_id)

    def test_with_logout_when_user_access_token_not_linked_to_any_device(self):
        # Arrange
        from ib_users.interactors import LogoutInDevicesImpl

        login_token_service_mock = create_autospec(UserAuthTokensGenerator)
        storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        device_ids_and_access_tokens = []
        storage_mock.get_all_devices_login_details_of_given_user.return_value = device_ids_and_access_tokens
        logout_from_all_devices = LogoutInDevicesImpl(storage=storage_mock,
                                                      login_token_generator=login_token_service_mock)

        application_id = 1
        user_id = str(uuid.uuid4())
        client_id = "Client1"

        login_token_service_mock.get_client_application_id.return_value = application_id

        # Act
        logout_from_all_devices.logout_user_from_client(
            user_id=user_id, client_id=client_id)

        # Assert
        storage_mock.get_all_devices_login_details_of_given_user.assert_called_once_with(
            user_id)

        login_token_service_mock.get_client_application_id.assert_called_once_with(
            client_id=client_id)


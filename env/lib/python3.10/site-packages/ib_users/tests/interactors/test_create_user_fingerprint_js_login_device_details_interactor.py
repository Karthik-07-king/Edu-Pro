from unittest.mock import create_autospec, Mock

import pytest

from ib_users.tests.factories import interactor_dtos


class TestCreateUserFingerprintJsLoginDeviceDetailsInteractor:
    @pytest.fixture
    def setup(self):
        from ib_users.interactors.storages.fingerprint_js_storage \
            import FingerprintJsStorage
        from ib_users.interactors.presenters\
            .create_user_fingerprint_js_login_device_details_presenter import \
            CreateUserFingerprintJsLoginDeviceDetailsPresenter
        from ib_users.interactors.\
            create_user_fingerprint_js_login_device_details_interactor import \
            CreateUserFingerprintJsLoginDeviceDetailsInteractor

        storage_mock = create_autospec(FingerprintJsStorage)
        presenter_mock = create_autospec(
            CreateUserFingerprintJsLoginDeviceDetailsPresenter)
        interactor = CreateUserFingerprintJsLoginDeviceDetailsInteractor(
            storage_mock)

        return storage_mock, presenter_mock, interactor

    def test_create_user_fingerprint_js_login_device_details_wrapper(
            self, setup):
        storage_mock, presenter_mock, interactor = setup
        user_request_details_dto = \
            interactor_dtos.UserFingerPrintJsLoginDeviceDetailsDTOFactory()
        presenter_response_mock = Mock()
        presenter_mock.get_success_response.return_value = \
            presenter_response_mock

        response = interactor.\
            create_user_fingerprint_js_login_device_details_wrapper(
                user_request_details_dto, presenter_mock)

        assert response == presenter_response_mock
        storage_mock.create_user_fingerprint_js_login_device_details.\
            assert_called_once_with(user_request_details_dto)

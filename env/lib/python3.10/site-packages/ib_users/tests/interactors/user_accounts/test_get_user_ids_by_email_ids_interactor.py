import pytest
from unittest.mock import create_autospec

from ib_users.interactors.DTOs.common_dtos import UserIdsWithTotalDTO, \
    UserIdWithEmailIdDTO
from ib_users.interactors.storages.user_profile_storage import \
    UserProfileStorage
from ib_users.interactors.user_accounts.get_user_ids_by_email_ids_interactor import \
    GetUserIdsByEmailIdsInteractor


class TestGetUserIdsByEmailIdsInteractor:

    @pytest.fixture
    def user_ids_with_count_dto(self):
        user_ids_with_count_dto = UserIdsWithTotalDTO(
            user_ids=["user_id1", "user_id2"],
            total_count=5
        )
        return user_ids_with_count_dto

    def test_with_valid_details_should_return_dtos(self,
                                                   user_ids_with_count_dto):
        # Arrange
        email_ids = ["email-1", "email-2"]
        storage_mock = create_autospec(UserProfileStorage)
        user_ids = ["user_id1", "user_id2"]

        interactor = GetUserIdsByEmailIdsInteractor(
            profile_storage=storage_mock)

        expected_output = [
            UserIdWithEmailIdDTO(
                email_id="email_1", user_id="user_id1"
            ),
            UserIdWithEmailIdDTO(
                email_id="email_2", user_id="user_id2"
            )
        ]

        storage_mock.get_user_ids_by_email_ids.return_value = \
            expected_output

        # Act
        user_ids_with_count_dto = interactor.get_user_ids_by_email_ids_wrapper(
            email_ids=email_ids
        )

        # Assert
        assert user_ids_with_count_dto == expected_output
        storage_mock.get_user_ids_by_email_ids.assert_called_once_with(
            email_ids=email_ids
        )

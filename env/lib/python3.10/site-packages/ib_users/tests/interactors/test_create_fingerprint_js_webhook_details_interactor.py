from unittest.mock import create_autospec, Mock

import pytest
from django.test import override_settings

from ib_users.tests.factories import interactor_dtos


class TestCreateFingerprintJsWebhookDetailsInteractor:
    @pytest.fixture
    def setup(self):
        from ib_users.interactors.storages.fingerprint_js_storage \
            import FingerprintJsStorage
        from ib_users.interactors.presenters\
            .create_fingerprint_js_webhook_details_presenter import \
            CreateFingerprintJsWebhookDetailsPresenter
        from ib_users.interactors.\
            create_user_fingerprint_js_webhook_details_interactor import \
            CreateFingerprintJsWebhookDetailsInteractor

        fingerprint_js_storage_mock = create_autospec(
            FingerprintJsStorage)
        presenter_mock = create_autospec(
            CreateFingerprintJsWebhookDetailsPresenter)
        interactor = CreateFingerprintJsWebhookDetailsInteractor(
            fingerprint_js_storage_mock)

        return presenter_mock, interactor, fingerprint_js_storage_mock

    @override_settings(FINGERPRINT_JS_WEBHOOK_USERNAME="username_1")
    @override_settings(FINGERPRINT_JS_WEBHOOK_PASSWORD="password_1@")
    def test_with_valid_details(self, setup):
        presenter_mock, interactor, fingerprint_js_storage_mock = setup
        interactor_dtos.FingerprintJsWebhookDetailsDTOFactory.reset_sequence()
        webhook_details_dto = \
            interactor_dtos.FingerprintJsWebhookDetailsDTOFactory()
        presenter_response_mock = Mock()
        presenter_mock.get_success_response.return_value = \
            presenter_response_mock

        response = interactor.create_fingerprint_js_webhook_details_wrapper(
            webhook_details_dto, presenter_mock)

        assert response == presenter_response_mock

    def test_with_invalid_request_id(self, setup):
        presenter_mock, interactor,  fingerprint_js_storage_mock = setup
        webhook_details_dto = \
            interactor_dtos.FingerprintJsWebhookDetailsDTOFactory(
                request_id=None)
        presenter_response_mock = Mock()
        presenter_mock.get_custom_exception_response.return_value = \
            presenter_response_mock

        response = interactor.create_fingerprint_js_webhook_details_wrapper(
            webhook_details_dto, presenter_mock)

        assert response == presenter_response_mock

    @override_settings(FINGERPRINT_JS_WEBHOOK_USERNAME="username_1")
    @override_settings(FINGERPRINT_JS_WEBHOOK_PASSWORD="password_1@")
    def test_with_invalid_credentials(self, setup):
        presenter_mock, interactor, fingerprint_js_storage_mock = setup
        webhook_details_dto = \
            interactor_dtos.FingerprintJsWebhookDetailsDTOFactory(
                password="10")
        presenter_response_mock = Mock()
        presenter_mock.get_custom_exception_response.return_value = \
            presenter_response_mock

        response = interactor.create_fingerprint_js_webhook_details_wrapper(
            webhook_details_dto, presenter_mock)

        assert response == presenter_response_mock

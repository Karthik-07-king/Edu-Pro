import datetime
import pytest

from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.tests.factories import models, storage_dtos, interface_dtos
from ib_users.constants.user_profile import enums
from ib_users.exceptions import user_profile_exceptions
from ib_users.tests.factories.models import UserProfileFactory, UserAccountFactory

pytestmark = pytest.mark.django_db


class TestUserProfileSQLStorage:

    @pytest.fixture()
    def storage(self):
        from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage

        return UserProfileSQLStorage()

    @pytest.fixture()
    def reset_sequence(self):
        models.UserSSCDetailsFactory.reset_sequence()
        models.UserPreferredLanguagesFactory.reset_sequence()
        models.UserAccountFactory.reset_sequence()
        models.UserProfileFactory.reset_sequence()
        models.UserSocialProfileDetailsFactory.reset_sequence()
        models.UserContactDetailsFactory.reset_sequence()
        models.UserAddressDetailsFactory.reset_sequence()
        models.UserCurrentProfessionalDetailsFactory.reset_sequence()
        models.UserProfessionalSkillsFactory.reset_sequence()
        models.UserSSCDetailsFactory.reset_sequence()
        models.UserIntermediateDetailsFactory.reset_sequence()
        models.UserDegreeDetailsFactory.reset_sequence()
        models.UserWorkExperienceDetailsFactory.reset_sequence()
        models.UserCompanyDetailsFactory.reset_sequence()
        models.UserPreferredLanguagesFactory.reset_sequence()
        models.UserGuardianDetailsFactory.reset_sequence()

        storage_dtos.UserDegreeDetailsDTOFactory.reset_sequence()
        storage_dtos.SocialProfileDetailsDTOFactory.reset_sequence()
        storage_dtos.ProfileDetailsDTOFactory.reset_sequence()
        storage_dtos.AddressDetailsDTOFactory.reset_sequence()
        storage_dtos.SSCDetailsDTOFactory.reset_sequence()
        storage_dtos.IntermediateDetailsDTOFactory.reset_sequence()
        storage_dtos.WorkExperienceDetailsDTOFactory.reset_sequence()
        storage_dtos.CompanyDetailsDTOFactory.reset_sequence()
        storage_dtos.CurrentProfessionalDetailsDTOFactory.reset_sequence()
        storage_dtos.UserCompanyDetailsDTOFactory.reset_sequence()
        storage_dtos.UserProfessionalSkillsDTOFactory.reset_sequence()
        storage_dtos.UserPreferredLanguagesDTOFactory.reset_sequence()
        storage_dtos.UserGuardianDetailsDTOFactory.reset_sequence()

        interface_dtos.SocialProfileDetailsDTOFactory.reset_sequence()
        interface_dtos.SkillDetailsDTOFactory.reset_sequence()
        interface_dtos.UpdateDegreeDetailsDTOFactory.reset_sequence()
        interface_dtos.UpdateUserCompanyDetailsDTOFactory.reset_sequence()

    def test_get_user_ssc_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserSSCDetailsFactory(
            user_account=user_account,
            board_name_enum=enums.SSCBoardName.CBSE.value,
            institute_id="institute_id",
            institute_name="institute_name",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)

        expected_result = storage_dtos.SSCDetailsDTOFactory(
            board_name_enum=enums.SSCBoardName.CBSE.value,
            institute_id="institute_id",
            institute_name="institute_name",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)

        # Act
        actual_result = storage.get_user_ssc_details(user_id=user_id)

        # Assert
        assert actual_result == expected_result

    def test_given_invalid_user_id_to_get_user_ssc_details_raises_exception(
            self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"

        # Act & # Assert
        with pytest.raises(user_profile_exceptions.UserSSCDetailsDoesNotExistException):
            storage.get_user_ssc_details(user_id=user_id)

    def test_get_user_intermediate_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserIntermediateDetailsFactory(
            user_account=user_account,
            intermediate_course_id="intermediate_course_id",
            intermediate_course_name="intermediate_course_name",
            institute_name="institute_name",
            other_intermediate_course_name=None,
            institute_id="institute_id",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)

        expected_result = storage_dtos.IntermediateDetailsDTOFactory(
            intermediate_course_id="intermediate_course_id",
            course_name="intermediate_course_name",
            institute_name="institute_name",
            other_intermediate_course=None,
            institute_id="institute_id",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)

        # Act
        actual_result = storage.get_user_intermediate_details(user_id=user_id)

        # Assert
        assert actual_result == expected_result

    def test_get_user_work_experience_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserWorkExperienceDetailsFactory(
            user_account=user_account,
            no_of_years_experience_in_it_sector=10,
            no_of_years_experience_in_non_it_sector=11)

        expected_result = storage_dtos.WorkExperienceDetailsDTOFactory(
            no_of_years_experience_in_it_sector=10,
            no_of_years_experience_in_non_it_sector=11)

        # Act
        actual_result = storage.get_user_work_experience_details(user_id=user_id)

        # Assert
        assert actual_result == expected_result

    def test_get_user_social_profile_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserSocialProfileDetailsFactory(
            user_account=user_account, profile_link="profile_link-1",
            social_provider=enums.SocialProvider.LINKEDIN.value,
            id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81")

        expected_result = [
            storage_dtos.SocialProfileDetailsDTOFactory(
                profile_link="profile_link-1",
                social_provider=enums.SocialProvider.LINKEDIN.value,
                id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81")
        ]

        # Act
        actual_result = storage.get_user_social_profile_details(user_id=user_id)

        # Assert
        assert actual_result == expected_result

    def test_get_user_degree_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserDegreeDetailsFactory(
            user_account=user_account, course_id="course_id-1",
            degree_type=enums.DegreeType.MASTERS.value,
            id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81",
            course_name="course_name-1", other_course_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            department_id="department_id-1",
            department_name="department_name-1",
            score_type=enums.ScoreType.CGPA.value,
            score=10, start_year=2020, end_year=2024,
            no_of_backlogs=0,
            institute_id="institute_id-1",
            institute_name="institute_name-1",
            other_institute_name=None,
            institute_pin_code="515671",
            institute_city_id="institute_city_id-1",
            institute_city_name="institute_city_name",
            expected_date_to_clear_backlogs=None,
            institute_district_id="institute_district_id",
            institute_district_name="institute_district_name",
            institute_state_id="institute_state_id",
            institute_state_name="institute_state_name",
            other_institute_city_name="other_institute_city_name",
            other_department_name="other_department_name",
            institute_country_name="institute_country_name",
            institute_country_id="institute_country_id")

        expected_result = [
            storage_dtos.UserDegreeDetailsDTOFactory(
                user_id=user_id, course_id="course_id-1",
                type=enums.DegreeType.MASTERS.value,
                id="5fd64953-7c9a-4e34-9f46-d9ad554dfe81",
                course_name="course_name-1", other_course_name=None,
                completion_status=enums.CourseCompletionStatus.COMPLETED.value,
                department_id="department_id-1",
                department_name="department_name-1",
                score_type=enums.ScoreType.CGPA.value,
                score=10, start_year=2020, end_year=2024,
                no_of_backlogs=0,
                institute_id="institute_id-1",
                institute_name="institute_name-1",
                other_institute_name=None,
                institute_pin_code="515671",
                institute_city_id="institute_city_id-1",
                institute_city_name="institute_city_name",
                expected_date_to_clear_backlogs=None,
                institute_district_id="institute_district_id",
                institute_district_name="institute_district_name",
                institute_state_id="institute_state_id",
                institute_state_name="institute_state_name",
                other_institute_city_name="other_institute_city_name",
                other_department_name="other_department_name",
                institute_country_name="institute_country_name",
                institute_country_id="institute_country_id")
        ]

        # Act
        actual_result = storage.get_user_degree_details(user_id=user_id)

        # Assert
        assert actual_result == expected_result

    def test_get_user_address_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_address_details = models.UserAddressDetailsFactory(
            user_account=user_account)

        expected_result = [
            storage_dtos.AddressDetailsDTOFactory(
                address_type=user_address_details.address_type,
                address_1=user_address_details.address_1,
                address_2=user_address_details.address_2,
                pin_code=user_address_details.pin_code,
                city_id=user_address_details.city_id,
                city_name=user_address_details.city_name,
                district_id=user_address_details.district_id,
                district_name=user_address_details.district_name,
                state_id=user_address_details.state_id,
                state_name=user_address_details.state_name,
                country_id=user_address_details.country_id,
                country_name=user_address_details.country_name,
                other_city_name=user_address_details.other_city_name
            )
        ]

        # Act
        actual_result = storage.get_user_address_details(user_id=user_id)

        # Assert
        assert actual_result == expected_result

    def test_get_user_company_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_company_details = models.UserCompanyDetailsFactory(
            user_account=user_account)

        expected_result = [
            storage_dtos.CompanyDetailsDTOFactory(
                id=str(user_company_details.id),
                company_id=user_company_details.company_id,
                company_name=user_company_details.company_name,
                other_company_name=user_company_details.other_company_name,
                company_city_id=user_company_details.company_city_id,
                company_city_name=user_company_details.company_city_name,
                job_role_id=user_company_details.job_role_id,
                job_role_name=user_company_details.job_role_name,
                other_job_role_name=user_company_details.other_job_role_name,
                is_currently_working_in_this_company=user_company_details.is_currently_working_in_this_company,
                start_date=user_company_details.start_date,
                end_date=user_company_details.end_date,
                ctc=user_company_details.ctc,
                no_of_months_for_notice_period=user_company_details.no_of_months_for_notice_period,
                other_company_city_name=user_company_details.other_company_city_name
            )
        ]

        # Act
        actual_result = storage.get_user_company_details(user_id=user_id)

        # Assert
        assert actual_result == expected_result

    def test_get_user_preferred_languages(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_preferred_languages = [
            models.UserPreferredLanguagesFactory(
                user_account=user_account, language=enums.Language.TELUGU.value),
            models.UserPreferredLanguagesFactory(
                user_account=user_account, language=enums.Language.ENGLISH.value)
        ]

        expected_response = [
            storage_dtos.UserPreferredLanguagesDTOFactory(
                user_id=user_id, language=enums.Language.TELUGU.value),
            storage_dtos.UserPreferredLanguagesDTOFactory(
                user_id=user_id, language=enums.Language.ENGLISH.value)
        ]

        # Act
        actual_response = storage.get_user_preferred_languages(user_id=user_id)

        # Assert
        assert actual_response == expected_response

    def test_get_user_current_professional_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_current_professional_details = \
            models.UserCurrentProfessionalDetailsFactory(user_account=user_account)

        expected_response = storage_dtos.CurrentProfessionalDetailsDTOFactory(
            job_role_id=user_current_professional_details.job_role_id,
            job_role_name=user_current_professional_details.job_role_name,
            other_job_role_name=user_current_professional_details.other_job_role_name,
            higher_education_course_type=user_current_professional_details.higher_education_course_type,
            have_work_experience=user_current_professional_details.have_work_experience)

        # Act
        actual_response = storage.get_user_current_professional_details(
            user_id=user_id)

        # Assert
        assert actual_response == expected_response

    def test_get_user_profile_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_profile_details = models.UserProfileFactory(
            account=user_account, email="john@gmail.com")

        expected_response = storage_dtos.ProfileDetailsDTOFactory(
            first_name=user_profile_details.name,
            last_name=user_profile_details.last_name,
            phone_number=user_profile_details.phone_number,
            country_code=user_profile_details.country_code,
            email=user_profile_details.email,
            date_of_birth=user_profile_details.dob,
            gender=user_profile_details.gender,
            profile_pic_url=user_profile_details.profile_pic_url,
            cover_page_url=user_profile_details.cover_page_url)

        # Act
        actual_response = storage.get_user_profile_details(
            user_id=user_id)

        # Assert
        assert actual_response == expected_response

    def test_get_user_contact_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_contact_details = models.UserContactDetailsFactory(
            user_account=user_account,
            have_whatsapp=False)

        expected_response = storage_dtos.UserContactDetailsDTOFactory(
            whatsapp_mobile_number=user_contact_details.whatsapp_mobile_number,
            whatsapp_mobile_country_code=user_contact_details.whatsapp_mobile_country_code,
            i_want_to_receive_updates_in_whatsapp=\
            user_contact_details.i_want_to_receive_updates_directly_on_whatsapp,
            have_whatsapp=False, user_id=user_id)

        # Act
        actual_response = storage.get_user_contact_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response

    def test_get_user_professional_skills_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_professional_skills = models.UserProfessionalSkillsFactory(
            user_account=user_account)

        expected_response = [
            storage_dtos.UserProfessionalSkillsDTOFactory(
                user_id=user_id, id=str(user_professional_skills.id),
                skill_id=user_professional_skills.skill_id,
                skill_name=user_professional_skills.skill_name,
                other_skill_name=user_professional_skills.other_skill_name
            )
        ]

        # Act
        actual_response = storage.get_user_professional_skills_details(
            user_id=user_id)

        # Assert
        assert actual_response == expected_response

    def test_remove_user_professional_skills(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_professional_skills_ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserProfessionalSkillsFactory(
            user_account=user_account, id=user_professional_skills_ids[0])
        # Act
        storage.remove_user_professional_skills(
            user_professional_skills_ids=user_professional_skills_ids)

        # Assert
        from ib_users.models import UserProfessionalSkills
        response = UserProfessionalSkills.objects.filter(
            id__in=user_professional_skills_ids).exists()
        assert response is False

    def test_remove_user_company_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_company_detail_ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserCompanyDetailsFactory(
            user_account=user_account, id=user_company_detail_ids[0])
        # Act
        storage.remove_user_company_details(
            user_company_detail_ids=user_company_detail_ids)

        # Assert
        from ib_users.models import UserCompanyDetails
        response = UserCompanyDetails.objects.filter(
            id__in=user_company_detail_ids).exists()
        assert response is False

    def test_update_social_profile_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserSocialProfileDetailsFactory(
            id=ids[0], user_account=user_account, profile_link="profile_link",
            social_provider=enums.SocialProvider.LINKEDIN.value)

        social_profile_details = interface_dtos.SocialProfileDetailsDTOFactory(
            id=ids[0], profile_link="profile_link1",
            social_provider=enums.SocialProvider.LINKEDIN.value)

        # Act
        storage.update_social_profile_details(
            social_profile_details=[social_profile_details])

        # Assert
        from ib_users.models import UserSocialProfileDetails
        obj = UserSocialProfileDetails.objects.get(id=ids[0])
        assert obj.profile_link == social_profile_details.profile_link

    def test_update_is_email_verified(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserProfileFactory(
            account=user_account, email="john@gmail.com", is_email_verified=False)

        # Act
        storage.update_is_email_verified(
            user_id=user_id, is_email_verified=True)

        # Assert
        from ib_users.models import UserProfile
        obj = UserProfile.objects.get(account=user_account)
        assert obj.is_email_verified is True

    def test_update_user_preferred_languages(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserPreferredLanguagesFactory(
            language=enums.Language.TELUGU.value,
            user_account=user_account)

        preferred_languages = [enums.Language.ENGLISH.value]

        # Act
        storage.update_user_preferred_languages(
            user_id=user_id, preferred_languages=preferred_languages)

        # Assert
        from ib_users.models import UserPreferredLanguages
        user_preferred_language = UserPreferredLanguages.objects.get(
            user_account__user_id=user_id)
        assert user_preferred_language.language == preferred_languages[0]

    def test_update_user_professional_skills_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserProfessionalSkillsFactory(
            id=ids[0], user_account=user_account, skill_id="skill_id1",
            skill_name="skill_name1", other_skill_name=None)

        user_professional_skills = interface_dtos.SkillDetailsDTOFactory(
            id=ids[0], skill_id="skill_id2",
            skill_name="skill_name2")

        # Act
        storage.update_user_professional_skills_details(
            user_professional_skills=[user_professional_skills])

        # Assert
        from ib_users.models import UserProfessionalSkills
        obj = UserProfessionalSkills.objects.get(id=ids[0])
        assert obj.skill_id == user_professional_skills.skill_id
        assert obj.skill_name == user_professional_skills.skill_name

    def test_update_user_degree_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserDegreeDetailsFactory(
            id=ids[0], user_account=user_account,
            degree_type=enums.DegreeType.MASTERS.value,
            course_id="course_id", course_name="course_name",
            other_course_name=None,
            completion_status=enums.CourseCompletionStatus.PURSUING.value,
            department_id="department_id", department_name="department_name",
            score_type=enums.ScoreType.CGPA.value, score=100,
            start_year=2020, end_year=2021, no_of_backlogs=10,
            institute_id="institute_id", institute_name="institute_name",
            other_institute_name=None, institute_pin_code="998877",
            institute_city_name="institute_city_name",
            expected_date_to_clear_backlogs=None,
            other_department_name=None,
            institute_country_name="institute_country_name",
            institute_country_id="institute_country_id")

        degree_details = interface_dtos.UpdateDegreeDetailsDTOFactory(
            id=ids[0],
            type=enums.DegreeType.BACHELORS.value,
            course_id="course_id1", course_name="course_name1",
            other_course_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            department_id="department_id1", department_name="department_name1",
            score_type=enums.ScoreType.CGPA.value, score=1000,
            start_year=2020, end_year=2022, no_of_backlogs=10,
            institute_id="institute_id", institute_name="institute_name",
            other_institute_name=None, institute_pin_code="998877",
            institute_city_name="institute_city_name2",
            expected_date_to_clear_backlogs=datetime.date.today(),
            other_institute_city_name="other_institute_city_name",
            other_department_name="other_department_name",
            institute_country_name="institute_country_name1",
            institute_country_id="institute_country_id1")

        # Act
        storage.update_user_degree_details(degree_details=[degree_details])

        # Assert
        from ib_users.models import UserDegreeDetails
        obj = UserDegreeDetails.objects.get(id=ids[0])
        assert obj.degree_type == degree_details.type
        assert obj.course_id == degree_details.course_id
        assert obj.course_name == degree_details.course_name
        assert obj.other_course_name == degree_details.other_course_name
        assert obj.completion_status == degree_details.completion_status
        assert obj.department_id == degree_details.department_id
        assert obj.department_name == degree_details.department_name
        assert obj.score_type == degree_details.score_type
        assert obj.score == degree_details.score
        assert obj.start_year == degree_details.start_year
        assert obj.end_year == degree_details.end_year
        assert obj.no_of_backlogs == degree_details.no_of_backlogs
        assert obj.institute_id == degree_details.institute_id
        assert obj.institute_name == degree_details.institute_name
        assert obj.other_institute_name == degree_details.other_institute_name
        assert obj.institute_pin_code == degree_details.institute_pin_code
        assert obj.institute_city_id == degree_details.institute_city_id
        assert obj.institute_city_name == degree_details.institute_city_name
        assert obj.expected_date_to_clear_backlogs == degree_details.expected_date_to_clear_backlogs
        assert obj.other_institute_city_name == degree_details.other_institute_city_name
        assert obj.other_department_name == degree_details.other_department_name
        assert obj.institute_country_id == degree_details.institute_country_id
        assert obj.institute_country_name == degree_details.institute_country_name

    def test_update_user_company_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserCompanyDetailsFactory(
            id=ids[0], user_account=user_account,
            company_id="company_id2", company_name="company_name11",
            other_company_name="other_company_nam1e1",
            company_city_id="company_city_id11",
            company_city_name="company_city_name11",
            job_role_id="job_role_id11", job_role_name="job_role_name1",
            other_job_role_name=None,
            is_currently_working_in_this_company=True,
            start_date=datetime.date.today(), end_date=datetime.date.today(),
            ctc=enums.CTC.SIX_TO_NINE_LPA.value, no_of_months_for_notice_period=110)

        user_company_details = interface_dtos.UpdateUserCompanyDetailsDTOFactory(
            id=ids[0], company_id="company_id", company_name="company_name1",
            other_company_name="other_company_name1",
            company_city_id="company_city_id1",
            company_city_name="company_city_name1",
            job_role_id="job_role_id1", job_role_name="job_role_name",
            other_job_role_name=None,
            is_currently_working_in_this_company=True,
            start_date=datetime.date.today(), end_date=datetime.date.today(),
            ctc=enums.CTC.SIX_TO_NINE_LPA.value, no_of_months_for_notice_period=10,
            other_company_city_name="other_company_city_name")

        # Act
        storage.update_user_company_details(
            user_company_details=[user_company_details])

        # Assert
        from ib_users.models import UserCompanyDetails
        obj = UserCompanyDetails.objects.get(id=ids[0])
        assert obj.company_id == user_company_details.company_id
        assert obj.company_name == user_company_details.company_name
        assert obj.other_company_name == user_company_details.other_company_name
        assert obj.company_city_id == user_company_details.company_city_id
        assert obj.company_city_name == user_company_details.company_city_name
        assert obj.job_role_id == user_company_details.job_role_id
        assert obj.job_role_name == user_company_details.job_role_name
        assert obj.other_job_role_name == user_company_details.other_job_role_name
        assert obj.is_currently_working_in_this_company == \
               user_company_details.is_currently_working_in_this_company
        assert obj.start_date == user_company_details.start_date
        assert obj.end_date == user_company_details.end_date
        assert obj.ctc == user_company_details.ctc
        assert obj.no_of_months_for_notice_period == \
               user_company_details.no_of_months_for_notice_period
        assert obj.other_company_city_name == user_company_details.other_company_city_name

    def test_delete_user_social_profile_details(self, storage, reset_sequence):
        # Arrange
        social_profile_details_ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe81"]
        models.UserSocialProfileDetailsFactory(
            id=social_profile_details_ids[0])

        # Act
        storage.delete_user_social_profile_details(
            social_profile_details_ids=social_profile_details_ids)

        # Assert
        from ib_users.models import UserSocialProfileDetails
        response = UserSocialProfileDetails.objects.filter(
            id__in=social_profile_details_ids).exists()
        assert response is False

    def test_create_user_degree_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        user_account = models.UserAccountFactory(user_id=user_id)
        models.UserProfessionalSkillsFactory(
            id=ids[0], user_account=user_account, skill_id="skill_id1",
            skill_name="skill_name1", other_skill_name=None)

        degree_details = interface_dtos.UpdateDegreeDetailsDTOFactory(
            id=ids[0],
            type=enums.DegreeType.BACHELORS.value,
            course_id="course_id1", course_name="course_name1",
            other_course_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            department_id="department_id1", department_name="department_name1",
            score_type=enums.ScoreType.CGPA.value, score=1000,
            start_year=2020, end_year=2022, no_of_backlogs=10,
            institute_id="institute_id", institute_name="institute_name",
            other_institute_name=None, institute_pin_code="998877",
            institute_city_name="institute_city_name2",
            expected_date_to_clear_backlogs=datetime.date.today(),
            institute_district_id="institute_district_id",
            institute_district_name="institute_district_name",
            institute_state_id="institute_state_id",
            institute_state_name="institute_state_name",
            other_institute_city_name="other_institute_city_name",
            other_department_name="other_department_name",
            institute_country_name="institute_country_name",
            institute_country_id="institute_country_id")

        # Act
        storage.create_user_degree_details(
            user_id=user_id, degree_details=[degree_details])

        # Assert
        from ib_users.models import UserDegreeDetails
        obj = UserDegreeDetails.objects.get(user_account__user_id=user_id)
        assert obj.degree_type == degree_details.type
        assert obj.course_id == degree_details.course_id
        assert obj.course_name == degree_details.course_name
        assert obj.other_course_name == degree_details.other_course_name
        assert obj.completion_status == degree_details.completion_status
        assert obj.department_id == degree_details.department_id
        assert obj.department_name == degree_details.department_name
        assert obj.score_type == degree_details.score_type
        assert obj.score == degree_details.score
        assert obj.start_year == degree_details.start_year
        assert obj.end_year == degree_details.end_year
        assert obj.no_of_backlogs == degree_details.no_of_backlogs
        assert obj.institute_id == degree_details.institute_id
        assert obj.institute_name == degree_details.institute_name
        assert obj.other_institute_name == degree_details.other_institute_name
        assert obj.institute_pin_code == degree_details.institute_pin_code
        assert obj.institute_city_id == degree_details.institute_city_id
        assert obj.institute_city_name == degree_details.institute_city_name
        assert obj.expected_date_to_clear_backlogs == degree_details.expected_date_to_clear_backlogs
        assert obj.institute_district_id == degree_details.institute_district_id
        assert obj.institute_district_name == degree_details.institute_district_name
        assert obj.institute_state_id == degree_details.institute_state_id
        assert obj.institute_state_name == degree_details.institute_state_name
        assert obj.other_institute_city_name == degree_details.other_institute_city_name
        assert obj.other_department_name == degree_details.other_department_name
        assert obj.institute_country_name == degree_details.institute_country_name
        assert obj.institute_country_id == degree_details.institute_country_id

    def test_delete_user_degree_details(self, storage, reset_sequence):
        # Arrange
        degree_details_ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe81"]
        models.UserDegreeDetailsFactory(
            id=degree_details_ids[0])

        # Act
        storage.delete_user_degree_details(
            degree_details_ids=degree_details_ids)

        # Assert
        from ib_users.models import UserDegreeDetails
        response = UserDegreeDetails.objects.filter(
            id__in=degree_details_ids).exists()
        assert response is False

    def test_create_user_professional_skills_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        models.UserAccountFactory(user_id=user_id)

        user_professional_skills = storage_dtos.UserProfessionalSkillsDTOFactory(
            id=ids[0], skill_id="skill_id2", user_id=user_id,
            skill_name="skill_name2", other_skill_name=None)

        # Act
        storage.create_user_professional_skills_details(
            user_professional_skills=[user_professional_skills])

        # Assert
        from ib_users.models import UserProfessionalSkills
        obj = UserProfessionalSkills.objects.get(id=ids[0])
        assert obj.skill_id == user_professional_skills.skill_id
        assert obj.skill_name == user_professional_skills.skill_name
        assert obj.other_skill_name == user_professional_skills.other_skill_name

    def test_create_user_company_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        models.UserAccountFactory(user_id=user_id)

        user_company_details = interface_dtos.UpdateUserCompanyDetailsDTOFactory(
            id=ids[0], company_id="company_id", company_name="company_name1",
            other_company_name="other_company_name1",
            company_city_id="company_city_id1",
            company_city_name="company_city_name1",
            job_role_id="job_role_id1", job_role_name="job_role_name",
            other_job_role_name=None,
            is_currently_working_in_this_company=True,
            start_date=datetime.date.today(), end_date=datetime.date.today(),
            ctc=enums.CTC.SIX_TO_NINE_LPA.value, no_of_months_for_notice_period=10,
            other_company_city_name="other_company_city_name")

        # Act
        storage.create_user_company_details(
            user_company_details=[user_company_details], user_id=user_id)

        # Assert
        from ib_users.models import UserCompanyDetails
        obj = UserCompanyDetails.objects.get(user_account__user_id=user_id)
        assert obj.company_id == user_company_details.company_id
        assert obj.company_name == user_company_details.company_name
        assert obj.other_company_name == user_company_details.other_company_name
        assert obj.company_city_id == user_company_details.company_city_id
        assert obj.company_city_name == user_company_details.company_city_name
        assert obj.job_role_id == user_company_details.job_role_id
        assert obj.job_role_name == user_company_details.job_role_name
        assert obj.other_job_role_name == user_company_details.other_job_role_name
        assert obj.is_currently_working_in_this_company == \
               user_company_details.is_currently_working_in_this_company
        assert obj.start_date == user_company_details.start_date
        assert obj.end_date == user_company_details.end_date
        assert obj.ctc == user_company_details.ctc
        assert obj.no_of_months_for_notice_period == \
               user_company_details.no_of_months_for_notice_period
        assert obj.other_company_city_name == user_company_details.other_company_city_name

    def test_create_user_social_profile_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        ids = ["5fd64953-7c9a-4e34-9f46-d9ad554dfe82"]
        models.UserAccountFactory(user_id=user_id)

        social_profile_details = interface_dtos.SocialProfileDetailsDTOFactory(
            id=ids[0], profile_link="profile_link1",
            social_provider=enums.SocialProvider.LINKEDIN.value)

        # Act
        storage.create_user_social_profile_details(
            social_profile_details=[social_profile_details], user_id=user_id)

        # Assert
        from ib_users.models import UserSocialProfileDetails
        obj = UserSocialProfileDetails.objects.get(user_account__user_id=user_id)
        assert obj.profile_link == social_profile_details.profile_link
        assert obj.social_provider == social_profile_details.social_provider

    def test_create_or_update_user_profile_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)

        profile_details = interface_dtos.UpdateProfileDetailsDTOFactory(
            email="lakshmi@gmail.com", gender=enums.Gender.FEMALE.value,
            preferred_languages=[enums.Language.TELUGU.value],
            date_of_birth=datetime.date.today(),
            first_name="first_name", profile_pic_url="profile_pic_url",
            cover_page_url=None)

        # Act
        storage.create_or_update_user_profile_details(
            user_id=user_id, profile_details=profile_details)

        # Assert
        from ib_users.models import UserProfile
        obj = UserProfile.objects.get(account__user_id=user_id)
        assert obj.email == profile_details.email
        assert obj.gender == profile_details.gender
        assert obj.dob == profile_details.date_of_birth
        assert obj.profile_pic_url == profile_details.profile_pic_url
        assert obj.name == profile_details.first_name
        assert obj.last_name == profile_details.last_name
        assert obj.cover_page_url == profile_details.cover_page_url

    def test_create_or_update_user_contact_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        contact_details = interface_dtos.ContactDetailsDTOFactory(
            whatsapp_mobile_number="9988776655",
            whatsapp_mobile_country_code="91",
            i_want_to_receive_updates_in_whatsapp=True,
            have_whatsapp=True)

        # Act
        storage.create_or_update_user_contact_details(
            user_id=user_id, contact_details=contact_details)

        # Assert
        from ib_users.models import UserContactDetails
        obj = UserContactDetails.objects.get(user_account__user_id=user_id)
        assert obj.whatsapp_mobile_number == contact_details.whatsapp_mobile_number
        assert obj.whatsapp_mobile_country_code == contact_details.whatsapp_mobile_country_code
        assert obj.i_want_to_receive_updates_directly_on_whatsapp == \
               contact_details.i_want_to_receive_updates_in_whatsapp
        assert obj.have_whatsapp == contact_details.have_whatsapp

    def test_create_or_update_user_ssc_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        ssc_details = interface_dtos.UpdateSSCDetailsDTOFactory(
            board_name_enum=enums.SSCBoardName.CBSE.value,
            institute_id="institute_id",
            institute_name="institute_name",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)

        # Act
        actual_result = storage.create_or_update_user_ssc_details(
            user_id=user_id, ssc_details=ssc_details)

        # Assert
        from ib_users.models import UserSSCDetails
        obj = UserSSCDetails.objects.get(user_account__user_id=user_id)
        assert obj.board_name_enum == ssc_details.board_name_enum
        assert obj.institute_id == ssc_details.institute_id
        assert obj.institute_name == ssc_details.institute_name
        assert obj.other_institute_name == ssc_details.other_institute_name
        assert obj.completion_status == ssc_details.completion_status
        assert obj.score_type == ssc_details.score_type
        assert obj.score == ssc_details.score
        assert obj.year_of_completion == ssc_details.year_of_completion

    def test_create_or_update_user_intermediate_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        intermediate_details = interface_dtos.UpdateIntermediateDetailsDTOFactory(
            course_id="intermediate_course_id",
            course_name="intermediate_course_name",
            institute_name="institute_name",
            other_course_name=None,
            institute_id="institute_id",
            other_institute_name=None,
            completion_status=enums.CourseCompletionStatus.COMPLETED.value,
            score_type=enums.ScoreType.CGPA.value,
            score=10, year_of_completion=2014)

        # Act
        storage.create_or_update_user_intermediate_details(
            user_id=user_id, intermediate_details=intermediate_details)

        # Assert
        from ib_users.models import UserIntermediateDetails
        obj = UserIntermediateDetails.objects.get(user_account__user_id=user_id)
        assert obj.intermediate_course_id == intermediate_details.course_id
        assert obj.intermediate_course_name == intermediate_details.course_name
        assert obj.other_intermediate_course_name == intermediate_details.other_course_name
        assert obj.completion_status == intermediate_details.completion_status
        assert obj.institute_id == intermediate_details.institute_id
        assert obj.institute_name == intermediate_details.institute_name
        assert obj.other_institute_name == intermediate_details.other_institute_name
        assert obj.score_type == intermediate_details.score_type
        assert obj.score == intermediate_details.score
        assert obj.year_of_completion == intermediate_details.year_of_completion

    def test_create_or_update_user_current_professional_details(
            self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)

        current_professional_details = storage_dtos.CurrentProfessionalDetailsDTOFactory(
            job_role_id="job_role_id",
            job_role_name="job_role_name",
            other_job_role_name=None,
            higher_education_course_type=enums.CourseType.BACHELORS.value,
            have_work_experience=False)

        # Act
        storage.create_or_update_user_current_professional_details(
            user_id=user_id, current_professional_details=current_professional_details)

        # Assert
        from ib_users.models import UserCurrentProfessionalDetails
        obj = UserCurrentProfessionalDetails.objects.get(user_account__user_id=user_id)
        assert obj.job_role_id == current_professional_details.job_role_id
        assert obj.job_role_name == current_professional_details.job_role_name
        assert obj.other_job_role_name == current_professional_details.other_job_role_name
        assert obj.higher_education_course_type == current_professional_details.higher_education_course_type
        assert obj.have_work_experience == current_professional_details.have_work_experience

    def test_create_or_update_user_work_experience_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)

        work_experience_details = storage_dtos.WorkExperienceDetailsDTOFactory(
            no_of_years_experience_in_it_sector=10,
            no_of_years_experience_in_non_it_sector=11)

        # Act
        storage.create_or_update_user_work_experience_details(
            user_id=user_id, work_experience_details=work_experience_details)

        # Assert
        from ib_users.models import UserWorkExperienceDetails
        obj = UserWorkExperienceDetails.objects.get(
            user_account__user_id=user_id)
        assert obj.no_of_years_experience_in_it_sector == \
               work_experience_details.no_of_years_experience_in_it_sector
        assert obj.no_of_years_experience_in_non_it_sector == \
               work_experience_details.no_of_years_experience_in_non_it_sector

    def test_create_or_update_user_address_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)

        address_details = interface_dtos.UpdateAddressDetailsDTOFactory(
            address_type=enums.AddressType.CURRENT.value,
            address_1="address_1",
            address_2="address_2", pin_code="pin_code",
            city_id="city_id",
            city_name="city_name", other_city_name="other_city_name",
            district_id="district_id",
            district_name="district_name", state_id="state_id",
            state_name="state_name",
            country_id="country_id", country_name="country_name"
        )
        # Act
        storage.create_or_update_user_address_details(
            user_id=user_id, address_details=[address_details])

        # Assert
        from ib_users.models import UserAddressDetails
        obj = UserAddressDetails.objects.get(
            user_account__user_id=user_id)
        assert obj.address_type == address_details.address_type
        assert obj.address_1 == address_details.address_1
        assert obj.address_2 == address_details.address_2
        assert obj.pin_code == address_details.pin_code
        assert obj.city_id == address_details.city_id
        assert obj.city_name == address_details.city_name
        assert obj.other_city_name == address_details.other_city_name
        assert obj.district_id == address_details.district_id
        assert obj.district_name == address_details.district_name
        assert obj.state_id == address_details.state_id
        assert obj.state_name == address_details.state_name
        assert obj.country_id == address_details.country_id
        assert obj.country_name == address_details.country_name

    def test_create_or_update_user_guardian_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        models.UserAccountFactory(user_id=user_id)
        user_guardian_details = interface_dtos.UserGuardianDetailsDTOFactory(
            user_id=user_id,
            first_name="first_name",
            last_name="last_name",
            relation=enums.GuardianRelation.FATHER.value,
            other_relation="other_relation",
            job_role_id="job_role_id",
            job_role_name="job_role_name",
            other_job_role_name="other_job_role_name",
            email="john@gamil.com",
            country_code="91",
            phone_number="9988776655",
            have_whatsapp=True,
            whatsapp_mobile_country_code="91",
            whatsapp_mobile_number="9988776655",
            i_want_to_receive_updates_in_whatsapp=False)

        # Act
        storage.create_or_update_user_guardian_details(
            user_guardian_details=user_guardian_details)

        # Assert
        from ib_users.models import UserGuardianDetails
        obj = UserGuardianDetails.objects.get(
            user_account__user_id=user_id)
        assert obj.first_name == user_guardian_details.first_name
        assert obj.last_name == user_guardian_details.last_name
        assert obj.relation == user_guardian_details.relation
        assert obj.job_role_id == user_guardian_details.job_role_id
        assert obj.job_role_name == user_guardian_details.job_role_name
        assert obj.other_job_role_name == user_guardian_details.other_job_role_name
        assert obj.email == user_guardian_details.email
        assert obj.phone_number == user_guardian_details.phone_number
        assert obj.country_code == user_guardian_details.country_code
        assert obj.have_whatsapp == user_guardian_details.have_whatsapp
        assert obj.whatsapp_mobile_number == user_guardian_details.whatsapp_mobile_number
        assert obj.whatsapp_mobile_country_code == user_guardian_details.whatsapp_mobile_country_code
        assert obj.other_relation == user_guardian_details.other_relation
        assert obj.i_want_to_receive_updates_directly_on_whatsapp is False

    def test_get_user_guardian_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_guardian_details = models.UserGuardianDetailsFactory(
            user_account=user_account, email="durga@google.co")

        expected_response = storage_dtos.UserGuardianDetailsDTOFactory(
            user_id=user_id,
            first_name=user_guardian_details.first_name,
            last_name=user_guardian_details.last_name,
            relation=user_guardian_details.relation,
            other_relation=user_guardian_details.other_relation,
            job_role_id=user_guardian_details.job_role_id,
            job_role_name=user_guardian_details.job_role_name,
            other_job_role_name=user_guardian_details.other_job_role_name,
            email=user_guardian_details.email,
            country_code=user_guardian_details.country_code,
            phone_number=user_guardian_details.phone_number,
            have_whatsapp=user_guardian_details.have_whatsapp,
            whatsapp_mobile_country_code=user_guardian_details.whatsapp_mobile_country_code,
            whatsapp_mobile_number=user_guardian_details.whatsapp_mobile_number,
            i_want_to_receive_updates_in_whatsapp=user_guardian_details.i_want_to_receive_updates_directly_on_whatsapp
        )

        # Act
        actual_response = storage.get_user_guardian_details(user_id=user_id)

        # Assert
        assert actual_response == expected_response

    def test_get_users_preferred_languages(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_preferred_languages = [
            models.UserPreferredLanguagesFactory(
                user_account=user_account, language=enums.Language.TELUGU.value),
            models.UserPreferredLanguagesFactory(
                user_account=user_account, language=enums.Language.ENGLISH.value)
        ]

        expected_response = [
            storage_dtos.UserPreferredLanguagesDTOFactory(
                user_id=user_id, language=enums.Language.TELUGU.value),
            storage_dtos.UserPreferredLanguagesDTOFactory(
                user_id=user_id, language=enums.Language.ENGLISH.value)
        ]

        # Act
        actual_response = storage.get_users_preferred_languages(
            user_ids=[user_id])

        # Assert
        assert actual_response == expected_response

    def test_get_users_contact_details(self, storage, reset_sequence):
        # Arrange
        user_id = "5fd64953-7c9a-4e34-9f46-d9ad554dfe81"
        user_account = models.UserAccountFactory(user_id=user_id)
        user_contact_details = models.UserContactDetailsFactory(
            user_account=user_account,
            have_whatsapp=False)

        expected_response = [storage_dtos.UserContactDetailsDTOFactory(
            whatsapp_mobile_number=user_contact_details.whatsapp_mobile_number,
            whatsapp_mobile_country_code=user_contact_details.whatsapp_mobile_country_code,
            i_want_to_receive_updates_in_whatsapp=\
            user_contact_details.i_want_to_receive_updates_directly_on_whatsapp,
            have_whatsapp=False, user_id=user_id)]

        # Act
        actual_response = storage.get_users_contact_details(
            user_ids=[user_id])

        # Assert
        assert actual_response == expected_response

    def test_create_or_update_user_social_profile_details_when_no_profile_will_create(
            self, storage, reset_sequence):
        # Arrange
        user_account = models.UserAccountFactory()

        user_id = str(user_account.user_id)
        social_provider = "LINKEDIN"
        profile_link = "https://www.linkedin.com/in/durgarao-uppalapati/"

        # Act
        storage.create_or_update_user_social_profile_details(
            user_id=user_id, social_provider=social_provider, profile_link=profile_link)

        # Assert
        from ib_users.models import UserSocialProfileDetails

        user_social_profile = UserSocialProfileDetails.objects.get()
        assert user_social_profile.social_provider == social_provider
        assert user_social_profile.profile_link == profile_link

    def test_create_or_update_user_social_profile_details_have_profiles_will_update(
            self, storage, reset_sequence):
        # Arrange
        user_account = models.UserAccountFactory()
        models.UserSocialProfileDetailsFactory(
            user_account=user_account, social_provider="LINKEDIN")
        models.UserSocialProfileDetailsFactory(
            user_account=user_account, social_provider="TWITTER",
            profile_link="https://twitter.com/durgarao/")

        user_id = str(user_account.user_id)
        social_provider = "LINKEDIN"
        profile_link = "https://www.linkedin.com/in/durgarao-uppalapati/"

        # Act
        storage.create_or_update_user_social_profile_details(
            user_id=user_id, social_provider=social_provider, profile_link=profile_link)

        # Assert
        from ib_users.models import UserSocialProfileDetails

        user_social_profile = UserSocialProfileDetails.objects.get(
            user_account_id=user_id, social_provider=social_provider)
        assert user_social_profile.profile_link == profile_link

    def test_get_user_ids_for_phone_number(self, storage, reset_sequence):
        # Arrange
        phone_number = "9876543210"
        country_code = "+91"
        phone_number_dto = PhoneNumberDTO(
            country_code=country_code,
            phone_number=phone_number
        )
        user_ids = [
            "d64b705b-d706-43e9-8c66-238b8e354c9b",
            "d64b705b-d706-43e9-8c66-238b8e354c9c",
        ]
        user_accounts = [
            UserAccountFactory(user_id=user_ids[0]),
            UserAccountFactory(user_id=user_ids[1]),
        ]
        UserProfileFactory(
            phone_number=phone_number,
            country_code=country_code,
            account=user_accounts[0],
            email="john1@gmail.com"
        )
        UserProfileFactory(
            phone_number=phone_number,
            country_code=country_code,
            account=user_accounts[1],
            email="john2@gmail.com"
        )

        UserProfileFactory(
            email="john3@gmail.com"
        )

        # Act
        actual_response = storage.get_user_ids_for_phone_number(
            phone_number_dto=phone_number_dto
        )

        # Assert
        assert actual_response == user_ids

import pytest

from ib_users.interactors.DTOs.common_dtos import UserIdsWithTotalDTO, \
    UserIdWithEmailIdDTO
from ib_users.models.user_account import UserAccount
from uuid import uuid4


@pytest.mark.django_db
def test_create_user_profile_when_details_given_return_created_user_profile_id():
    from ib_users.constants.user_profile.enums import Gender, Language
    from ib_users.interactors.user_profile_interactor import UserProfileDTO
    user_profile = UserProfileDTO(
        name="iB User2",
        gender=Gender.MALE.value,
        dob="1994-07-01",
        profile_pic_url="",
        phone_number="9876543210",
        country_code="91",
        email="first@last.com",
        language_preference=Language.ENGLISH.value
    )
    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()
    user_account = UserAccount.objects.create()
    user_id = storage_impl.create_user_profile(user_profile=user_profile,
                                               account_id=user_account.user_id)
    assert user_id is not None

@pytest.mark.django_db
def test_create_user_profile_when_gender_is_invalid_throws_exception():
    from ib_users.interactors.user_profile_interactor import UserProfileDTO
    user_profile = UserProfileDTO(
        name="iB User2",
        gender="Male"
    )
    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()

    from django.core.exceptions import ValidationError
    with pytest.raises(ValidationError) as validation_error:
        user_account = UserAccount.objects.create()
        storage_impl.create_user_profile(user_profile=user_profile,
                                         account_id=user_account.user_id)
        from ib_users.constants.user_profile.error_messages import \
            INVALID_GENDER
        assert validation_error.args == ValidationError(INVALID_GENDER).args


@pytest.mark.django_db
def test_create_user_profile_when_language_is_invalid_throws_exception():
    from ib_users.interactors.user_profile_interactor import UserProfileDTO
    user_profile = UserProfileDTO(
        name="iB User2",
        language_preference="English"
    )
    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()
    user_account = UserAccount.objects.create()
    from django.core.exceptions import ValidationError
    with pytest.raises(ValidationError) as validation_error:
        storage_impl.create_user_profile(user_profile=user_profile,
                                         account_id=user_account.user_id)
        from ib_users.constants.user_profile.error_messages import \
            INVALID_LANGUAGE
        assert validation_error.args == ValidationError(INVALID_LANGUAGE).args


@pytest.mark.django_db
def test_get_user_profile_when_user_id_is_valid_returns_user_profile():
    user_data = {
        "name": "User name", "dob": None,
        "iso_country_code": "IN",
        "last_name": "Durga",
        "cover_page_url": "https://cover_page.url/"
    }
    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    from ib_users.interactors.user_profile_interactor import \
        GetUserProfileDTO, UserProfileDTO
    storage_impl = UserProfileSQLStorage()
    user_account = UserAccount.objects.create()
    storage_impl.create_user_profile(user_profile=UserProfileDTO(
        **user_data), account_id=user_account.user_id)
    user_profile_actual = storage_impl.get_user_profile(
        user_id=user_account.user_id)
    user_profile_expected = GetUserProfileDTO(
        **{**user_data, "user_id": str(user_account.user_id), "is_active": True})

    assert user_profile_actual == user_profile_expected


@pytest.mark.django_db
def test_update_user_profile_when_user_id_is_valid():
    from ib_users.interactors.user_profile_interactor import UserProfileDTO

    create_profile_data = UserProfileDTO(
        name="iB User1",
        phone_number="9876543210"
    )
    update_profile_data = UserProfileDTO(
        name="iB User2",
        email="first@last.com"
    )

    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()
    user_account = UserAccount.objects.create()
    user_id = storage_impl.create_user_profile(create_profile_data,
                                               account_id=user_account.user_id)
    updated_profile_data = storage_impl.update_user_profile(
        user_id=user_account.user_id, update_profile_data=update_profile_data)

    assert update_profile_data.name == updated_profile_data.name
    assert update_profile_data.email == updated_profile_data.email
    assert create_profile_data.phone_number == updated_profile_data.phone_number


@pytest.mark.django_db
def test_update_user_profile_when_user_name_and_email_is_empty():
    from ib_users.interactors.user_profile_interactor import UserProfileDTO

    create_profile_data = UserProfileDTO(
        name="iB User1",
        phone_number="9876543210",
        cover_page_url=None,
        last_name=None
    )
    update_profile_data = UserProfileDTO(
        name="",
        email="",
        cover_page_url="http://coverpage.url",
        last_name="",
        iso_country_code="91"
    )

    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()
    user_account = UserAccount.objects.create()
    user_id = storage_impl.create_user_profile(create_profile_data,
                                               account_id=user_account.user_id)
    updated_profile_data = storage_impl.update_user_profile(
        user_id=user_account.user_id, update_profile_data=update_profile_data)

    assert update_profile_data.name == updated_profile_data.name
    assert update_profile_data.email == updated_profile_data.email
    assert create_profile_data.phone_number == updated_profile_data.phone_number
    assert update_profile_data.iso_country_code == updated_profile_data.iso_country_code
    assert update_profile_data.cover_page_url == updated_profile_data.cover_page_url
    assert update_profile_data.last_name == updated_profile_data.last_name


@pytest.mark.django_db
def test_update_user_phone_number_verified():
    from ib_users.models.user_profile import UserProfile
    user_account = UserAccount.objects.create()
    user_profile = UserProfile(
        name="iB User2", country_code="+91", phone_number="1234567890",
        account=user_account)
    user_profile.save()

    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()

    storage_impl.update_user_phone_number_verified(user_id=user_account.user_id)
    user_profile.refresh_from_db()
    assert user_profile.is_phone_number_verified


@pytest.mark.django_db
def test_update_user_email_verified():
    from ib_users.models.user_profile import UserProfile
    user_account = UserAccount.objects.create()
    user_profile = UserProfile(
        name="iB User2", email="test@example.com", account=user_account)
    user_profile.save()

    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()

    storage_impl.update_user_email_verified(user_id=user_account.user_id)
    user_profile.refresh_from_db()
    assert user_profile.is_email_verified


@pytest.mark.django_db
def test_get_user_email():
    from ib_users.models.user_profile import UserProfile
    user_account = UserAccount.objects.create()
    user_profile = UserProfile(
        name="iB User2", email="test@example.com", account=user_account)
    user_profile.save()

    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()

    email = storage_impl.get_user_email(user_id=user_account.user_id)
    user_profile.refresh_from_db()
    assert email == user_profile.email


@pytest.mark.django_db
def test_user_exists():
    from ib_users.models.user_profile import UserProfile
    user_account = UserAccount.objects.create()
    user_profile = UserProfile.objects.create(
        name="iB User2", email="test@example.com", account=user_account)

    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()

    assert storage_impl.does_user_exists(user_id=user_account.user_id)


@pytest.mark.django_db
@pytest.mark.parametrize('user_id', [uuid4()])
def test_user_does_not_exists(user_id):
    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    storage_impl = UserProfileSQLStorage()

    assert not storage_impl.does_user_exists(user_id=user_id)


@pytest.mark.django_db
def test_get_user_ids_by_name_or_email():
    # Arrange
    from ib_users.models.user_profile import UserProfile
    from ib_users.storages.user_profile_sql_storage import \
        UserProfileSQLStorage
    user_id1 = "c9d59afe-013a-4d4c-8fd8-f00ec323ffbc"
    user_id2 = "2e514e69-1804-4cf9-965c-03dac9226532"
    offset = 0
    limit = 2
    user_account1 = UserAccount.objects.create(user_id=user_id1)
    user_profile1 = UserProfile.objects.create(
        name="adilakshmi", email="example@example.com", account=user_account1)
    user_account1 = UserAccount.objects.create(user_id=user_id2)
    user_profile1 = UserProfile.objects.create(
        name="Bonala", email="adilakshmi@example.com", account=user_account1)
    storage_impl = UserProfileSQLStorage()
    search_value = "adi"

    expected_result = UserIdsWithTotalDTO(
        total_count=2, user_ids=[user_id1, user_id2]
    )

    # Act
    actual_user_ids = storage_impl.get_user_ids_by_name_or_email(
        search_value=search_value, offset=offset, limit=limit)
    # Assert
    assert actual_user_ids == expected_result


@pytest.mark.django_db
def test_get_user_ids_by_email_ids_storage():
    # Arrange
    from ib_users.models.user_profile import UserProfile
    from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
    user_id1 = "c9d59afe-013a-4d4c-8fd8-f00ec323ffbc"
    user_id2 = "2e514e69-1804-4cf9-965c-03dac9226532"
    email_1 = "example@example.com"
    email_2 = "adilakshmi@example.com"
    user_account1 = UserAccount.objects.create(user_id=user_id1)
    user_profile1 = UserProfile.objects.create(
        name="adilakshmi", email=email_1, account=user_account1, is_email_verified=True)
    user_account1 = UserAccount.objects.create(user_id=user_id2)
    user_profile1 = UserProfile.objects.create(
        name="Bonala", email=email_2, account=user_account1, is_email_verified=True)

    storage_impl = UserProfileSQLStorage()
    expected_output = [
        UserIdWithEmailIdDTO(
            email_id=email_1, user_id=user_id1
        ),
        UserIdWithEmailIdDTO(
            email_id=email_2, user_id=user_id2
        )
    ]

    # Act
    actual_dtos = storage_impl.get_user_ids_by_email_ids(
        email_ids=[email_1, email_2]
    )

    # Assert
    assert actual_dtos == expected_output

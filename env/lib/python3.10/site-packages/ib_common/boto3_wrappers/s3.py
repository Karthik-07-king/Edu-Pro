import backoff
from django.conf import settings
import logging

from ib_common.boto3_wrappers.config import Config
from ib_common.boto3_wrappers.on_tpm_give_up import on_tpm_give_up

S3_BOTO_MAX_TRIES = getattr(settings, 'S3_BOTO_MAX_TRIES', 5)
S3_BOTO_MAX_TIMEOUT = getattr(settings, 'S3_BOTO_MAX_TIMEOUT', 20)

logger = logging.getLogger(getattr(settings, 'LOGGER_NAME', 'logentries'))


class S3Utility(Config):
    def __init__(self, aws_access_key_id, aws_secret_access_key, region_name,
                 bucket_name):
        super(S3Utility, self).__init__(
            aws_access_key_id=aws_access_key_id,
            aws_secret_access_key=aws_secret_access_key,
            region_name=region_name)
        self.bucket_name = bucket_name

        self.client = self._get_s3_client()

    @backoff.on_exception(backoff.expo, Exception, max_tries=S3_BOTO_MAX_TRIES,
                          max_time=S3_BOTO_MAX_TIMEOUT,
                          jitter=backoff.full_jitter,
                          on_giveup=on_tpm_give_up, logger=logger)
    def _get_s3_client(self):
        import boto3

        aws_access_key_id = self.aws_access_key_id
        aws_secret_access_key = self.aws_secret_access_key
        region_name = self.region_name

        from botocore.client import Config
        s3 = boto3.client('s3', aws_access_key_id=aws_access_key_id,
                          aws_secret_access_key=aws_secret_access_key,
                          region_name=region_name,
                          config=Config(signature_version='s3v4'))
        return s3

    @backoff.on_exception(backoff.expo, Exception, max_tries=S3_BOTO_MAX_TRIES,
                          max_time=S3_BOTO_MAX_TIMEOUT,
                          jitter=backoff.full_jitter,
                          on_giveup=on_tpm_give_up, logger=logger)
    def put_object(self, key_name, content):
        bucket_name = self.bucket_name
        self.client.put_object(Body=content, Bucket=bucket_name, Key=key_name)
        return

    @backoff.on_exception(backoff.expo, Exception, max_tries=S3_BOTO_MAX_TRIES,
                          max_time=S3_BOTO_MAX_TIMEOUT,
                          jitter=backoff.full_jitter,
                          on_giveup=on_tpm_give_up, logger=logger)
    def read_object(self, key_name):
        bucket_name = self.bucket_name
        obj = self.client.get_object(Bucket=bucket_name, Key=key_name)
        data = obj['Body'].read()
        return data

    @backoff.on_exception(backoff.expo, Exception, max_tries=S3_BOTO_MAX_TRIES,
                          max_time=S3_BOTO_MAX_TIMEOUT,
                          jitter=backoff.full_jitter,
                          on_giveup=on_tpm_give_up, logger=logger)
    def get_presigned_url(self, key_name, expires_in_seconds=3600):
        bucket_name = self.bucket_name

        url = self.client.generate_presigned_url(
            ClientMethod='get_object', Params={
                'Bucket': bucket_name, 'Key': key_name
            }, ExpiresIn=expires_in_seconds)
        return url

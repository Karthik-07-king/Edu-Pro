import logging

from django_swagger_utils.drf_server.exceptions import BadRequest, Forbidden


from botocore.exceptions import ClientError
from django.conf import settings

LOGGER = logging.getLogger('s3-uploader')


class CognitoUtils(object):  # pylint:disable=too-many-public-methods

    def __init__(self, **kwargs):

        self.cognito_identity_client = self.get_cognito_identity_client(
            **kwargs)

    @staticmethod
    def handle_boto3_exception(err):
        from s3_uploader.constants.boto3_exceptions import Boto3Exceptions
        code = err.response['Error']['Code']

        if code == Boto3Exceptions.NotAuthorizedException.name:
            raise Forbidden(Boto3Exceptions.NotAuthorizedException.value,
                            Boto3Exceptions.NotAuthorizedException.name)
        else:
            LOGGER.error(err.response['Error']['Code'])
            raise BadRequest(Boto3Exceptions.GeneralError.value,
                             Boto3Exceptions.GeneralError.name)

    @staticmethod
    def get_cognito_identity_client(**kwargs):
        from boto3 import client
        _client = client('cognito-identity',
                         region_name=settings.S3_COGNITO_POOL_REGION_NAME,
                         **kwargs)
        return _client

    def get_identity_id(self, user_id, **kwargs):
        developer_identity_token_client = self.cognito_identity_client. \
            get_open_id_token_for_developer_identity
        try:
            response = developer_identity_token_client(
                IdentityPoolId=settings.S3_COGNITO_IDENTITY_POOL_ID,
                Logins={
                    settings.S3_COGNITO_DEVELOPER_IDENTITY_NAME: user_id
                }
            )
            return response['IdentityId'], response['Token']
        except ClientError as err:
            self.handle_boto3_exception(err)

    def get_aws_credentials(self, user_id, **kwargs):
        identity_id, token = self.get_identity_id(user_id)

        try:
            response = \
                self.cognito_identity_client.get_credentials_for_identity(
                    IdentityId=identity_id,
                    Logins={
                        'cognito-identity.amazonaws.com': token
                    },
                )
            return self.convert_aws_credentials(response['Credentials'])
        except ClientError as err:
            self.handle_boto3_exception(err)

    @staticmethod
    def convert_aws_credentials(credentials, **kwargs):
        return {
            "aws_access_key_id": credentials["AccessKeyId"],
            "secret_access_key": credentials["SecretKey"],
            "aws_session_token": credentials["SessionToken"],
            "expiration": str(credentials["Expiration"]).split("+")[0],
            "protocol": settings.DEFAULT_CLOUDFRONT_PROTOCOL
        }

    def get_s3_dict(self, **kwargs):

        folder_name = self._get_folder_name()
        return {
            "bucket_name": settings.AWS_STORAGE_BUCKET_NAME,
            "cloudfront_domain": settings.AWS_CLOUDFRONT_DOMAIN,
            "folder_name": folder_name,
            "region_name": settings.AWS_S3_REGION_NAME,
            "object_acl": settings.S3_UPLOADER_OBJECT_ACL,
            "url_type": settings.S3_UPLOADER_URL_TYPE
        }

    @staticmethod
    def _get_folder_name():
        if settings.S3_UPLOADER_FOLDER_PREFIX:
            return "{}/{}/".format(settings.MEDIAFILES_LOCATION,
                                      settings.S3_UPLOADER_FOLDER_PREFIX)
        else:
            return "{}/".format(settings.MEDIAFILES_LOCATION)

    def get_s3_credentials(self, user_id, **kwargs):
        credentials = self.get_aws_credentials(user_id)
        credentials.update(self.get_s3_dict())
        return credentials
